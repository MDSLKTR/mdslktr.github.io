var Debuffs=React.createClass({statics:{get:function(){return[["Marked for Death","Damage",.2]]}},render:function(){}}),Gems=React.createClass({statics:{get:function(){return[["Zei's Stone of Vengeance","Item_Power_Passive#ItemPassive_Unique_Gem_012_x1"],["Bane of the Trapped","Item_Power_Passive#ItemPassive_Unique_Gem_002_x1"],["Gogok of the Swiftness","Item_Power_Passive#ItemPassive_Unique_Gem_008U_x1"]]}},render:function(){}}),ItemQuality=React.createClass({statics:{get:function(){return{green:"set",orange:"unique",blue:"magic",yellow:"rare",white:"normal",common:"common"}}},render:function(){}}),PassiveBuffs=React.createClass({statics:{get:function(){return[["Cull the Weak","Damage",.2],["Single Out","Crit Chance",.25],["Archery","Damage",.08],["Archery","Crit Damage",.5],["Archery","Crit Chance",.05],["Custom Engineering","Sentries",2],["Ambush","Damage",.4],["Ballistics","Damage",1],["Sharpshooter","Crit Chance",.04],["Grenadier","Damage",.1],["Steady Aim","Damage",.2]]}},render:function(){}}),Realms=React.createClass({statics:{get:function(){return["eu","us","kr"]}},render:function(){}}),Runes=React.createClass({statics:{get:function(){return{a:"49%",b:"97%",c:"73",d:"0",e:"25%"}}},render:function(){}}),Sets=React.createClass({statics:{get:function(){return[["Cain's Fate",0],["Bastions of Will",0],["Aughild's Victory",0],["Aughild's Authority",0],["Guardian's Contingency",0],["Immortal King's Call",0],["Natalya's Vengeance",0],["Tal Rasha's Elements",0],["Sage's Plight",0],["Sage's Journey",0],["Born's Defiance",0],["Born's Command",0],["Unhallowed Essence",0],["Aughild's Authority",0],["Cain's Destiny",0],["Thorns of the Invoker",0],["Might of the Earth",0],["Firebird's Finery",0],["Guardian's Jeopardy",0],["Helltooth Harness",0],["Armor of Akkhan",0],["Wrath of the Wastes",0],["Raiment of the Jade Harvester",0],["Embodiment of the Marauder",0],["Raiment of a Thousand Storms",0],["The Legacy of Raekor",0],["Roland's Legacy",0],["Delsere's Magnum Opus",0],["Monkey King's Garb",0],["Asheara's Uniform",0],["Demon's Skin",0],["Demon's Hide",0],["Asheara's Vestments",0],["Thorns of the Invoker",0],["Delsere's Magnum Opus",0],["Blackthorne's Battlegear",0],["Inna's Mantra",0],["Vyr's Amazing Arcana",0],["Krelm's Buff Bulwark",0],["The Shadow's Mantle",0],["Endless Walk",0],["Legacy of Nightmares",0],["Hallowed Defenders",0],["Hallowed Protectors",0],["Manajuma's Way",0],["Zunimassa's Haunt",0],["Chantodo's Resolve",0],["Istvan's Paired Blades",0],["Shenlong's Spirit",0],["Bul-Kathos's Oath",0],["Danetta's Hatred",0],["Captain Crimson's Trimmings",0]]}},render:function(){}}),SkillBuffs=React.createClass({statics:{get:function(){return[["Bait the Trap","Crit Chance",.1],["Wolf Companion","Damage",.3]]}},render:function(){}}),Stats=React.createClass({statics:{offensiveStats:{},defensiveStats:{},_findMethod:function(a,b,c,d,e,f){var g=["OffensiveStats","DefensiveStats","SkillDamage"],h=this,i=null;return g.forEach(function(g){if(b===g){var j=g.toString(),k=a,l=k.concat(j);i=h[l](c,d,e,f)}}),i},init:function(a){return this._findMethod("init",a)},get:function(a){return this._findMethod("get",a)},set:function(a,b,c,d,e){this._findMethod("set",a,b,c,d,e)},initOffensiveStats:function(){this.offensiveStats={critChance:{name:"Critical Hit Chance",paragonModifier:{increment:.1,max:5,value:0},unit:"%",key:"Crit_Percent_Bonus_Capped",value:0,normalization:100,isParagonStat:!0,maxMap:{head:"0.06",hands:"0.1",bracers:"0.06",ring:"0.06",neck:"0.1",offhand:"0.1"}},critDamage:{name:"Critical Hit Damage",paragonModifier:{increment:1,max:50,value:0},unit:"%",errorCorrection:-100,key:"Crit_Percent_Bonus_Capped",value:0,normalization:100,isParagonStat:!0,maxMap:{hands:"0.5",ring:"0.5",neck:"1",offhand:"0.1"}},primaryResource:{name:"Primary Resource",paragonModifier:{increment:.5,max:25,value:0},unit:"",key:"primaryResource",value:0,normalization:1,isParagonStat:!0,specificName:{barbarian:"Fury","demon-hunter":"Hatred","witch-doctor":"Mana",crusader:"Wrath",monk:"Spirit",wizard:"Arcane Power"}},cooldownReduction:{name:"Cooldown Reduction",paragonModifier:{increment:.2,max:10,value:0},unit:"%",key:"Power_Cooldown_Reduction_Percent_All",multiplicative:!0,value:0,normalization:100,isParagonStat:!0,maxMap:{hands:.08,shoulders:.08,ring:.08,neck:.08,mainHand:.1,offhand:.1}},ResCostRed:{name:"Resource Cost Reduction",paragonModifier:{increment:.2,max:10,value:0},unit:"%",key:"Resource_Cost_Reduction_Percent_All",multiplicative:!0,value:0,normalization:100,isParagonStat:!0},eliteDmgBonus:{name:"Elite Damage Bonus",unit:"%",value:0,key:"Damage_Percent_Bonus_Vs_Elites",normalization:100},areaDamage:{name:"Area Damage Bonus",paragonModifier:{increment:1,max:50,value:0},unit:"%",key:"Splash_Damage_Effect_Percent",value:0,normalization:100,isParagonStat:!0},attacksPerSecond:{name:"Attacks Per Second",unit:"",value:0,normalization:100,addStat:"attackSpeedIncrease"},attackSpeedIncrease:{name:"Attack Speed Increase",paragonModifier:{increment:.2,max:10,value:0},unit:"%",key:"Attacks_Per_Second_Percent",value:0,normalization:100,isParagonStat:!0},fireDmgBonus:{name:"Fire Damage Bonus",type:"offensive",unit:"%",key:"Damage_Dealt_Percent_Bonus#Fire",value:0,normalization:100},physicalDmgBonus:{name:"Physical Damage Bonus",type:"offensive",unit:"%",key:"Damage_Dealt_Percent_Bonus#Physical",value:0,normalization:100},coldDmgBonus:{name:"Cold Damage Bonus",type:"offensive",unit:"%",key:"Damage_Dealt_Percent_Bonus#Cold",value:0,normalization:100},poisonDmgBonus:{name:"Poison Damage Bonus",type:"offensive",unit:"%",key:"Damage_Dealt_Percent_Bonus#Poison",value:0,normalization:100},lightningDmgBonus:{name:"Lightning Damage Bonus",type:"offensive",unit:"%",key:"Damage_Dealt_Percent_Bonus#Lightning",value:0,normalization:100}},EventSystem.publish("api.collect.offensive-stats",this.offensiveStats)},initDefensiveStats:function(){this.defensiveStats={goldPickUpRange:{name:"Gold Pick-up Range",unit:" yards",key:"Gold_PickUp_Radius",value:0,normalization:1},meleeDamageReduction:{name:"Melee Damage Reduction",unit:"%",key:"Damage_Percent_Reduction_From_Melee",multiplicative:!0,value:0,normalization:100},rangedDamageReduction:{name:"Ranged Damage Reduction",unit:"%",key:"Damage_Percent_Reduction_From_Ranged",multiplicative:!0,value:0,normalization:100},eliteDamageReduction:{name:"Elite Damage Reduction",unit:"%",key:"Damage_Percent_Reduction_From_Elites",value:0,multiplicative:!0,normalization:100},maxHealthBonus:{name:"Max Health Bonus",paragonModifier:{increment:.5,max:25,value:0},unit:"%",key:"Hitpoints_Max_Percent_Bonus_Item",value:0,normalization:100,isParagonStat:!0},secondaryResource:{name:"Secondary Resource",unit:"",key:"secondaryResource",value:0,normalization:1,specificName:{"demon-hunter":"Discipline"}},fireResist:{name:"Fire Resist",unit:"",key:"fireResist",value:0,normalization:1,addStat:"allResist"},coldResist:{name:"Cold Resist",unit:"",key:"coldResist",value:0,normalization:1,addStat:"allResist"},lightningResist:{name:"Lightning Resist",unit:"",key:"lightningResist",value:0,normalization:1,addStat:"allResist"},physicalResist:{name:"Physical Resist",unit:"",key:"physicalResist",value:0,normalization:1,addStat:"allResist"},poisonResist:{name:"Poison Resist",unit:"",key:"poisonResist",value:0,normalization:1,addStat:"allResist"},arcaneResist:{name:"Arcane Resist",unit:"",key:"arcaneResist",value:0,normalization:1,addStat:"allResist"},lifeOnHit:{name:"Life on Hit",paragonModifier:{increment:160.9,max:8046.3,value:0},unit:"",key:"lifeOnHit",value:0,normalization:1,isParagonStat:!0},magicFind:{name:"Magic Find",unit:"",key:"magicFind",value:0,normalization:100,isParagonStat:!1},thorns:{name:"Thorns",key:"Thorns_Fixed#Physical",unit:"",value:0,normalization:100,isParagonStat:!1},movementSpeed:{name:"Movement Speed",paragonModifier:{increment:.5,max:25,value:0},unit:"%",value:0,key:"Movement_Scalar",normalization:100,isParagonStat:!0,cap:25},armor:{name:"Armor",paragonModifier:{increment:.5,max:25,value:0},unit:"%",value:0,normalization:1,isParagonStat:!0,hide:!0},allResist:{name:"Resist All",paragonModifier:{increment:5,max:250,value:0},unit:"",value:0,normalization:1,isParagonStat:!0,hide:!0},xpPerKill:{name:"XP per Kill",key:"Experience_Bonus",unit:"",value:0,normalization:1},ccReduction:{name:"Crowd Control Reduction",key:"CrowdControl_Reduction",unit:"%",value:0,normalization:100,multiplicative:!0},knockbackOnHit:{name:"Knockback on hit chance",key:"Weapon_On_Hit_Knockback_Proc_Chance",unit:"%",value:0,normalization:100,multiplicative:!0},freezeOnHit:{name:"Freeze on hit chance",key:"On_Hit_Freeze_Proc_Chance",unit:"%",value:0,normalization:100,multiplicative:!0},stunOnHit:{name:"Stun on hit chance",key:"Weapon_On_Hit_Stun_Proc_Chance",unit:"%",value:0,normalization:100,multiplicative:!0},healthGlobeBonus:{name:"Health Globe Bonus",key:"Health_Globe_Bonus_Health",unit:"",value:0,normalization:1}},EventSystem.publish("api.collect.defensive-stats",this.defensiveStats)},getOffensiveStats:function(){return this.offensiveStats},getDefensiveStats:function(){return this.defensiveStats},getSkillDamage:function(){return{unit:"%",value:0}},setOffensiveStats:function(a,b,c,d){c?this.offensiveStats[a][b][c]=d:this.offensiveStats[a][b]=d,EventSystem.publish("api.call.collect")},setDefensiveStats:function(a,b,c,d){c?this.defensiveStats[a][b][c]=d:this.defensiveStats[a][b]=d,EventSystem.publish("api.call.collect")}},render:function(){}}),WeaponDamageBonusMinPhysical=React.createClass({statics:{get:function(){return["Damage_Weapon_Bonus_Min_X1#Physical"]}},render:function(){}}),WeaponDamagePercentAll=React.createClass({statics:{get:function(){return["Damage_Weapon_Percent_All"]}},render:function(){}}),WeaponElementsDelta=React.createClass({statics:{get:function(){return["Damage_Weapon_Delta#Arcane","Damage_Weapon_Delta#Fire","Damage_Weapon_Delta#Lightning","Damage_Weapon_Delta#Cold","Damage_Weapon_Delta#Poison","Damage_Weapon_Bonus_Delta_X1#Physical"]}},render:function(){}}),WeaponElementsMin=React.createClass({statics:{get:function(){return["Damage_Weapon_Min#Arcane","Damage_Weapon_Min#Fire","Damage_Weapon_Min#Lightning","Damage_Weapon_Min#Cold","Damage_Weapon_Min#Poison","Damage_Weapon_Bonus_Min_X1#Physical"]}},render:function(){}}),Belt=React.createClass({statics:{idList:["Belt","GenericBelt","Belt_Barbarian"],test:function(a){var b=!1;return this.idList.forEach(function(c){a===c&&(b=!0)}),b}},render:function(){}}),Bracers=React.createClass({statics:{idList:["Bracers"],test:function(a){var b=!1;return this.idList.forEach(function(c){a===c&&(b=!0)}),b}},render:function(){}}),Chest=React.createClass({statics:{idList:["ChestArmor","GenericChestArmor","ChestArmor_Barbarian","ChestArmor_DemonHunter","ChestArmor_WitchDoctor","ChestArmor_Crusader","ChestArmor_Wizard","ChestArmor_Monk","Cloak"],test:function(a){var b=!1;return this.idList.forEach(function(c){a===c&&(b=!0)}),b}},render:function(){}}),Feet=React.createClass({statics:{idList:["GenericBoots","Boots","Boots_Barbarian","Boots_DemonHunter","Boots_WitchDoctor","Boots_Crusader","Boots_Wizard","Boots_Monk"],test:function(a){var b=!1;return this.idList.forEach(function(c){a===c&&(b=!0)}),b}},render:function(){}}),Hands=React.createClass({statics:{idList:["GenericGloves","Gloves","Gloves_Barbarian","Gloves_DemonHunter","Gloves_WitchDoctor","Gloves_Crusader","Gloves_Wizard","Gloves_Monk"],test:function(a){var b=!1;return this.idList.forEach(function(c){a===c&&(b=!0)}),b}},render:function(){}}),Head=React.createClass({statics:{idList:["GenericHelm","Helm","Helm_Barbarian","Helm_DemonHunter","Helm_WitchDoctor","Helm_Crusader","Helm_Wizard","Helm_Monk","VoodooMask","SpiritStone_Monk"],test:function(a){var b=!1;return this.idList.forEach(function(c){a===c&&(b=!0)}),b}},render:function(){}}),Legs=React.createClass({statics:{idList:["GenericLegs","Legs","Legs_Barbarian","Legs_DemonHunter","Legs_WitchDoctor","Legs_Crusader","Legs_Wizard","Legs_Monk"],test:function(a){var b=!1;return this.idList.forEach(function(c){a===c&&(b=!0)}),b}},render:function(){}}),MainHand=React.createClass({statics:{idList:["Polearm","Crossbow","Dagger","Sword","Sword2H","Mace","Axe","FistWeapon","CeremonialKnife","MightyWeapon1H","Flail2H","Flail1H","HandXbow","Bow2H","Bow","Wand","Staff","Staff2H","CeremonialDagger","MightyWeapon2H","Mace2H"],test:function(a){var b=!1;return this.idList.forEach(function(c){a===c&&(b=!0)}),b}},render:function(){}}),Neck=React.createClass({statics:{idList:["Amulet"],test:function(a){var b=!1;return this.idList.forEach(function(c){a===c&&(b=!0)}),b}},render:function(){}}),OffHand=React.createClass({statics:{idList:["Quiver","CrusaderShield","Shield","Orb","Source","Mojo","Dagger","Sword","Mace","Axe","FistWeapon","MightyWeapon1H","Flail1H","HandXbow","Bow","Wand","Staff"],test:function(a){var b=!1;return this.idList.forEach(function(c){a===c&&(b=!0)}),b}},render:function(){}}),Ring=React.createClass({statics:{idList:["Ring"],test:function(a){var b=!1;return this.idList.forEach(function(c){a===c&&(b=!0)}),b}},render:function(){}}),Shoulders=React.createClass({statics:{idList:["GenericShoulders","Shoulders","Shoulders_Barbarian","Shoulders_DemonHunter","Shoulders_WitchDoctor","Shoulders_Crusader","Shoulders_Wizard","Shoulders_Monk"],test:function(a){var b=!1;return this.idList.forEach(function(c){a===c&&(b=!0)}),b}},render:function(){}}),skillDamageCollectorClass=React.createClass({displayName:"skill-damage-collector",getInitialState:function(){return{itemCollection:[],itemCount:0}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.item.collection",function(b){a.setState({itemCollection:b})}),EventSystem.subscribe("api.call.skills",function(b){a.setState({skills:b.actives})}),EventSystem.subscribe("api.call.stats",function(b){a.setState({generalStats:b.general})}),EventSystem.subscribe("api.call.items",function(b){a.setState({itemCount:b.count})}),EventSystem.subscribe("api.try.collect",function(b){a.state.itemCount===b&&a.collect()}),EventSystem.subscribe("api.call.collect",function(){a.collect()})},skillDmgSanitize:function(a){var b=0,c="",d="",e=[];for(var f in a)a.hasOwnProperty(f)&&(c=f.toString().slice(4),parseFloat(f)&&(b=parseFloat(f)*parseFloat(a[f])),0!==b&&(d+=c+" "+Math.round(1e4*b)/100+"%<br>",e.push(b+" "+c)));return""!==d?(this.setState({skillDmgRaw:e}),d):void 0},collect:function(){var a=this;if(this.state.itemCollection&&this.state.skills&&this.state.generalStats)return new Promise(function(b,c){Worker.create=function(a){var b=a.toString(),c=new Blob(["'use strict';\nself.onmessage ="+b],{type:"text/javascript"});return window.URL.createObjectURL(c)};var d=Worker.create(function(a){var b,c,d,e,f=a.data.itemSlots,g=a.data.skillDamage,h=a.data.skills,i=a.data.className,j=[],k=[["demon-hunter","Power_Damage_Percent_Bonus#DemonHunter_"],["witch-doctor","Power_Damage_Percent_Bonus#Witchdoctor_"],["barbarian","Power_Damage_Percent_Bonus#Barbarian_"],["crusader","Power_Damage_Percent_Bonus#Crusader_"],["monk","Power_Damage_Percent_Bonus#Monk_"],["wizard","Power_Damage_Percent_Bonus#Wizard_"]],l=[],m=[];for(g.value=0,d=0;d<h.length;d++)if(h[d].skill)for(e=0;e<k.length;e++)k[e][0]===i&&l.push(k[e][1]+h[d].skill.name.replace(/ /g,""));for(b=0;b<f.length;b++)if(f[b].attributesRaw)for(c=0;c<l.length;c++)f[b].attributesRaw[l[c]]&&Object.getOwnPropertyNames(f[b].attributesRaw[l[c]]===l[c])&&(m.push(parseFloat(f[b].attributesRaw[l[c]].min)+h[c].skill.name),j=m.reduce(function(a,b){return b in a?a[b]++:a[b]=1,a},{}));this.postMessage({countedValues:j}),this.close()}),e=new Worker(d);e.onmessage=function(c){b(),a.setState({skillDmg:a.skillDmgSanitize(c.data.countedValues)},function(){EventSystem.publish("api.collect.skill-damage",a.state.skillDmg)}),console.info("the web worker had a save journey")},e.onerror=function(a){c(Error("one of the workers had an horrible accident\n"+a.message+" in line "+a.lineno)),this.terminate()},e.postMessage({itemSlots:a.state.itemCollection,skillDamage:Stats.get("SkillDamage"),skills:a.state.skills,className:a.state.generalStats["class"].value})})},render:function(){return React.DOM.div({style:{visibility:"hidden"}},"Skill Damage Worker")}}),skillDamageCollector=React.createFactory(skillDamageCollectorClass),statsCollectorClass=React.createClass({displayName:"stats-collector",getInitialState:function(){return{itemCollection:[],itemCount:0}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.item.collection",function(b){a.setState({itemCollection:b})}),EventSystem.subscribe("api.call.stats",function(b){a.setState({primaryStats:b.primary})}),EventSystem.subscribe("api.call.skills",function(b){a.setState({skills:b.actives})}),EventSystem.subscribe("api.call.stats",function(b){a.setState({generalStats:b.general})}),EventSystem.subscribe("api.call.item.set-ring",function(b){a.setState({setRing:b})}),EventSystem.subscribe("api.call.items",function(b){a.setState({itemCount:b.count})}),EventSystem.subscribe("api.try.collect",function(b){a.state.itemCount===b&&a.collect()}),EventSystem.subscribe("api.call.collect",function(){a.collect()})},collect:function(){var a=this;if(this.state.itemCollection&&this.state.skills&&this.state.generalStats)return new Promise(function(b,c){Worker.create=function(a){var b=a.toString(),c=new Blob(["'use strict';\nself.onmessage ="+b],{type:"text/javascript"});return window.URL.createObjectURL(c)};var d=Worker.create(function(a){var b,c,d,e,f=a.data.itemSlots,g=a.data.setRing,h=Object.assign({},a.data.offensiveStats,a.data.defensiveStats),i=a.data.setPool,j=a.data.primaryStats,k=[];for(b in h)if(h.hasOwnProperty(b)){for(h[b].multiplicative?h[b].value=1:h[b].value=0,c=0;c<f.length;c++)if(f[c].attributesRaw&&f[c].attributesRaw[h[b].key]&&f[c].attributesRaw[h[b].key].min&&(h[b].multiplicative?h[b].value*=1-f[c].attributesRaw[h[b].key].min:h[b].value+=f[c].attributesRaw[h[b].key].min),f[c].gems[0]&&f[c].gems[0].attributesRaw[h[b].key]&&(h[b].multiplicative?f[c].attributesRaw.Gem_Attributes_Multiplier?h[b].value*=1-f[c].gems[0].attributesRaw[h[b].key].min*f[c].attributesRaw.Gem_Attributes_Multiplier.min:h[b].value*=1-f[c].gems[0].attributesRaw[h[b].key].min:f[c].attributesRaw.Gem_Attributes_Multiplier?h[b].value+=f[c].gems[0].attributesRaw[h[b].key].min*f[c].attributesRaw.Gem_Attributes_Multiplier.min:h[b].value+=f[c].gems[0].attributesRaw[h[b].key].min),f[c].set&&f[c].set.ranks){for(d=0;d<i.length;d++)for(f[c].set.name===i[d][0]&&i[d][1]++,e=0;e<f[c].set.ranks.length;e++)g?f[c].set.name===i[d][0]&&f[c].set.ranks[e].required<=i[d][1]+1&&i[d][1]>=2&&f[c].set.ranks[e].attributesRaw[h[b].key]&&f[c].set.ranks[e].attributesRaw[h[b].key].min&&(h[b].multiplicative?h[b].value*=1-f[c].set.ranks[e].attributesRaw[h[b].key].min:h[b].value+=f[c].set.ranks[e].attributesRaw[h[b].key].min):f[c].set.name===i[d][0]&&f[c].set.ranks[e].required<=i[d][1]&&f[c].set.ranks[e].attributesRaw[h[b].key]&&f[c].set.ranks[e].attributesRaw[h[b].key].min&&(h[b].multiplicative?h[b].value*=1-f[c].set.ranks[e].attributesRaw[h[b].key].min:h[b].value+=f[c].set.ranks[e].attributesRaw[h[b].key].min);if(k.indexOf(f[c].set.name)>-1)continue;k.push(f[c].set.name)}if(j[h[b].key]&&(h[b].multiplicative?h[b].value*=1-j[h[b].key]:h[b].value+=j[h[b].key]),h[b].paragonModifier)if(h[b].multiplicative){if(1===h[b].value){h[b].value=h[b].paragonModifier.value;continue}h[b].value*=1-h[b].paragonModifier.value/h[b].normalization}else h[b].value+=h[b].paragonModifier.value/h[b].normalization;h[b].multiplicative&&(h[b].value=Math.floor(1e4*(1-h[b].value))/1e4),h[b].normalization&&(h[b].value*=h[b].normalization),h[b].errorCorrection&&(h[b].value+=h[b].errorCorrection),h[b].value>h[b].cap&&(h[b].value=h[b].cap)}for(b in h)h.hasOwnProperty(b)&&(h[b].addStat&&(h[b].value+=h[h[b].addStat].value),h[b].value&&"%"===h[b].unit&&(h[b].value=h[b].value.toFixed(2)));this.postMessage({offensiveStats:a.data.offensiveStats,defensiveStats:a.data.defensiveStats}),this.close()}),e=new Worker(d);e.onmessage=function(c){a.setState({offensiveStats:c.data.offensiveStats,defensiveStats:c.data.defensiveStats},function(){EventSystem.publish("api.collect.offensive-stats",a.state.offensiveStats),EventSystem.publish("api.collect.defensive-stats",a.state.defensiveStats)}),b(),console.info("the web worker had a save journey")},e.onerror=function(a){c(Error("one of the workers had an horrible accident\n"+a.message+" in line "+a.lineno)),this.terminate()},e.postMessage({itemSlots:a.state.itemCollection,offensiveStats:Stats.get("OffensiveStats"),defensiveStats:Stats.get("DefensiveStats"),setPool:Sets.get(),setRing:a.state.setRing,primaryStats:a.state.primaryStats})})},render:function(){return React.DOM.div({style:{visibility:"hidden"}},"Stats Worker")}}),statsCollector=React.createFactory(statsCollectorClass);!function(){var a=document.querySelector(".d3-bg"),b=function(){TweenLite.fromTo(a,3,{y:-100,z:.01},{y:0,z:.01})};b()}();var EventSystem=function(){var a=this;return a.queue={},{publish:function(b,c){var d=a.queue[b];return"undefined"==typeof d?!1:(d.forEach(function(a){a(c)}),!0)},subscribe:function(b,c){"undefined"==typeof a.queue[b]&&(a.queue[b]=[]),a.queue[b].push(c)},unsubscribe:function(b){a.queue[b]=[]}}}(),service=React.createClass({statics:{create:function(a,b,c,d){return new Promise(function(e){var f,g="?locale=en_GB&apikey=jrgy6zyyncxauzt2ub5m4f7zqg25fptm",h=".api.battle.net/d3/profile/",i="https://",j=c.replace(/#/g,"-"),k="/hero/",l="/",m=".api.battle.net/d3/data/";switch(console.log("api-get["+a+"] server["+b+"] profile["+c+"] param["+d+"]"),a){case"heroes-list":f=i+b+h.concat(j,l,g);break;case"hero-data":f=i+b+h.concat(j,k,d,g);break;case"item-data":f=i+b+m.concat(d,g)}e(f)})},get:function(a){return new Promise(function(b,c){var d=new XMLHttpRequest;d.open("GET",a,!0),d.onload=function(){200===d.status?b(d.response):c(Error(d.statusText))},d.send()})}},render:function(){}}),storage=React.createClass({statics:{get:function(a){return localStorage.getItem(a)},save:function(a,b){localStorage.setItem(a,b)}},render:function(){}}),defensiveStatsClass=React.createClass({displayName:"defensive-stats-component",getInitialState:function(){return{defensiveStats:{},generalStats:{}}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.collect.defensive-stats",function(b){a.setState({defensiveStats:b})}),EventSystem.subscribe("api.call.stats",function(b){a.setState({generalStats:b.general})})},render:function(){var a,b=[],c=this.state.defensiveStats;for(var d in c)c.hasOwnProperty(d)&&(a="",c[d].specificName&&this.state.generalStats["class"]?c[d].specificName[this.state.generalStats["class"].value]&&(a+=c[d].specificName[this.state.generalStats["class"].value]):a+=c[d].name,a+=": ",c[d].value&&!c[d].hide&&b.push(React.DOM.div({key:d,className:"bonusstat"},a+c[d].value+c[d].unit)));return React.DOM.div({className:"d3-defensive-stats"},"Defensive Stats",b)}}),defensiveStats=React.createFactory(defensiveStatsClass),edpsClass=React.createClass({displayName:"edps-component",getInitialState:function(){return{primaryStats:{}}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.stats",function(b){a.setState({primaryStats:b.primary})})},render:function(){var a=null;return React.DOM.div({className:"whatever",ref:"pl"},"Primary Stats",a)}}),edps=React.createFactory(edpsClass),generalStatsClass=React.createClass({displayName:"general-stats-component",getInitialState:function(){return{generalStats:{}}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.stats",function(b){a.setState({generalStats:b.general})})},render:function(){var a="",b=[];if(this.state.generalStats){for(var c in this.state.generalStats)if(this.state.generalStats.hasOwnProperty(c)){if(a="",a+=this.state.generalStats[c].value,"class"===c&&(a=this.state.generalStats[c].value.toString().replace(/-/g,"").charAt(0).toUpperCase()+this.state.generalStats[c].value.toString().replace(/-/g,"").slice(1).toLowerCase()),"lastUpdated"===c){var d=new Date(1e3*this.state.generalStats[c].value);a=d.toLocaleDateString()+" - "+d.toLocaleTimeString()}b.push(React.DOM.div({key:c},this.state.generalStats[c].name+": "+a))}return React.DOM.div({className:"d3-general-stats"},"General",b)}}}),generalStats=React.createFactory(generalStatsClass),hellfireClass=React.createClass({displayName:"hellfire-passive-component",getInitialState:function(){return{passives:[],skillIconBaseUrl:"http://media.blizzard.com/d3/icons/skills/64/"}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.stats",function(b){a.setState({generalStats:b.general})}),EventSystem.subscribe("api.call.item.amulet",function(b){a.setState({amuletItem:b})}),EventSystem.subscribe("api.clear.item",function(){a.setState({amuletItem:{}})})},render:function(){var a,b=[],c="",d="",e="",f=this.state.skillIconBaseUrl,g={"demon-hunter":"demonhunter_passive_","witch-doctor":"witchdoctor_passive_",barbarian:"barbarian_passive_",crusader:"crusader_passive_",monk:"monk_passive_",wizard:"wizard_passive_"};if(this.state.amuletItem&&this.state.generalStats&&"Hellfire Amulet"===this.state.amuletItem.name){d=this.state.amuletItem.attributes.passive[0].text.substring(9).replace(" passive.","").replace(/ /g,"").toLowerCase(),e=this.state.amuletItem.attributes.passive[0].text.substring(9).replace(" passive.","");for(a in g)g.hasOwnProperty(a)&&this.state.generalStats["class"].value===a&&(c=f.concat(g[a],d));b.push(React.DOM.div({key:e,className:"hasIcon"},e," (HA)",React.DOM.div({key:e,className:"icon",style:{backgroundImage:"url("+c+".png)"}})))}return React.DOM.div({className:"d3-hellfire-passive"},"Hellfire Passive",b)}}),hellfire=React.createFactory(hellfireClass),offensiveStatsClass=React.createClass({displayName:"offensive-stats-component",getInitialState:function(){return{offhand:{},mainHand:{},offensiveStats:{},generalStats:{}}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.item.offhand",function(b){a.setState({offHand:b})}),EventSystem.subscribe("api.call.item.mainhand",function(b){a.setState({mainHand:b})}),EventSystem.subscribe("api.collect.offensive-stats",function(b){a.setState({offensiveStats:b})}),EventSystem.subscribe("api.call.stats",function(b){a.setState({generalStats:b.general})})},normalizeWeaponAttackSpeed:function(a,b,c){return c?Math.round(100*(b+b*(c+a)))/100:Math.round(100*(b+b*a))/100},render:function(){var a,b,c=[],d=this.state.mainHand,e=this.state.offHand,f=this.state.offensiveStats;for(var g in f)f.hasOwnProperty(g)&&(a="",b=0,f[g].specificName&&this.state.generalStats["class"]?f[g].specificName[this.state.generalStats["class"].value]&&(a+=f[g].specificName[this.state.generalStats["class"].value]):a+=f[g].name,a+=": ",b="attacksPerSecond"===g?this.normalizeWeaponAttackSpeed(f[g].value/f[g].normalization,d&&d.attacksPerSecond?d.attacksPerSecond.max:0,e&&e.attacksPerSecond?.15:0):f[g].value,b&&!f[g].hide&&c.push(React.DOM.div({key:g,className:"bonusstat"},a+b+f[g].unit)));return React.DOM.div({className:"d3-offensive-stats"},"Offensive Stats",c,skillDamage())}}),offensiveStats=React.createFactory(offensiveStatsClass),paragonClass=React.createClass({displayName:"paragon-component",getInitialState:function(){return{mergedStats:{},paragonStats:[],generalStats:{}}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.paragon",function(){a.setState({offensiveStats:Stats.get("OffensiveStats"),defensiveStats:Stats.get("DefensiveStats")},function(){a.setState({mergedStats:Object.assign({},a.state.offensiveStats,a.state.defensiveStats)},function(){a.loadParagonStats(this.state.mergedStats),a.checkParagon(this.state.mergedStats)})})}),EventSystem.subscribe("api.call.stats",function(b){a.setState({generalStats:b.general})})},loadParagonStats:function(a){for(var b in a)a.hasOwnProperty(b)&&a[b].isParagonStat&&storage.get(b)&&(Stats.get("OffensiveStats").hasOwnProperty(b)?Stats.set("OffensiveStats",b.toString(),"paragonModifier","value",parseFloat(storage.get(b))):Stats.set("DefensiveStats",b.toString(),"paragonModifier","value",parseFloat(storage.get(b))),this.forceUpdate())},checkParagon:function(a){for(var b in a)if(a.hasOwnProperty(b)&&a[b].isParagonStat){var c=ReactDOM.findDOMNode(this.refs[b]);a[b].paragonModifier.value===a[b].paragonModifier.max&&c.classList.add("maxed")}},handleParagon:function(a){var b=a.target,c=b.parentNode,d=this.state.mergedStats;for(var e in d)d.hasOwnProperty(e)&&d[e].isParagonStat&&c.classList.contains(e)&&(b.classList.contains("paragon-stat-increment")?d[e].paragonModifier.value<d[e].paragonModifier.max&&(d[e].paragonModifier.value=Math.round(10*(d[e].paragonModifier.value+d[e].paragonModifier.increment))/10):b.classList.contains("paragon-stat-max")&&!b.classList.contains("maxed")?(b.classList.add("maxed"),d[e].paragonModifier.value=d[e].paragonModifier.max):b.classList.contains("paragon-stat-max")&&b.classList.contains("maxed")?(b.classList.remove("maxed"),d[e].paragonModifier.value=0):d[e].paragonModifier.value>0&&(d[e].paragonModifier.value=Math.round(10*(d[e].paragonModifier.value-d[e].paragonModifier.increment))/10),storage.save(e,d[e].paragonModifier.value),Stats.get("OffensiveStats").hasOwnProperty(e)?Stats.set("OffensiveStats",e.toString(),"paragonModifier","value",d[e].paragonModifier.value):Stats.set("DefensiveStats",e.toString(),"paragonModifier","value",d[e].paragonModifier.value));this.forceUpdate()},render:function(){var a=this.state.mergedStats,b=[],c=this,d="";for(var e in a)a.hasOwnProperty(e)&&(d="",a[e].isParagonStat&&(a[e].specificName&&this.state.generalStats["class"]?a[e].specificName[this.state.generalStats["class"].value]&&(d+=a[e].specificName[this.state.generalStats["class"].value]):d+=a[e].name,d+=": ",b.push(React.DOM.div({key:e,className:"paragon-stat "+e},d+a[e].paragonModifier.value+a[e].unit,React.DOM.span({className:"paragon-stat-increment",onClick:c.handleParagon},"+"),React.DOM.span({className:"paragon-stat-decrement",onClick:c.handleParagon},"-"),React.DOM.span({ref:e,className:"paragon-stat-max",onClick:c.handleParagon})))));return React.DOM.div({className:"d3-paragon-container"},"Paragon Points: ",b)}}),paragon=React.createFactory(paragonClass),passivesClass=React.createClass({displayName:"passive-skills-component",getInitialState:function(){return{passives:[],skillIconBaseUrl:"http://media.blizzard.com/d3/icons/skills/64/"}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.skills",function(b){a.setState({passives:b.passives})})},render:function(){var a,b=[],c=[],d=this.state.skillIconBaseUrl;return this.state.passives&&this.state.passives.forEach(function(e){e.skill&&(a=d.concat(e.skill.icon),b.push(React.DOM.div({key:e.skill.name,className:"hasIcon"},e.skill.name,React.DOM.div({key:e.skill.name+"-icon",className:"icon",style:{backgroundImage:"url("+a+".png)"}}))),c.push(React.DOM.div({key:e.skill.name+"-description",className:"description"},React.DOM.div({key:e.skill.name+"-desc-icon",className:"desc-icon",style:{backgroundImage:"url("+a+".png)"}}),e.skill.name,React.DOM.p({dangerouslySetInnerHTML:{__html:e.skill.description.replace(/\n/g,"<br/>")},key:e.skill.name+"-description-text",className:"passive-desc"}))))}),React.DOM.div({className:"d3-passive-skills"},"Passives",b,hellfire())}}),passives=React.createFactory(passivesClass),primaryStatsClass=React.createClass({displayName:"primary-stats-component",getInitialState:function(){return{primaryStats:{},primaryStatsMap:{life:{name:"Life",paragonMod:"maxHealthBonus"},toughness:{name:"Toughness"},dexterity:{name:"Dexterity"},strength:{name:"Strength"},intelligence:{name:"Intelligence"},vitality:{name:"Vitality"},armor:{name:"Armor",paragonMod:"armor"},damageIncrease:{name:"Damage Increase"},healing:{name:"Healing"}}}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.stats",function(b){a.setState({primaryStats:b.primary})}),EventSystem.subscribe("api.collect.defensive-stats",function(b){a.setState({defensiveStats:b
})})},render:function(){var a,b=[],c=this.state.primaryStatsMap;for(var d in c)c.hasOwnProperty(d)&&(a="",this.state.primaryStats[d]>100&&(a+=this.state.defensiveStats&&c[d].paragonMod?c[d].name+": "+Math.round(this.state.primaryStats[d]+this.state.primaryStats[d]*this.state.defensiveStats[c[d].paragonMod].paragonModifier.value/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."):c[d].name+": "+Math.round(this.state.primaryStats[d]).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."),b.push(React.DOM.div({key:d},a))));return React.DOM.div({className:"d3-primary-stats"},"Primary Stats",b)}}),primaryStats=React.createFactory(primaryStatsClass),profileClass=React.createClass({displayName:"realm-component",getInitialState:function(){return{realmList:Realms.get(),apiData:{tag:"",realm:""}}},componentDidMount:function(){var a=[],b=storage.get("realm")?storage.get("realm"):Realms.get()[0],c=storage.get("battleTag");this.setState({apiData:{tag:c,realm:b},realms:a},function(){EventSystem.publish("api.call.heroes",this.state.apiData)}),this.state.realmList.forEach(function(b){a.push(React.DOM.option({key:b,value:b},b.toUpperCase()))})},setRealm:function(a){this.setState({apiData:{tag:this.state.apiData.tag,realm:a.target.value}},function(){EventSystem.publish("api.call.heroes",this.state.apiData)}),storage.save("realm",a.target.value)},setBattleTag:function(a){this.setState({apiData:{tag:a.target.value,realm:this.state.apiData.realm}},function(){EventSystem.publish("api.call.heroes",this.state.apiData)}),storage.save("battleTag",a.target.value)},render:function(){return React.DOM.div({className:"d3-profile-select"},React.DOM.div({className:"d3-realm-select"},"1 - Realm: ",React.DOM.select({className:"d3-realm",ref:"select",value:this.state.apiData.realm,onChange:this.setRealm},this.state.realms)),React.DOM.div({className:"d3-battle-tag-field"},"2 - Enter your BattleTag: ",React.DOM.input({value:this.state.apiData.tag,placeholder:"NAME#1234",onChange:this.setBattleTag})))}}),profile=React.createFactory(profileClass),skillDamageClass=React.createClass({displayName:"skill-damage-component",getInitialState:function(){return{skillDmg:""}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.collect.skill-damage",function(b){a.setState({skillDmg:b})})},render:function(){var a=[];return this.state.skillDmg&&a.push(React.DOM.div({dangerouslySetInnerHTML:{__html:"Skill Damage: "+this.state.skillDmg},key:"Skill Damage Stat",className:"bonusstat"})),React.DOM.span(null,a)}}),skillDamage=React.createFactory(skillDamageClass),skillsClass=React.createClass({displayName:"active-skills-component",getInitialState:function(){return{skills:[],skillIconBaseUrl:"http://media.blizzard.com/d3/icons/skills/64/",runeMap:Runes.get()}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.skills",function(b){a.setState({skills:b.actives})})},render:function(){var a,b,c=[],d=[],e=this.state.runeMap,f=this.state.skillIconBaseUrl;if(this.state.skills)return this.state.skills.forEach(function(g){g.rune?(a=f.concat(g.skill.icon),e.hasOwnProperty(g.rune.type)&&(b={backgroundPosition:"0 "+e[g.rune.type]}),c.push(React.DOM.div({key:g.skill.name+"-icon",className:"hasIcon"},g.skill.name," with ",g.rune.name,React.DOM.div({key:g.skill.name+"-icon-front",className:"icon-front",style:{backgroundImage:"url("+a+".png)"}}),React.DOM.div({key:g.rune.name+"-icon-back",className:"icon-back",style:b}))),d.push(React.DOM.div({key:g.skill.name+"-description",className:"description"},React.DOM.div({key:g.skill.name+"-desc-icon",className:"desc-icon",style:{backgroundImage:"url("+a+".png)"}}),g.skill.name+" with "+g.rune.name,React.DOM.p({dangerouslySetInnerHTML:{__html:g.skill.description.replace(/\n/g,"<br/>")},key:g.skill.name+"-desc",className:"skill-desc"}),React.DOM.p({dangerouslySetInnerHTML:{__html:g.rune.description.replace(/\n/g,"<br/>")},key:g.rune.name+"-desc",className:"rune-desc"})))):g.skill&&(a=f.concat(g.skill.icon),c.push(React.DOM.div({key:g.skill.name+"-icon",className:"hasIcon"},g.skill.name,React.DOM.div({key:g.skill.name+"-icon-front",className:"icon-front no-rune",style:{backgroundImage:"url("+a+".png)"}}))),d.push(React.DOM.div({key:g.skill.name+"-description",className:"description"},React.DOM.div({key:g.skill.name+"-desc-icon",className:"desc-icon",style:{backgroundImage:"url("+a+".png)"}}),g.skill.name,React.DOM.p({dangerouslySetInnerHTML:{__html:g.skill.description.replace(/\n/g,"<br/>")},key:g.skill.name+"-desc",className:"skill-desc"}))))}),React.DOM.div({className:"d3-active-skills"},"Skills",c)}}),skills=React.createFactory(skillsClass),heroClass=React.createClass({displayName:"hero-component",componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.hero",function(b){a.setState({battleTag:b.tag,realm:b.realm,id:b.id},function(){a.loadHeroData(a.state.battleTag,a.state.realm,a.state.id)})})},loadHeroData:function(a,b,c){var d=this,e="hero-data";c&&service.create(e,b,a,c).then(function(a){service.get(a).then(function(a){var b=JSON.parse(a);d.setState({generalStats:{name:{name:"Name",value:b.name},id:{name:"Id",value:b.id},"class":{name:"Class",value:b["class"]},level:{name:"Level",value:b.level},paragonLevel:{name:"Paragon Level",value:b.paragonLevel},lastUpdated:{name:"Last updated on",value:b["last-updated"]}},items:b.items,primaryStats:b.stats,kanai:b.legendaryPowers},function(){EventSystem.publish("api.call.stats",{general:this.state.generalStats,primary:this.state.primaryStats}),EventSystem.publish("api.call.kanai",this.state.kanai),EventSystem.publish("api.call.items",{items:this.state.items,count:this.state.items?Object.keys(this.state.items).length:0}),this.requestItemData()}),b.skills&&d.setState({skills:b.skills.active,passives:b.skills.passive},function(){EventSystem.publish("api.call.skills",{actives:this.state.skills,passives:this.state.passives})})})})},requestItemData:function(){var a,b={leftFinger:"left",rightFinger:"right",offHand:"offhand"};for(var c in this.state.items)this.state.items.hasOwnProperty(c)&&(b.hasOwnProperty(c)?(a={url:this.state.items[c].tooltipParams,param:b[c]},EventSystem.publish("api.call.item-with-props",a)):(a=this.state.items[c].tooltipParams,EventSystem.publish("api.call.item",a)))},render:function(){return React.DOM.div({className:"d3-hero-container"},primaryStats(),generalStats(),offensiveStats(),defensiveStats(),skills(),passives(),kanai())}}),hero=React.createFactory(heroClass),heroesClass=React.createClass({displayName:"heroes-component",getInitialState:function(){return{heroesCollection:[],battleTag:"",realm:"",apiData:{tag:"",realm:"",id:""}}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.heroes",function(b){a.setState({battleTag:b.tag,realm:b.realm},function(){a.loadHeroesList(a.state.battleTag,a.state.realm)})})},loadHeroesList:function(a,b){var c=this,d="heroes-list";a&&service.create(d,b,a).then(function(a){service.get(a).then(function(a){var b=JSON.parse(a);c.setState({heroesData:b})})})},setCharacterSelect:function(a){this.setState({apiData:{tag:this.state.battleTag,realm:this.state.realm,id:a.target.value}},function(){EventSystem.publish("api.call.hero",this.state.apiData)}),EventSystem.publish("api.clear.items"),EventSystem.publish("api.clear.item")},render:function(){var a=[],b=this.state.heroesData;return b?(b.heroes&&(a.push(React.DOM.option({key:"heroes-list",value:"",style:{display:"none"}},"click to select hero")),b.heroes.forEach(function(b){a.push(React.DOM.option({key:"heroes-list"+b.id,value:b.id},"["+b["class"]+"] "+b.name+" (id: "+b.id+")"))})),b.code&&a.push(React.DOM.option({key:"heroes-list-invalid",value:"",style:{display:"none"}},"invalid battleTag"))):this.state.battleTag&&""!==this.state.battleTag?a.push(React.DOM.option({key:"heroes-list-loading",value:"",style:{display:"none"}},"loading herolist...")):a.push(React.DOM.option({key:"heroes-list-empty",value:"",style:{display:"none"}},"enter your battleTag in the field below")),React.DOM.div({className:"d3-character-select"},"3 - Click below to select your hero: ",React.DOM.select({className:"d3-chars",value:this.state.apiData.id,onChange:this.setCharacterSelect},a))}}),heroes=React.createFactory(heroesClass),itemsClass=React.createClass({displayName:"items-component",getInitialState:function(){return{itemIconBase:"http://media.blizzard.com/d3/icons/items/large/",itemsLoaded:0,itemCollection:[],items:{},setRing:!1}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.heroes",function(b){a.setState({battleTag:b.tag,realm:b.realm})}),EventSystem.subscribe("api.clear.items",function(){a.setState({itemCollection:[],itemsLoaded:0})}),EventSystem.subscribe("api.collect.offensive-stats",function(b){a.setState({offensiveStats:b})}),EventSystem.subscribe("api.call.items",function(b){a.setState({items:b.items},function(){for(var a in this.state.items)this.state.items.hasOwnProperty(a)&&"Ring of Royal Grandeur"===this.state.items[a].name&&this.setState({setRing:!0},function(){EventSystem.publish("api.call.item.set-ring",this.state.setRing)})})}),EventSystem.subscribe("api.call.item",function(b){a.loadItemData(b)}),EventSystem.subscribe("api.call.item-with-props",function(b){a.loadItemDataWithProps(b.url,b.param)})},loadItemData:function(a){var b=this,c="item-data";service.create(c,this.state.realm,this.state.battleTag,a).then(function(a){service.get(a).then(function(a){var c=JSON.parse(a);return Head.test(c.type.id)?(b.setState({helmItem:c},function(){b.state.itemCollection.push(b.state.helmItem)}),void b.publishItemCollection()):Shoulders.test(c.type.id)?(b.setState({shouldersItem:c},function(){b.state.itemCollection.push(b.state.shouldersItem)}),void b.publishItemCollection()):Bracers.test(c.type.id)?(b.setState({bracersItem:c},function(){b.state.itemCollection.push(b.state.bracersItem)}),void b.publishItemCollection()):Chest.test(c.type.id)?(b.setState({chestItem:c},function(){b.state.itemCollection.push(b.state.chestItem)}),void b.publishItemCollection()):Legs.test(c.type.id)?(b.setState({legsItem:c},function(){b.state.itemCollection.push(b.state.legsItem)}),void b.publishItemCollection()):Feet.test(c.type.id)?(b.setState({bootsItem:c},function(){b.state.itemCollection.push(b.state.bootsItem)}),void b.publishItemCollection()):MainHand.test(c.type.id)?(b.setState({mainItem:c},function(){EventSystem.publish("api.call.item.mainhand",b.state.mainItem),b.state.itemCollection.push(b.state.mainItem)}),void b.publishItemCollection()):Hands.test(c.type.id)?(b.setState({glovesItem:c},function(){b.state.itemCollection.push(b.state.glovesItem)}),void b.publishItemCollection()):Belt.test(c.type.id)?(b.setState({beltItem:c},function(){b.state.itemCollection.push(b.state.beltItem)}),void b.publishItemCollection()):Neck.test(c.type.id)?(b.setState({amuletItem:c},function(){EventSystem.publish("api.call.item.amulet",b.state.amuletItem),b.state.itemCollection.push(b.state.amuletItem)}),void b.publishItemCollection()):void console.warn("item category "+c.type.id+" does not exist")})})},publishItemCollection:function(){EventSystem.publish("api.call.item.collection",this.state.itemCollection),this.setState({itemsLoaded:this.state.itemsLoaded+1},function(){EventSystem.publish("api.try.collect",this.state.itemsLoaded)})},loadItemDataWithProps:function(a,b){var c=this,d="item-data";service.create(d,this.state.realm,this.state.battleTag,a).then(function(a){service.get(a).then(function(a){var d=JSON.parse(a);return Ring.test(d.type.id)?"left"===b?(c.setState({ringItemLeft:d},function(){c.state.itemCollection.push(c.state.ringItemLeft)}),void c.publishItemCollection()):(c.setState({ringItemRight:d},function(){c.state.itemCollection.push(c.state.ringItemRight)}),void c.publishItemCollection()):OffHand.test(d.type.id)?(c.setState({offItem:d},function(){c.state.itemCollection.push(c.state.offItem),EventSystem.publish("api.call.item.offhand",c.state.offItem)}),void c.publishItemCollection()):void console.warn("item category "+d.type.id+" does not exist")})})},render:function(){var a,b,c,d,e,f,g,h,i,j,k=[],l=[],m=Sets.get(),n=[],o=[],p=[],q=[],r=[],s=[],t=[],u=[],v=[],w=[],x=[],y=WeaponElementsMin.get(),z=WeaponElementsDelta.get(),A=WeaponDamagePercentAll.get(),B=WeaponDamageBonusMinPhysical.get(),C=[],D=ItemQuality.get(),E=0,F=0,G={head:{itemData:this.state.helmItem,view:l},neck:{itemData:this.state.amuletItem,view:x},torso:{itemData:this.state.chestItem,view:n},feet:{itemData:this.state.bootsItem,view:p},hands:{itemData:this.state.glovesItem,view:o},shoulders:{itemData:this.state.shouldersItem,view:k},legs:{itemData:this.state.legsItem,view:t},bracers:{itemData:this.state.bracersItem,view:s},mainHand:{itemData:this.state.mainItem,view:u},offHand:{itemData:this.state.offItem,view:v},leftFinger:{itemData:this.state.ringItemLeft,view:q},rightFinger:{itemData:this.state.ringItemRight,view:r},waist:{itemData:this.state.beltItem,view:w}};if(console.log(G),this.state.items){for(c=0;c<m.length;c++)m[c][1]=0;for(var H in G)if(G.hasOwnProperty(H))for(c=0;c<m.length;c++)G[H].itemData&&G[H].itemData.set&&G[H].itemData.set.name===m[c][0]&&m[c][1]++;for(var I in G)if(G.hasOwnProperty(I))if(this.state.items[I]&&G[I].itemData){if(j=this.state.itemIconBase.concat(this.state.items[I].icon,".png"),D.hasOwnProperty(this.state.items[I].displayColor)&&(f=D[this.state.items[I].displayColor]),G[I].itemData.attributesRaw)if(h=G[I].itemData.attributesRaw.Ancient_Rank&&1===G[I].itemData.attributesRaw.Ancient_Rank.min?"ancient":"","mainHand"===I||"offHand"===I){if(G[I].itemData.type){var J="";J=G[I].itemData.type.twoHanded?"(2h)":"(1h)",G[I].view.push(React.DOM.li({key:"item-name",className:f+" name"},h+" "+G[I].itemData.name+" "+J))}if(G[I].itemData.dps&&G[I].view.push(React.DOM.li({key:"dps",className:"dps"},G[I].itemData.dps.max.toString().substring(0,7)+" DPS")),G[I].itemData.minDamage&&G[I].itemData.maxDamage&&G[I].itemData.attributesRaw)for(a=0;a<y.length;a++)G[I].itemData.attributesRaw[y[a]]&&(G[I].itemData.attributesRaw[A]&&!G[I].itemData.attributesRaw[B]?(d=G[I].itemData.minDamage.max+G[I].itemData.attributesRaw[y[a]].max+G[I].itemData.attributesRaw[y[a]].max*G[I].itemData.attributesRaw[A].max,e=G[I].itemData.maxDamage.max+G[I].itemData.attributesRaw[y[a]].max+G[I].itemData.attributesRaw[z[a]].max+(G[I].itemData.attributesRaw[y[a]].max+G[I].itemData.attributesRaw[z[a]].max)*G[I].itemData.attributesRaw[A].max,G[I].view.push(React.DOM.li({key:G[I].itemData.name+"raw-damage",className:"raw-damage"},Math.round(d)+" - "+Math.round(e)+" Damage"))):G[I].itemData.attributesRaw[A]||G[I].itemData.attributesRaw[B]?(d=G[I].itemData.minDamage.max,e=G[I].itemData.maxDamage.max,G[I].view.push(React.DOM.li({key:G[I].itemData.name+"raw-damage",className:"raw-damage"},Math.round(d)+" - "+Math.round(e)+" Damage"))):(d=G[I].itemData.minDamage.max+G[I].itemData.attributesRaw[y[a]].max,e=G[I].itemData.maxDamage.max+G[I].itemData.attributesRaw[y[a]].max+G[I].itemData.attributesRaw[z[a]].max,G[I].view.push(React.DOM.li({key:G[I].itemData.name+"raw-damage",className:"raw-damage"},Math.round(d)+" - "+Math.round(e)+" Damage"))))}else G[I].view.push(React.DOM.li({key:"item-name",className:f+" name"},h+" "+G[I].itemData.name));if(G[I].itemData.attributes&&(G[I].itemData.attributes.primary&&G[I].itemData.attributes.primary.forEach(function(a,b){G[I].view.push(React.DOM.li({key:"primary-stat-"+b,className:"primary"},a.text))}),G[I].itemData.attributes.secondary&&G[I].itemData.attributes.secondary.forEach(function(a,b){G[I].view.push(React.DOM.li({key:"secondary-stat-"+b,className:"secondary"},a.text))}),G[I].itemData.attributes.passive&&G[I].itemData.attributes.passive.forEach(function(a,b){G[I].view.push(React.DOM.li({key:"passive-stat-"+b,className:"passive"},a.text))})),G[I].itemData.set&&G[I].itemData.set.ranks)for(g=0,a=0;a<G[I].itemData.set.ranks.length;a++)for(b=1;6>=b;b++){for(c=0;c<m.length;c++)G[I].itemData.set.name===m[c][0]&&this.state.setRing?g=m[c][1]>=2?m[c][1]++:m[c][1]:G[I].itemData.set.name!==m[c][0]||this.state.setRing||(g=m[c][1]);G[I].itemData.set.ranks[a].required===b&&G[I].itemData.set.ranks[a].required<=g?G[I].itemData.set.ranks[a].attributes.primary.forEach(function(a){G[I].view.push(React.DOM.li({key:"set-"+G[I].itemData.set.name+"-primary-bonus-"+a.text,className:"set-bonus-"+b},a.text))}):G[I].itemData.set.ranks[a].required===b&&G[I].itemData.set.ranks[a].attributes.primary.forEach(function(a){G[I].view.push(React.DOM.li({key:"set-"+G[I].itemData.set.name+"-primary-bonus-"+a.text+"-inactive",className:"set-bonus-"+b+" inactive"},a.text))}),G[I].itemData.set.ranks[a].required===b&&G[I].itemData.set.ranks[a].required<=g?G[I].itemData.set.ranks[a].attributes.secondary.forEach(function(a){G[I].view.push(React.DOM.li({key:"set-"+G[I].itemData.set.name+"-secondary bonus-"+a.text,className:"set-bonus-"+b},a.text))}):G[I].itemData.set.ranks[a].required===b&&G[I].itemData.set.ranks[a].attributes.secondary.forEach(function(a){G[I].view.push(React.DOM.li({key:"set-"+G[I].itemData.set.name+"-secondary bonus-"+a.text+"-inactive",className:"set-bonus-"+b+" inactive"},a.text))}),G[I].itemData.set.ranks[a].required===b&&G[I].itemData.set.ranks[a].required<=g?G[I].itemData.set.ranks[a].attributes.passive.forEach(function(a){G[I].view.push(React.DOM.li({key:"set-"+G[I].itemData.set.name+"-passive bonus-"+a.text,className:"set-bonus-"+b},a.text))}):G[I].itemData.set.ranks[a].required===b&&G[I].itemData.set.ranks[a].attributes.passive.forEach(function(a){G[I].view.push(React.DOM.li({key:"set-"+G[I].itemData.set.name+"-passive bonus-"+a.text+"-inactive",className:"set-bonus-"+b+" inactive"},a.text))})}if(G[I].itemData.attributesRaw&&G[I].itemData.attributesRaw.Sockets)for(a=0;a<G[I].itemData.attributesRaw.Sockets.min;a++)G[I].itemData.gems[a]?(i=this.state.itemIconBase.concat(G[I].itemData.gems[0].item.icon,".png"),G[I].itemData.gems[a].attributesRaw.Jewel_Rank?G[I].view.push(React.DOM.li({key:"socket-"+a,className:"socket",style:{backgroundImage:"url("+i+")"}},React.DOM.span({key:"socket-gem-level"+a,className:"gem-level"},G[I].itemData.gems[a].attributesRaw.Jewel_Rank.min))):G[I].view.push(React.DOM.li({key:"socket-"+a,className:"socket",style:{backgroundImage:"url("+i+")"}})),G[I].itemData.gems[a].attributes.primary[0]&&G[I].view.push(React.DOM.li({key:"gem-passive-primary"+a,className:"gem-passive"},G[I].itemData.gems[a].attributes.primary[0].text)),G[I].itemData.gems[a].attributes.secondary[0]&&G[I].view.push(React.DOM.li({key:"gem-passive-secondary"+a,className:"gem-passive"},G[I].itemData.gems[a].attributes.secondary[0].text)),G[I].itemData.gems[a].attributes.passive[0]&&G[I].view.push(React.DOM.li({key:"gem-passive-secondary"+a,className:"gem-passive"},G[I].itemData.gems[a].attributes.passive[0].text))):G[I].view.push(React.DOM.li({key:"socket-"+a,className:"socket"}));console.log(this.state.offensiveStats);for(var K in this.state.offensiveStats)G[I].itemData.attributesRaw[this.state.offensiveStats[K].key]&&this.state.offensiveStats[K].maxMap&&this.state.offensiveStats[K].maxMap[I]&&(E+=Math.round(100*G[I].itemData.attributesRaw[this.state.offensiveStats[K].key].min)/100/this.state.offensiveStats[K].maxMap[I]*100,F++);G[I].view.push(React.DOM.li({key:"item-grade",className:"item-grade"},E/F)),C.push(React.DOM.div({key:I.toString(),className:"item "+h+" "+f+" "+I,onClick:this.handleItemClick,style:{backgroundImage:"url("+j+")"}},React.DOM.div({className:"desc"},React.DOM.ul({className:"stats"},G[I].view))))}else C.push(React.DOM.div({key:I.toString(),className:"empty item "+I}));return React.DOM.div({className:"d3-items-container"},C)}}}),items=React.createFactory(itemsClass),kanaiClass=React.createClass({displayName:"kanai-component",getInitialState:function(){return{kanai:[],itemIconBaseUrl:"http://media.blizzard.com/d3/icons/items/large/",cubeItems:{}}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.kanai",function(b){a.setState({kanai:b},function(){b.forEach(function(b,c){b&&a.loadKanaiItems(b.tooltipParams,c)})})}),EventSystem.subscribe("api.call.heroes",function(b){a.setState({battleTag:b.tag,realm:b.realm})})},loadKanaiItems:function(a,b){var c=this,d="item-data";service.create(d,this.state.realm,this.state.battleTag,a).then(function(a){service.get(a).then(function(a){c.state.cubeItems[b]=JSON.parse(a)})})},render:function(){var a,b=[],c=[],d=this.state.itemIconBaseUrl,e=this;return this.state.kanai&&this.state.cubeItems&&this.state.kanai.forEach(function(f){if(f){a=d.concat(f.icon),b.push(React.DOM.div({key:f.name,className:"hasIcon"},f.name,React.DOM.div({key:f.name+"-icon",className:"icon",style:{backgroundImage:"url("+a+".png)"}})));for(var g in e.state.cubeItems)e.state.cubeItems.hasOwnProperty(g)&&g&&e.state.cubeItems[g].name===f.name&&c.push(React.DOM.div({key:e.state.cubeItems[g].name+"-description",className:"description"},React.DOM.div({key:e.state.cubeItems[g].name+"-desc-icon",className:"desc-icon",style:{backgroundImage:"url("+a+".png)"}}),e.state.cubeItems[g].name,React.DOM.p({dangerouslySetInnerHTML:{__html:e.state.cubeItems[g].attributes.passive[0].text.replace(/\n/g,"<br/>")},key:g.name+"-description-text",className:"passive-desc"})))}}),React.DOM.div({className:"d3-cube-powers"},"Kanai",b)}}),kanai=React.createFactory(kanaiClass),d3Profile=React.createClass({displayName:"d3Profile",getInitialState:function(){return{generalStats:null}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.stats",function(b){a.setState({generalStats:b.general})}),Stats.init("OffensiveStats"),Stats.init("DefensiveStats"),EventSystem.publish("api.call.paragon")},render:function(){var a;return a=this.state.generalStats?{backgroundImage:"url(assets/images/"+this.state.generalStats["class"].value+".png)"}:{backgroundImage:"none"},React.DOM.div({className:"d3-container"},React.DOM.div({className:"d3-char-bg",ref:"charbg",style:a}),items(),profile(),heroes(),hero(),paragon(),skillDamageCollector(),statsCollector())}});ReactDOM.render(React.createElement(d3Profile,{}),document.querySelector(".d3-profile"));