!function(){var a=document.querySelector(".d3-bg"),b=function(){TweenLite.fromTo(a,3,{y:-100,z:.01},{y:0,z:.01})};b()}();var EventSystem=function(){var a=this;return a.queue={},{publish:function(b,c){var d=a.queue[b];return"undefined"==typeof d?!1:(d.forEach(function(a){a(c)}),!0)},subscribe:function(b,c){"undefined"==typeof a.queue[b]&&(a.queue[b]=[]),a.queue[b].push(c)},unsubscribe:function(b){a.queue[b]=[]}}}(),service=React.createClass({statics:{create:function(a,b,c,d){return new Promise(function(e){var f,g="?locale=en_GB&apikey=jrgy6zyyncxauzt2ub5m4f7zqg25fptm",h=".api.battle.net/d3/profile/",i="https://",j=c.replace(/#/g,"-"),k="/hero/",l="/",m=".api.battle.net/d3/data/";switch(a){case"heroes-list":f=i+b+h.concat(j,l,g);break;case"hero-data":f=i+b+h.concat(j,k,d,g);break;case"item-data":f=i+b+m.concat(d,g)}e(f)})},get:function(a){return new Promise(function(b,c){var d=new XMLHttpRequest;d.open("GET",a,!0),d.onload=function(){200===d.status?b(d.response):c(Error(d.statusText))},d.send()})}},render:function(){}}),storage=React.createClass({statics:{get:function(a){return localStorage.getItem(a)},save:function(a,b){localStorage.setItem(a,b)}},render:function(){}}),paragonClass=React.createClass({displayName:"paragon-component",getInitialState:function(){return{mergedStats:{},paragonStats:[]}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.stats",function(b){a.setState({mergedStats:Object.assign({},b.offensiveStats,b.defensiveStats)},function(){a.loadParagonStats(a.state.mergedStats)})})},loadParagonStats:function(a){for(var b in a)a.hasOwnProperty(b)&&a[b].isParagonStat&&(storage.get(b)?a[b].paragonModifier.value=parseInt(storage.get(b)):a[b].paragonModifier.value=0)},checkParagon:function(a){for(var b in a)if(a.hasOwnProperty(b)&&a[b].isParagonStat){var c=ReactDOM.findDOMNode(this.refs[b]);a[b].paragonModifier.value===a[b].paragonModifier.max&&c.classList.add("maxed")}},handleParagonStatsClick:function(){this.checkParagon(this.state.mergedStats)},handleParagon:function(a){var b=a.target,c=b.parentNode,d=this.state.mergedStats;for(var e in d)d.hasOwnProperty(e)&&d[e].isParagonStat&&c.classList.contains(e)&&(b.classList.contains("paragon-stat-increment")?d[e].paragonModifier.value<d[e].paragonModifier.max&&(d[e].paragonModifier.value=Math.round(10*(d[e].paragonModifier.value+d[e].paragonModifier.increment))/10):b.classList.contains("paragon-stat-max")&&!b.classList.contains("maxed")?(b.classList.add("maxed"),d[e].paragonModifier.value=d[e].paragonModifier.max):b.classList.contains("paragon-stat-max")&&b.classList.contains("maxed")?(b.classList.remove("maxed"),d[e].paragonModifier.value=0):d[e].paragonModifier.value>0&&(d[e].paragonModifier.value=Math.round(10*(d[e].paragonModifier.value-d[e].paragonModifier.increment))/10),storage.save(e,d[e].paragonModifier.value));this.forceUpdate()},render:function(){var a=this.state.mergedStats,b=[],c=this;for(var d in a)a.hasOwnProperty(d)&&a[d].isParagonStat&&b.push(React.DOM.div({key:d,className:"paragon-stat "+d},a[d].name+" "+Math.round(10*a[d].paragonModifier.value)/10+a[d].unit,React.DOM.span({className:"paragon-stat-increment",onClick:c.handleParagon},"+"),React.DOM.span({className:"paragon-stat-decrement",onClick:c.handleParagon},"-"),React.DOM.span({ref:d,className:"paragon-stat-max",onClick:c.handleParagon})));return React.DOM.div({className:"panel-left-additional ",ref:"pla"},"Paragon Points: ",b,React.DOM.a({className:"button",onClick:this.handleParagonStatsClick,title:"click to close"},React.DOM.span({className:"button-text"},"close")))}}),paragon=React.createFactory(paragonClass),realmsClass=React.createClass({displayName:"realm-component",getInitialState:function(){return{realmList:["eu","us","kr"],apiData:{tag:"",realm:""}}},componentDidMount:function(){var a=[],b=storage.get("realm")?storage.get("realm"):"eu",c=storage.get("battleTag");this.setState({apiData:{tag:c,realm:b}},function(){EventSystem.publish("api.call.heroes",this.state.apiData)}),this.state.realmList.forEach(function(b){a.push(React.DOM.option({key:b,value:b},b.toUpperCase()))}),this.setState({realms:a})},setRealm:function(a){this.setState({setRing:!1,toggle:"hidden",paragonToggle:"hidden",skillDescToggle:"hidden",passiveDescToggle:"hidden"}),this.setState({apiData:{tag:this.state.apiData.tag,realm:a.target.value}},function(){EventSystem.publish("api.call.heroes",this.state.apiData)}),storage.save("realm",a.target.value)},setBattleTag:function(a){this.setState({setRing:!1,toggle:"hidden",paragonToggle:"hidden",skillDescToggle:"hidden",passiveDescToggle:"hidden"}),this.setState({apiData:{tag:a.target.value,realm:this.state.apiData.realm}},function(){EventSystem.publish("api.call.heroes",this.state.apiData)}),storage.save("battleTag",a.target.value)},render:function(){return React.DOM.div({className:"useless-wrapper"},React.DOM.div({className:"d3-realm-wrapper"},"1 - Realm: ",React.DOM.select({className:"d3-realm",ref:"select",value:this.state.apiData.realm,onChange:this.setRealm},this.state.realms)),React.DOM.div({className:"d3-api-url"},"2 - Enter your BattleTag: ",React.DOM.input({value:this.state.apiData.tag,placeholder:"NAME#1234",onChange:this.setBattleTag})))}}),realms=React.createFactory(realmsClass),heroClass=React.createClass({componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.hero",function(b){a.setState({battleTag:b.tag,realm:b.realm,id:b.id},function(){a.loadHeroData(a.state.battleTag,a.state.realm,a.state.id)})})},loadHeroData:function(a,b,c){var d=this,e="hero-data";c&&service.create(e,a,b,c).then(function(a){service.get(a).then(function(a){var b=JSON.parse(a);d.state.debugMode&&console.log(b),d.setState({generalStats:{name:{name:"Name",value:b.name},id:{name:"Id",value:b.id},"class":{name:"Class",value:b["class"]},level:{name:"Level",value:b.level},paragonLevel:{name:"Paragon Level",value:b.paragonLevel},lastUpdated:{name:"Last updated on",value:b["last-updated"]}},items:b.items,stats:b.stats,kanai:b.legendaryPowers}),b.skills&&d.setState({skills:b.skills.active,passives:b.skills.passive})}).then(function(){d.getItemData()})})},render:function(){return console.log(1)}}),hero=React.createFactory(heroClass),heroesClass=React.createClass({displayName:"heroes-component",getInitialState:function(){return{heroesCollection:[],battleTag:"",realm:"",apiData:{tag:"",realm:"",id:""}}},componentDidMount:function(){var a=this;EventSystem.subscribe("api.call.heroes",function(b){a.setState({battleTag:b.tag,realm:b.realm},function(){a.loadHeroesList(a.state.battleTag,a.state.realm)})})},loadHeroesList:function(a,b,c){var d=this,e="heroes-list";a&&service.create(e,b,a).then(function(a){service.get(a).then(function(a){var b=JSON.parse(a);c&&console.log(b),d.setState({heroesData:b})})})},setCharacterSelect:function(a){this.setState({apiData:{battleTag:this.state.battleTag,realm:this.state.realm,heroId:a.target.value}},function(){EventSystem.publish("api.call.hero",this.state.apiData)}),this.setState({stats:{offensiveStats:stats.init("OffensiveStats"),defensiveStats:stats.init("DefensiveStats"),skillDamage:stats.init("SkillDamageStat")}},function(){EventSystem.publish("api.call.stats",this.state.stats)})},render:function(){var a=[],b=this.state.heroesData;return b?b.heroes?(a.push(React.DOM.option({key:"heroes-list",value:"",style:{display:"none"}},"click to select hero")),b.heroes.forEach(function(b){a.push(React.DOM.option({key:"heroes-list"+b.id,value:b.id},"["+b["class"]+"] "+b.name+" (id: "+b.id+")"))})):b.code&&a.push(React.DOM.option({key:"heroes-list-invalid",value:"",style:{display:"none"}},"invalid battleTag")):this.state.battleTag&&""!==this.state.battleTag?a.push(React.DOM.option({key:"heroes-list-loading",value:"",style:{display:"none"}},"loading herolist...")):a.push(React.DOM.option({key:"heroes-list-empty",value:"",style:{display:"none"}},"enter your battleTag in the field below")),React.DOM.div({className:"d3-char-wrapper"},"3 - Click below to select your hero: ",React.DOM.select({className:"d3-chars",ref:"select",value:this.state.apiData.id,onChange:this.setCharacterSelect},a))}}),heroes=React.createFactory(heroesClass),itemWithPropsClass=React.createClass({loadItemDataWithProps:function(a,b){var c=this,d="item-data";service.create(d,this.state.realm,this.state.battleTag,a).then(function(a){service.get(a).then(function(a){var d=JSON.parse(a);switch(c.state.debugMode&&console.log(d),d.type.id){case"Ring":b?c.setState({ringItemLeft:d}):c.setState({ringItemRight:d});break;case"Quiver":case"CrusaderShield":case"Shield":case"Orb":case"Source":case"Mojo":c.setState({offItem:d});break;case"Dagger":case"Sword":case"Mace":case"Axe":case"FistWeapon":case"MightyWeapon1H":case"Flail1H":case"HandXbow":case"Bow":case"Wand":case"Staff":c.setState({offItem:d})}})})},render:function(){}}),itemWithProps=React.createFactory(itemWithPropsClass),itemClass=React.createClass({loadItemData:function(a){var b=this,c="item-data";service.create(c,this.state.realm,this.state.battleTag,a).then(function(a){service.get(a).then(function(a){var c=JSON.parse(a);switch(b.state.debugMode&&console.log(c),c.type.id){case"GenericHelm":case"Helm":case"Helm_Barbarian":case"Helm_DemonHunter":case"Helm_WitchDoctor":case"Helm_Crusader":case"Helm_Wizard":case"Helm_Monk":case"VoodooMask":b.setState({helmItem:c});break;case"GenericShoulders":case"Shoulders":case"Shoulders_Barbarian":case"Shoulders_DemonHunter":case"Shoulders_WitchDoctor":case"Shoulders_Crusader":case"Shoulders_Wizard":case"Shoulders_Monk":b.setState({shouldersItem:c});break;case"Bracers":b.setState({bracersItem:c});break;case"ChestArmor":case"GenericChestArmor":case"ChestArmor_Barbarian":case"ChestArmor_DemonHunter":case"ChestArmor_WitchDoctor":case"ChestArmor_Crusader":case"ChestArmor_Wizard":case"ChestArmor_Monk":case"Cloak":b.setState({chestItem:c});break;case"GenericLegs":case"Legs":case"Legs_Barbarian":case"Legs_DemonHunter":case"Legs_WitchDoctor":case"Legs_Crusader":case"Legs_Wizard":case"Legs_Monk":b.setState({legsItem:c});break;case"GenericBoots":case"Boots":case"Boots_Barbarian":case"Boots_DemonHunter":case"Boots_WitchDoctor":case"Boots_Crusader":case"Boots_Wizard":case"Boots_Monk":b.setState({bootsItem:c});break;case"Polearm":case"Crossbow":case"Dagger":case"Sword":case"Sword2H":case"Mace":case"Axe":case"FistWeapon":case"CeremonialKnife":case"MightyWeapon1H":case"Flail2H":case"Flail1H":case"HandXbow":case"Bow2H":case"Bow":case"Wand":case"Staff":case"Staff2H":case"CeremonialDagger":case"MightyWeapon2H":case"Mace2H":b.setState({mainItem:c});break;case"GenericGloves":case"Gloves":case"Gloves_Barbarian":case"Gloves_DemonHunter":case"Gloves_WitchDoctor":case"Gloves_Crusader":case"Gloves_Wizard":case"Gloves_Monk":b.setState({glovesItem:c});break;case"Belt":case"GenericBelt":case"Belt_Barbarian":b.setState({beltItem:c});break;case"Amulet":b.setState({amuletItem:c})}})})},render:function(){}}),item=React.createFactory(itemClass),kanaiClass=React.createClass({loadKanaiItems:function(a,b){var c=this,d="item-data";this.state.cubeItems[b]||service.create(d,this.state.realm,this.state.battleTag,a).then(function(a){service.get(a).then(function(a){var d=JSON.parse(a);c.state.debugMode&&console.log(d),c.state.cubeItems[b]=d})})},render:function(){}}),kanai=React.createFactory(kanaiClass),stats=React.createClass({statics:{init:function(a){var b=["OffensiveStats","DefensiveStats","SkillDamageStat"],c=this,d=null;return b.forEach(function(b){if(a===b){var e=b.toString(),f="init",g=f.concat(e);d=c[g]()}}),d},initOffensiveStats:function(){return{critChance:{name:"Critical Hit Chance",paragonModifier:{increment:.1,max:5,value:0},unit:"%",key:"critChance",value:0,hasMods:!0,fromApi:!0,normalization:100,isParagonStat:!0},critDamage:{name:"Critical Hit Damage",paragonModifier:{increment:1,max:50,value:0},unit:"%",errorCorrection:-100,key:"critDamage",value:0,hasMods:!0,fromApi:!0,normalization:100,isParagonStat:!0},primaryResource:{name:"Primary Resource",paragonModifier:{increment:.5,max:25,value:0},unit:"",key:"primaryResource",value:0,hasMods:!0,fromApi:!0,normalization:1,isParagonStat:!0},cooldownReduction:{name:"Cooldown Reduction",paragonModifier:{increment:.2,max:10,value:0},unit:"%",key:"Power_Cooldown_Reduction_Percent_All",multiplicative:!0,value:0,hasMods:!0,fromApi:!1,normalization:100,isParagonStat:!0},ResCostRed:{name:"Resource Cost Reduction",paragonModifier:{increment:.2,max:10,value:0},unit:"%",key:"Resource_Cost_Reduction_Percent_All",multiplicative:!0,value:0,hasMods:!0,fromApi:!1,normalization:100,isParagonStat:!0},eliteDmgBonus:{name:"Elite Damage Bonus",unit:"%",value:0,key:"Damage_Percent_Bonus_Vs_Elites",hasMods:!1,fromApi:!1,normalization:100},areaDamage:{name:"Area Damage Bonus",paragonModifier:{increment:1,max:50,value:0},unit:"%",key:"Splash_Damage_Effect_Percent",value:0,hasMods:!0,fromApi:!1,normalization:100,isParagonStat:!0},attacksPerSecond:{name:"Attacks Per Second",paragonModifier:{increment:.2,max:10,value:0},unit:"",key:"Attacks_Per_Second_Percent",value:0,hasMods:!0,fromApi:!1,normalization:1,isParagonStat:!0},fireDmgBonus:{name:"Fire Damage Bonus",type:"offensive",unit:"%",key:"Damage_Dealt_Percent_Bonus#Fire",value:0,hasMods:!1,fromApi:!1,normalization:100},physicalDmgBonus:{name:"Physical Damage Bonus",type:"offensive",unit:"%",key:"Damage_Dealt_Percent_Bonus#Physical",value:0,hasMods:!1,fromApi:!1,normalization:100},coldDmgBonus:{name:"Cold Damage Bonus",type:"offensive",unit:"%",key:"Damage_Dealt_Percent_Bonus#Cold",value:0,hasMods:!1,fromApi:!1,normalization:100},poisonDmgBonus:{name:"Poison Damage Bonus",type:"offensive",unit:"%",key:"Damage_Dealt_Percent_Bonus#Poison",value:0,hasMods:!1,fromApi:!1,normalization:100},lightningDmgBonus:{name:"Lightning Damage Bonus",type:"offensive",unit:"%",key:"Damage_Dealt_Percent_Bonus#Lightning",value:0,hasMods:!1,fromApi:!1,normalization:100}}},initDefensiveStats:function(){return{goldPickUpRange:{name:"Gold Pick-up Range",unit:" yards",key:"Gold_PickUp_Radius",value:0,hasMods:!1,fromApi:!1,normalization:1},meleeDamageReduction:{name:"Melee Damage Reduction",unit:"%",key:"Damage_Percent_Reduction_From_Melee",multiplicative:!0,value:0,hasMods:!1,fromApi:!1,normalization:100},rangedDamageReduction:{name:"Ranged Damage Reduction",unit:"%",key:"Damage_Percent_Reduction_From_Ranged",multiplicative:!0,value:0,hasMods:!1,fromApi:!1,normalization:100},eliteDamageReduction:{name:"Elite Damage Reduction",unit:"%",key:"Damage_Percent_Reduction_From_Elites",value:0,hasMods:!1,fromApi:!1,normalization:100},maxHealthBonus:{name:"Max Health Bonus",paragonModifier:{increment:.5,max:25,value:0},unit:"%",key:"Hitpoints_Max_Percent_Bonus_Item",value:0,hasMods:!0,fromApi:!1,normalization:100,isParagonStat:!0},secondaryResource:{name:"Secondary Resource",unit:"",key:"secondaryResource",value:0,hasMods:!1,fromApi:!0,normalization:1},fireResist:{name:"Fire Resist",paragonModifier:{increment:5,max:250,value:0},unit:"",key:"fireResist",value:0,hasMods:!0,fromApi:!0,normalization:1},coldResist:{name:"Cold Resist",paragonModifier:{increment:5,max:250,value:0},unit:"",key:"coldResist",value:0,hasMods:!0,fromApi:!0,normalization:1},lightningResist:{name:"Lightning Resist",paragonModifier:{increment:5,max:250,value:0},unit:"",key:"lightningResist",value:0,hasMods:!0,fromApi:!0,normalization:1},physicalResist:{name:"Physical Resist",paragonModifier:{increment:5,max:250,value:0},unit:"",key:"physicalResist",value:0,hasMods:!0,fromApi:!0,normalization:1},poisonResist:{name:"Poison Resist",paragonModifier:{increment:5,max:250,value:0},unit:"",key:"poisonResist",value:0,hasMods:!0,fromApi:!0,normalization:1},arcaneResist:{name:"Arcane Resist",paragonModifier:{increment:5,max:250,value:0},unit:"",key:"arcaneResist",value:0,hasMods:!0,fromApi:!0,normalization:1},lifeOnHit:{name:"Life on Hit",paragonModifier:{increment:160.9,max:8046.3,value:0},unit:"",key:"lifeOnHit",value:0,hasMods:!0,fromApi:!0,normalization:1,isParagonStat:!0},magicFind:{name:"Magic Find",unit:"",key:"magicFind",value:0,hasMods:!1,fromApi:!0,normalization:100,isParagonStat:!1},thorns:{name:"Thorns",key:"Thorns_Fixed#Physical",unit:"",value:0,hasMods:!1,fromApi:!1,normalization:100,isParagonStat:!1},movementSpeed:{name:"Movement Speed",paragonModifier:{increment:.5,max:25,value:0},unit:"%",value:0,key:"Movement_Scalar",hasMods:!0,fromApi:!1,normalization:100,isParagonStat:!0},armor:{name:"Armor",paragonModifier:{increment:.5,max:25,value:0},unit:"%",value:0,hasMods:!0,fromApi:!1,normalization:1,isParagonStat:!0},allResist:{name:"Resist All",paragonModifier:{increment:.5,max:25,value:0},unit:"%",value:0,hasMods:!0,fromApi:!1,normalization:1,isParagonStat:!0}}},initSkillDamageStat:function(){return{unit:"%",value:0}}},render:function(){}}),DamagePercentAll="Damage_Weapon_Percent_All",DamageBonusMinPhysical="Damage_Weapon_Bonus_Min_X1#Physical",weaponElementsMin=["Damage_Weapon_Min#Arcane","Damage_Weapon_Min#Fire","Damage_Weapon_Min#Lightning","Damage_Weapon_Min#Cold","Damage_Weapon_Min#Poison","Damage_Weapon_Bonus_Min_X1#Physical"],weaponElementsDelta=["Damage_Weapon_Delta#Arcane","Damage_Weapon_Delta#Fire","Damage_Weapon_Delta#Lightning","Damage_Weapon_Delta#Cold","Damage_Weapon_Delta#Poison","Damage_Weapon_Bonus_Delta_X1#Physical"],hellfirePassiveDisplay,hellfirePassiveLink,setPool=[["Cain's Fate",0],["Bastions of Will",0],["Aughild's Victory",0],["Aughild's Authority",0],["Guardian's Contingency",0],["Immortal King's Call",0],["Natalya's Vengeance",0],["Tal Rasha's Elements",0],["Sage's Plight",0],["Sage's Journey",0],["Born's Defiance",0],["Born's Command",0],["Unhallowed Essence",0],["Aughild's Authority",0],["Cain's Destiny",0],["Thorns of the Invoker",0],["Might of the Earth",0],["Firebird's Finery",0],["Guardian's Jeopardy",0],["Helltooth Harness",0],["Armor of Akkhan",0],["Wrath of the Wastes",0],["Raiment of the Jade Harvester",0],["Embodiment of the Marauder",0],["Raiment of a Thousand Storms",0],["The Legacy of Raekor",0],["Roland's Legacy",0],["Delsere's Magnum Opus",0],["Monkey King's Garb",0],["Asheara's Uniform",0],["Demon's Skin",0],["Demon's Hide",0],["Asheara's Vestments",0],["Thorns of the Invoker",0],["Delsere's Magnum Opus",0],["Blackthorne's Battlegear",0],["Inna's Mantra",0],["Vyr's Amazing Arcana",0],["Krelm's Buff Bulwark",0],["The Shadow's Mantle",0],["Endless Walk",0],["Legacy of Nightmares",0],["Hallowed Defenders",0],["Hallowed Protectors",0],["Manajuma's Way",0],["Zunimassa's Haunt",0],["Chantodo's Resolve",0],["Istvan's Paired Blades",0],["Shenlong's Spirit",0],["Bul-Kathos's Oath",0],["Danetta's Hatred",0],["Captain Crimson's Trimmings",0]],passiveBuffPool=[["Cull the Weak","Damage",.2],["Single Out","Crit Chance",.25],["Archery","Damage",.08],["Archery","Crit Damage",.5],["Archery","Crit Chance",.05],["Custom Engineering","Sentries",2],["Ambush","Damage",.4],["Ballistics","Damage",1],["Sharpshooter","Crit Chance",.04],["Grenadier","Damage",.1],["Steady Aim","Damage",.2]],skillBuffPool=[["Bait the Trap","Crit Chance",.1],["Wolf Companion","Damage",.3]],debuffPool=[["Marked for Death","Damage",.2]],gemPool=[["Zei's Stone of Vengeance","Item_Power_Passive#ItemPassive_Unique_Gem_012_x1"],["Bane of the Trapped","Item_Power_Passive#ItemPassive_Unique_Gem_002_x1"],["Gogok of the Swiftness","Item_Power_Passive#ItemPassive_Unique_Gem_008U_x1"]],backgroundImage,itemSetCount,constructedLink,itemQuality,isAncient,gemLink,start,end,panelLeft,panelRight,panelBottomLeft,panelBottomRight,panelRightAdditional,panelLeftAdditional,panelLeftWidth,panelRightWidth,panelBottomLeftHeight,panelBottomRightHeight,panelBottomLeftWidth,panelBottomRightWidth,panelRightAdditionalHeight,panelLeftAdditionalHeight,panelBottomLeftAdditional,panelBottomRightAdditional,panelBottomLeftAdditionalHeight,panelBottomRightAdditionalHeight,itemWrapper,charBgWrapper,target,childElements,parentElement,input,i,j,k,m,results,skillDamageRaw=[],combined,string,calc,skills=[],skillsDesc=[],passives=[],passivesDesc=[],statsArray=[],specialPassive=[],base=[],style=[],shoulders=[],helmet=[],torso=[],hands=[],feet=[],ringLeft=[],ringRight=[],bracers=[],legs=[],items=[],mainHand=[],offHand=[],belt=[],neck=[],additionalStatsOffensive=[],additionalStatsDefensive=[],minDmgCalc,maxDmgCalc,primaryStats={life:{name:"Life"},toughness:{name:"Toughness"},dexterity:{name:"Dexterity"},strength:{name:"Strength"},intelligence:{name:"Intelligence"},vitality:{name:"Vitality"},armor:{name:"Armor"},damageIncrease:{name:"Damage Increase"},healing:{name:"Healing"}},runeType,runeMap={a:{position:"49%",key:"a"},b:{position:"97%",key:"b"},c:{position:"73",key:"c"},d:{position:"49%",key:"d"},e:{position:"0",key:"e"}},d3Profile=React.createClass({displayName:"d3Profile",getInitialState:function(){return{debugMode:!0,skills:[],passives:[],stats:[],items:{},attributes:[],"class":"",name:"",level:"",paragon:"",helmItem:{},amuletItem:{},chestItem:{},bootsItem:{},glovesItem:{},shouldersItem:{},legsItem:{},bracersItem:{},mainItem:{},offItem:{},beltItem:{},ringItemLeft:{},ringItemRight:{},setRing:!1,time:0,toggle:"",skillDescToggle:"",passiveDescToggle:"",paragonToggle:"",hellfire_clear:"",heroesDataUrl:"",heroDataUrl:"",itemUrl:"",cubeItems:{},panelAnimationComplete:!1,calculatingSkillDamage:!1,calculatingStats:!1,battleTag:localStorage.getItem("battleTag"),itemIconBase:"http://media.blizzard.com/d3/icons/items/large/",skillIconBase:"http://media.blizzard.com/d3/icons/skills/64/"}},checkParagonStat:function(a){return a.paragonModifier?!0:!1},initStats:function(){this.setState({offensiveStats:stats.init("OffensiveStats"),defensiveStats:stats.init("DefensiveStats"),skillDamage:stats.init("SkillDamageStat")},function(){this.loadParagonStats()})},triggerStatCollector:function(){this.checkSetItems(),this.collectStats(),this.collectSkillDamage(),console.log("manual stat collector")},startStatCollectorRunner:function(){return this.state.panelAnimationComplete?void console.log("automatic stat collector"):void console.log("waiting for animations")},componentDidMount:function(){panelLeft=ReactDOM.findDOMNode(this.refs.pl),panelRight=ReactDOM.findDOMNode(this.refs.pr),panelBottomLeft=ReactDOM.findDOMNode(this.refs.pbl),panelBottomRight=ReactDOM.findDOMNode(this.refs.pbr),panelRightAdditional=ReactDOM.findDOMNode(this.refs.pra),panelLeftAdditional=ReactDOM.findDOMNode(this.refs.pla),panelBottomLeftAdditional=ReactDOM.findDOMNode(this.refs.pbla),panelBottomRightAdditional=ReactDOM.findDOMNode(this.refs.pbra),itemWrapper=ReactDOM.findDOMNode(this.refs.items),charBgWrapper=ReactDOM.findDOMNode(this.refs.charbg)},animatePanelsIn:function(){this.setState({panelAnimationComplete:!1}),TweenLite.fromTo(panelLeft,2,{x:-1*panelLeftWidth,z:.01,delay:.5},{x:0,z:.01,visibility:"visible",delay:.5,ease:Back.easeOut.config(1.1),onComplete:function(){this.setState({panelAnimationComplete:!0}),TweenLite.to(itemWrapper,2,{delay:.5,opacity:1,visibility:"visible"}),TweenLite.to(charBgWrapper,2,{delay:.5,opacity:1,visibility:"visible"})}.bind(this)}),TweenLite.fromTo(panelRight,2,{x:panelRightWidth,z:.01,delay:.5},{x:0,ease:Back.easeOut.config(1.1),z:.01,visibility:"visible",delay:.5}),TweenLite.fromTo(panelBottomLeft,2,{x:-1*panelBottomLeftWidth,y:panelBottomLeftHeight,delay:.5},{x:0,y:0,ease:Back.easeOut.config(1.1),z:.01,visibility:"visible",delay:.5}),TweenLite.fromTo(panelBottomRight,2,{x:panelBottomRightWidth,y:panelBottomRightHeight,delay:.5},{x:0,y:0,ease:Back.easeOut.config(1.1),z:.01,visibility:"visible",delay:.5})},animatePanelsOut:function(){this.setState({panelAnimationComplete:!1}),panelLeftWidth=panelLeft.offsetWidth,panelRightWidth=panelRight.offsetWidth,panelBottomLeftHeight=panelBottomLeft.offsetHeight,panelBottomRightHeight=panelBottomRight.offsetHeight,panelBottomLeftWidth=panelBottomLeft.offsetWidth,panelBottomRightWidth=panelBottomRight.offsetWidth,TweenLite.to(itemWrapper,.25,{opacity:0}),TweenLite.to(charBgWrapper,.25,{opacity:0}),TweenLite.to(panelLeft,1,{x:-1*panelLeftWidth,z:.01,delay:.5,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)}),TweenLite.to(panelRight,1,{x:panelRightWidth,z:.01,delay:.5}),TweenLite.to(panelBottomLeft,1,{x:-1*panelBottomLeftWidth,y:panelBottomLeftHeight,delay:.5}),TweenLite.to(panelBottomRight,1,{x:panelBottomRightWidth,y:panelBottomRightHeight,delay:.5})},animateBonusPanelIn:function(a,b,c){TweenLite.to(a,1.5,{y:0,z:.01,visibility:"visible",ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0}),c===!0&&this.triggerStatCollector()}.bind(this)})},animateBonusPanelOut:function(a,b,c){TweenLite.to(a,1.5,{y:b*c,z:.01,ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)})},handleBonusStatsClick:function(){this.setState({panelAnimationComplete:!1}),panelRightAdditionalHeight=panelRightAdditional.offsetHeight,"visible"!==this.state.toggle?(this.animateBonusPanelIn(panelRightAdditional,panelRightAdditionalHeight,!0),this.setState({toggle:"visible"})):(this.animateBonusPanelOut(panelRightAdditional,panelRightAdditionalHeight,-1),this.setState({toggle:"hidden"}))},handleSkillDescClick:function(){this.setState({panelAnimationComplete:!1}),panelBottomLeftAdditionalHeight=panelBottomLeftAdditional.offsetHeight,"visible"!==this.state.skillDescToggle?(this.animateBonusPanelIn(panelBottomLeftAdditional,panelBottomLeftAdditionalHeight,!1),this.setState({skillDescToggle:"visible"})):(this.animateBonusPanelOut(panelBottomLeftAdditional,panelBottomLeftAdditionalHeight),this.setState({skillDescToggle:"hidden"}))},handlePassiveDescClick:function(){this.setState({panelAnimationComplete:!1}),panelBottomRightAdditionalHeight=panelBottomRightAdditional.offsetHeight,"visible"!==this.state.passiveDescToggle?(this.animateBonusPanelIn(panelBottomRightAdditional,panelBottomRightAdditionalHeight,!1),this.setState({passiveDescToggle:"visible"})):(this.animateBonusPanelOut(panelBottomRightAdditional,panelBottomRightAdditionalHeight),this.setState({passiveDescToggle:"hidden"}))},handleItemClick:function(a){if(this.setState({panelAnimationComplete:!1}),target=a.target,a.target.classList.contains("item"))for(childElements=target.parentNode.children,target.classList.contains("open")?(target.classList.remove("open"),TweenLite.fromTo(target,1,{width:450,height:500},{width:64,height:128,ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)})):(target.classList.add("open"),TweenLite.fromTo(target,1,{width:64,height:128},{width:450,height:500,ease:Back.easeOut.config(1.5),onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)})),i=0;i<childElements.length;i++)childElements[i].classList.contains("open")&&childElements[i]!==target&&(childElements[i].classList.remove("open"),TweenLite.fromTo(childElements[i],1,{width:450,height:500},{width:64,height:128,ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)}))},getItemData:function(){"use strict";var a,b;if(this.setState({helmItem:{},amuletItem:{},chestItem:{},bootsItem:{},glovesItem:{},shouldersItem:{},legsItem:{},bracersItem:{},mainItem:{},offItem:{},beltItem:{},ringItemLeft:{},ringItemRight:{}}),this.state.items){var c=[this.state.items.neck,this.state.items.head,this.state.items.torso,this.state.items.feet,this.state.items.hands,this.state.items.shoulders,this.state.items.legs,this.state.items.bracers,this.state.items.mainHand,this.state.items.waist],d=[[this.state.items.leftFinger,"left"],[this.state.items.rightFinger,"right"],[this.state.items.offHand,null]];for(b=0;b<c.length;b++)c[b]&&(a=c[b].tooltipParams,api.loadItemData(a));for(b=0;b<d.length;b++)d[b][0]&&(a=d[b][0].tooltipParams,"left"===d[b][1]?api.loadItemDataWithProps(a,!0):api.loadItemDataWithProps(a,!1))}},skillDmgSanitize:function(a){calc=0,string="",combined="",skillDamageRaw.length=0;for(var b in a)a.hasOwnProperty(b)&&(string=b.toString().slice(4),parseFloat(b)&&(calc=parseFloat(b)*parseFloat(a[b])),0!==calc&&(combined+=string+" "+Math.round(1e4*calc)/100+"%<br>",skillDamageRaw.push(calc+" "+string)));return""!==combined?(this.setState({skillDmgRaw:skillDamageRaw}),combined):void 0},checkSetItems:function(){var a=[],b=!1;if(this.state.items){var c=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(i=0;i<c.length;i++)a.push(c[i].name),a.indexOf("Ring of Royal Grandeur")>-1&&(b=!0);this.setState({setRing:b}),this.forceUpdate()}},collectSkillDamage:function(){var a=this;if(this.state.items){var b=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];if(this.state.calculatingSkillDamage)return;return new Promise(function(c,d){a.setState({calculatingSkillDamage:!0}),Worker.create=function(a){var b=a.toString(),c=new Blob(["'use strict';\nself.onmessage ="+b],{type:"text/javascript"});return window.URL.createObjectURL(c)};var e=Worker.create(function(a){var b,c,d,e,f=a.data.itemSlots,g=a.data.skillDamage,h=a.data.skills,i=a.data.className,j=[],k=[["demon-hunter","Power_Damage_Percent_Bonus#DemonHunter_"],["witch-doctor","Power_Damage_Percent_Bonus#Witchdoctor_"],["barbarian","Power_Damage_Percent_Bonus#Barbarian_"],["crusader","Power_Damage_Percent_Bonus#Crusader_"],["monk","Power_Damage_Percent_Bonus#Monk_"],["wizard","Power_Damage_Percent_Bonus#Wizard_"]],l=[],m=[];for(g.value=0,d=0;d<h.length;d++)if(h[d].skill)for(e=0;e<k.length;e++)k[e][0]===i&&l.push(k[e][1]+h[d].skill.name.replace(/ /g,""));for(b=0;b<f.length;b++)if(f[b].attributesRaw)for(c=0;c<l.length;c++)f[b].attributesRaw[l[c]]&&Object.getOwnPropertyNames(f[b].attributesRaw[l[c]]===l[c])&&(m.push(parseFloat(f[b].attributesRaw[l[c]].min)+h[c].skill.name),j=m.reduce(function(a,b){return b in a?a[b]++:a[b]=1,a},{}));self.postMessage({countedValues:j}),self.close()}),f=new Worker(e);f.onmessage=function(b){c(),a.setState({calculatingSkillDamage:!1}),a.setState({skillDmg:a.skillDmgSanitize(b.data.countedValues)}),console.info("the web worker had a save journey")},f.onerror=function(a){d(Error("one of the workers had an horrible accident\n"+a.message+" in line "+a.lineno)),this.terminate()},f.postMessage({itemSlots:b,skillDamage:a.state.skillDamage,skills:a.state.skills,className:a.state.generalStats["class"].value})})}},collectStats:function(){var a=this;if(this.state.items){var b=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];if(this.state.calculatingStats)return;return new Promise(function(c,d){a.setState({calculatingStats:!0}),Worker.create=function(a){var b=a.toString(),c=new Blob(["'use strict';\nself.onmessage ="+b],{type:"text/javascript"});return window.URL.createObjectURL(c)};var e=Worker.create(function(a){var b,c,d,e,f=a.data.itemSlots,g=a.data.offensiveStats,h=a.data.defensiveStats,i=a.data.setRing,j=a.data.setPool,k=Object.assign({},g,h),l=[];for(b in k)k.hasOwnProperty(b)&&(k[b].value=k[b].multiplicative?1:0);for(c=0;c<f.length;c++){for(b in g)if(g.hasOwnProperty(b)&&(f[c].attributesRaw&&f[c].attributesRaw[g[b].key]&&f[c].attributesRaw[g[b].key].min&&(g[b].multiplicative?g[b].value*=parseFloat(f[c].attributesRaw[g[b].key].min):g[b].value+=parseFloat(f[c].attributesRaw[g[b].key].min)),f[c].gems&&f[c].gems[0]&&(g[b].multiplicative?(f[c].gems[0].attributesRaw[g[b].key]&&f[c].attributesRaw.Gem_Attributes_Multiplier&&(g[b].value*=parseFloat(f[c].gems[0].attributesRaw[g[b].key].min*f[c].attributesRaw.Gem_Attributes_Multiplier.min)),
f[c].gems[0].attributesRaw[g[b].key]&&!f[c].attributesRaw.Gem_Attributes_Multiplier&&(g[b].value*=parseFloat(f[c].gems[0].attributesRaw[g[b].key].min))):(f[c].gems[0].attributesRaw[g[b].key]&&f[c].attributesRaw.Gem_Attributes_Multiplier&&(g[b].value+=parseFloat(f[c].gems[0].attributesRaw[g[b].key].min*f[c].attributesRaw.Gem_Attributes_Multiplier.min)),f[c].gems[0].attributesRaw[g[b].key]&&!f[c].attributesRaw.Gem_Attributes_Multiplier&&(g[b].value+=parseFloat(f[c].gems[0].attributesRaw[g[b].key].min)))),f[c].set&&f[c].set.ranks)){for(d=0;d<j.length;d++)for(f[c].set.name===j[d][0]&&j[d][1]++,e=0;e<f[c].set.ranks.length;e++)i?f[c].set.name===j[d][0]&&f[c].set.ranks[e].required<=j[d][1]+1&&j[d][1]>=2&&f[c].set.ranks[e].attributesRaw[g[b].key]&&f[c].set.ranks[e].attributesRaw[g[b].key].min&&(g[b].multiplicative?g[b].value*=parseFloat(f[c].set.ranks[e].attributesRaw[g[b].key].min):g[b].value+=parseFloat(f[c].set.ranks[e].attributesRaw[g[b].key].min)):f[c].set.name===j[d][0]&&f[c].set.ranks[e].required<=j[d][1]&&f[c].set.ranks[e].attributesRaw[g[b].key]&&f[c].set.ranks[e].attributesRaw[g[b].key].min&&(g[b].multiplicative?g[b].value*=parseFloat(f[c].set.ranks[e].attributesRaw[g[b].key].min):g[b].value+=parseFloat(f[c].set.ranks[e].attributesRaw[g[b].key].min));if(l.indexOf(f[c].set.name)>-1)continue;l.push(f[c].set.name)}for(b in h)if(h.hasOwnProperty(b)&&(f[c].attributesRaw&&f[c].attributesRaw[h[b].key]&&f[c].attributesRaw[h[b].key].min&&(h[b].multiplicative?h[b].value*=parseFloat(f[c].attributesRaw[h[b].key].min):h[b].value+=parseFloat(f[c].attributesRaw[h[b].key].min)),f[c].gems&&f[c].gems[0]&&(h[b].multiplicative?(f[c].gems[0].attributesRaw[h[b].key]&&f[c].attributesRaw.Gem_Attributes_Multiplier&&(h[b].value*=parseFloat(f[c].gems[0].attributesRaw[h[b].key].min*f[c].attributesRaw.Gem_Attributes_Multiplier.min)),f[c].gems[0].attributesRaw[h[b].key]&&!f[c].attributesRaw.Gem_Attributes_Multiplier&&(h[b].value*=parseFloat(f[c].gems[0].attributesRaw[h[b].key].min))):(f[c].gems[0].attributesRaw[h[b].key]&&f[c].attributesRaw.Gem_Attributes_Multiplier&&(h[b].value+=parseFloat(f[c].gems[0].attributesRaw[h[b].key].min*f[c].attributesRaw.Gem_Attributes_Multiplier.min)),f[c].gems[0].attributesRaw[h[b].key]&&!f[c].attributesRaw.Gem_Attributes_Multiplier&&(h[b].value+=parseFloat(f[c].gems[0].attributesRaw[h[b].key].min)))),f[c].set&&f[c].set.ranks)){for(d=0;d<j.length;d++)for(f[c].set.name===j[d][0]&&j[d][1]++,e=0;e<f[c].set.ranks.length;e++)i?f[c].set.name===j[d][0]&&f[c].set.ranks[e].required<=j[d][1]+1&&j[d][1]>=2&&f[c].set.ranks[e].attributesRaw[h[b].key]&&f[c].set.ranks[e].attributesRaw[h[b].key].min&&(h[b].multiplicative?h[b].value*=parseFloat(f[c].set.ranks[e].attributesRaw[h[b].key].min):h[b].value+=parseFloat(f[c].set.ranks[e].attributesRaw[h[b].key].min)):f[c].set.name===j[d][0]&&f[c].set.ranks[e].required<=j[d][1]&&f[c].set.ranks[e].attributesRaw[h[b].key]&&f[c].set.ranks[e].attributesRaw[h[b].key].min&&(h[b].multiplicative?h[b].value*=parseFloat(f[c].set.ranks[e].attributesRaw[h[b].key].min):h[b].value+=parseFloat(f[c].set.ranks[e].attributesRaw[h[b].key].min));if(l.indexOf(f[c].set.name)>-1)continue;l.push(f[c].set.name)}}self.postMessage({offensiveStats:g,defensiveStats:h}),self.close()}),f=new Worker(e);f.onmessage=function(b){a.setState({offensiveStats:b.data.offensiveStats,defensiveStats:b.data.defensiveStats}),c(),a.setState({calculatingStats:!1}),console.info("the web worker had a save journey")},f.onerror=function(a){d(Error("one of the workers had an horrible accident\n"+a.message+" in line "+a.lineno)),this.terminate()},f.postMessage({itemSlots:b,offensiveStats:a.state.offensiveStats,defensiveStats:a.state.defensiveStats,setPool:setPool,setRing:a.state.setRing})})}},normalizeMultiplicativeStat:function(a,b){var c=b/100;return 1===a?b:Math.floor(100*(1-Math.floor(a*(1-c)*1e4)/1e4))/100},normalizeWeaponAttackSpeed:function(a,b,c,d){return d?Math.round(100*(c+c*(d+a+b)))/100:Math.round(100*(c+c*(a+b)))/100},render:function(){var a,b,c,d,e,f=this,g=this.state.skills,h=this.state.passives,j=this.state.stats,l=this.state.items,n=this.state.generalStats,o=this.state.amuletItem,p=this.state.mainItem,q=this.state.offItem,r=this.state.items,s=this.state.skillIconBase,t=this.state.itemIconBase,u=this.state.skillDmg,v=this.state.skillDmgRaw,w=0,x={head:{itemData:this.state.helmItem,view:helmet},neck:{itemData:this.state.amuletItem,view:neck},torso:{itemData:this.state.chestItem,view:torso},feet:{itemData:this.state.bootsItem,view:feet},hands:{itemData:this.state.glovesItem,view:hands},shoulders:{itemData:this.state.shouldersItem,view:shoulders},legs:{itemData:this.state.legsItem,view:legs},bracers:{itemData:this.state.bracersItem,view:bracers},mainHand:{itemData:this.state.mainItem,view:mainHand},offHand:{itemData:this.state.offItem,view:offHand},leftFinger:{itemData:this.state.ringItemLeft,view:ringLeft},rightFinger:{itemData:this.state.ringItemRight,view:ringRight},waist:{itemData:this.state.beltItem,view:belt}},y=this.state.defensiveStats,z=this.state.offensiveStats;for(y&&z&&(b=Object.assign({},y,z)),minDmgCalc=0,maxDmgCalc=0,additionalStatsOffensive=[],additionalStatsDefensive=[],skills=[],skillsDesc=[],passives=[],passivesDesc=[],statsArray=[],specialPassive=[],base=[],style=[],shoulders=[],helmet=[],torso=[],hands=[],feet=[],ringLeft=[],ringRight=[],bracers=[],legs=[],items=[],mainHand=[],offHand=[],belt=[],neck=[],m=0;m<setPool.length;m++)setPool[m][1]=0;for(a in x)if(x.hasOwnProperty(a))for(m=0;m<setPool.length;m++)x[a].itemData&&x[a].itemData.set&&x[a].itemData.set.name===setPool[m][0]&&setPool[m][1]++;backgroundImage=this.state.generalStats?{backgroundImage:"url(assets/images/"+this.state.generalStats["class"].value+".png)"}:{backgroundImage:"none"};for(var A in this.state.generalStats)if(this.state.generalStats.hasOwnProperty(A)){if(c="",c+=this.state.generalStats[A].value,"class"===A&&(c=this.state.generalStats[A].value.toString().replace(/-/g,"").charAt(0).toUpperCase()+this.state.generalStats[A].value.toString().replace(/-/g,"").slice(1).toLowerCase()),"lastUpdated"===A){var B=new Date(1e3*this.state.generalStats[A].value);c=B.toLocaleDateString()+" - "+B.toLocaleTimeString()}base.push(React.DOM.div({key:A},this.state.generalStats[A].name+": "+c))}if(g&&g.forEach(function(a){a.rune?(constructedLink=s.concat(a.skill.icon),a.rune.type===runeMap[a.rune.type].key&&(runeType={backgroundPosition:"0 "+runeMap[a.rune.type].position}),skills.push(React.DOM.div({key:a.skill.name+"-icon",className:"hasIcon"},a.skill.name," with ",a.rune.name,React.DOM.div({key:a.skill.name+"-icon-front",className:"icon-front",style:{backgroundImage:"url("+constructedLink+".png)"}}),React.DOM.div({key:a.rune.name+"-icon-back",className:"icon-back",style:runeType}))),skillsDesc.push(React.DOM.div({key:a.skill.name+"-description",className:"description"},React.DOM.div({key:a.skill.name+"-desc-icon",className:"desc-icon",style:{backgroundImage:"url("+constructedLink+".png)"}}),a.skill.name+" with "+a.rune.name,React.DOM.p({dangerouslySetInnerHTML:{__html:a.skill.description.replace(/\n/g,"<br/>")},key:a.skill.name+"-desc",className:"skill-desc"}),React.DOM.p({dangerouslySetInnerHTML:{__html:a.rune.description.replace(/\n/g,"<br/>")},key:a.rune.name+"-desc",className:"rune-desc"})))):a.skill&&(constructedLink=s.concat(a.skill.icon),skills.push(React.DOM.div({key:a.skill.name+"-icon",className:"hasIcon"},a.skill.name,React.DOM.div({key:a.skill.name+"-icon-front",className:"icon-front no-rune",style:{backgroundImage:"url("+constructedLink+".png)"}}))),skillsDesc.push(React.DOM.div({key:a.skill.name+"-description",className:"description"},React.DOM.div({key:a.skill.name+"-desc-icon",className:"desc-icon",style:{backgroundImage:"url("+constructedLink+".png)"}}),a.skill.name,React.DOM.p({dangerouslySetInnerHTML:{__html:a.skill.description.replace(/\n/g,"<br/>")},key:a.skill.name+"-desc",className:"skill-desc"}))))}),h&&h.forEach(function(a){a.skill&&(constructedLink=s.concat(a.skill.icon),passives.push(React.DOM.div({key:a.skill.name,className:"hasIcon"},a.skill.name,React.DOM.div({key:a.skill.name+"-icon",className:"icon",style:{backgroundImage:"url("+constructedLink+".png)"}}))),passivesDesc.push(React.DOM.div({key:a.skill.name+"-description",className:"description"},React.DOM.div({key:a.skill.name+"-desc-icon",className:"desc-icon",style:{backgroundImage:"url("+constructedLink+".png)"}}),a.skill.name,React.DOM.p({dangerouslySetInnerHTML:{__html:a.skill.description.replace(/\n/g,"<br/>")},key:a.skill.name+"-description-text",className:"passive-desc"}))))}),this.state.kanai&&this.state.kanai.forEach(function(a,b){if(a&&(api.loadKanaiItems(a.tooltipParams,b),constructedLink=t.concat(a.icon),passives.push(React.DOM.div({key:a.name,className:"hasIcon"},a.name,React.DOM.div({key:a.name+"-icon",className:"icon",style:{backgroundImage:"url("+constructedLink+".png)"}}))),f.state.cubeItems))for(var c in f.state.cubeItems)f.state.cubeItems.hasOwnProperty(c)&&c&&f.state.cubeItems[c].name===a.name&&passivesDesc.push(React.DOM.div({key:f.state.cubeItems[c].name+"-description",className:"description"},React.DOM.div({key:f.state.cubeItems[c].name+"-desc-icon",className:"desc-icon",style:{backgroundImage:"url("+constructedLink+".png)"}}),f.state.cubeItems[c].name,React.DOM.p({dangerouslySetInnerHTML:{__html:f.state.cubeItems[c].attributes.passive[0].text.replace(/\n/g,"<br/>")},key:c.name+"-description-text",className:"passive-desc"})))}),this.state.items)for(var C in x)if(x.hasOwnProperty(C))if(r&&r[C]){switch(constructedLink=t.concat(r[C].icon,".png"),l[C].displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;default:itemQuality="common"}if(x[C].itemData.attributesRaw)if(isAncient=x[C].itemData.attributesRaw.Ancient_Rank&&1===x[C].itemData.attributesRaw.Ancient_Rank.min?"ancient":"","mainHand"===C||"offHand"===C){if(x[C].itemData.type){var D="";D=x[C].itemData.type.twoHanded?"(2h)":"(1h)",x[C].view.push(React.DOM.li({key:"item-name",className:itemQuality+" name"},isAncient+" "+x[C].itemData.name+" "+D))}if(x[C].itemData.dps&&x[C].view.push(React.DOM.li({key:"dps",className:"dps"},x[C].itemData.dps.max.toString().substring(0,7)+" DPS")),x[C].itemData.minDamage&&x[C].itemData.maxDamage&&x[C].itemData.attributesRaw)for(i=0;i<weaponElementsMin.length;i++)x[C].itemData.attributesRaw[weaponElementsMin[i]]&&(x[C].itemData.attributesRaw[DamagePercentAll]&&!x[C].itemData.attributesRaw[DamageBonusMinPhysical]?(minDmgCalc=x[C].itemData.minDamage.max+x[C].itemData.attributesRaw[weaponElementsMin[i]].max+x[C].itemData.attributesRaw[weaponElementsMin[i]].max*x[C].itemData.attributesRaw[DamagePercentAll].max,maxDmgCalc=x[C].itemData.maxDamage.max+x[C].itemData.attributesRaw[weaponElementsMin[i]].max+x[C].itemData.attributesRaw[weaponElementsDelta[i]].max+(x[C].itemData.attributesRaw[weaponElementsMin[i]].max+x[C].itemData.attributesRaw[weaponElementsDelta[i]].max)*x[C].itemData.attributesRaw[DamagePercentAll].max,x[C].view.push(React.DOM.li({key:x[C].itemData.name+"raw-damage",className:"raw-damage"},Math.round(minDmgCalc)+" - "+Math.round(maxDmgCalc)+" Damage"))):x[C].itemData.attributesRaw[DamagePercentAll]||x[C].itemData.attributesRaw[DamageBonusMinPhysical]?(minDmgCalc=x[C].itemData.minDamage.max,maxDmgCalc=x[C].itemData.maxDamage.max,x[C].view.push(React.DOM.li({key:x[C].itemData.name+"raw-damage",className:"raw-damage"},Math.round(minDmgCalc)+" - "+Math.round(maxDmgCalc)+" Damage"))):(minDmgCalc=x[C].itemData.minDamage.max+x[C].itemData.attributesRaw[weaponElementsMin[i]].max,maxDmgCalc=x[C].itemData.maxDamage.max+x[C].itemData.attributesRaw[weaponElementsMin[i]].max+x[C].itemData.attributesRaw[weaponElementsDelta[i]].max,x[C].view.push(React.DOM.li({key:x[C].itemData.name+"raw-damage",className:"raw-damage"},Math.round(minDmgCalc)+" - "+Math.round(maxDmgCalc)+" Damage"))))}else x[C].view.push(React.DOM.li({key:"item-name",className:itemQuality+" name"},isAncient+" "+x[C].itemData.name));if(x[C].itemData.attributes&&(x[C].itemData.attributes.primary&&x[C].itemData.attributes.primary.forEach(function(a,b){x[C].view.push(React.DOM.li({key:"primary-stat-"+b,className:"primary"},a.text))}),x[C].itemData.attributes.secondary&&x[C].itemData.attributes.secondary.forEach(function(a,b){x[C].view.push(React.DOM.li({key:"secondary-stat-"+b,className:"secondary"},a.text))}),x[C].itemData.attributes.passive&&x[C].itemData.attributes.passive.forEach(function(a,b){x[C].view.push(React.DOM.li({key:"passive-stat-"+b,className:"passive"},a.text))})),x[C].itemData.set&&x[C].itemData.set.ranks)for(itemSetCount=0,i=0;i<x[C].itemData.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)x[C].itemData.set.name===setPool[m][0]&&this.state.setRing?itemSetCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:x[C].itemData.set.name!==setPool[m][0]||this.state.setRing||(itemSetCount=setPool[m][1]);x[C].itemData.set.ranks[i].required===k&&x[C].itemData.set.ranks[i].required<=itemSetCount?x[C].itemData.set.ranks[i].attributes.primary.forEach(function(a){x[C].view.push(React.DOM.li({key:"set-"+x[C].itemData.set.name+"-primary-bonus-"+a.text,className:"set-bonus-"+k},a.text))}):x[C].itemData.set.ranks[i].required===k&&x[C].itemData.set.ranks[i].attributes.primary.forEach(function(a){x[C].view.push(React.DOM.li({key:"set-"+x[C].itemData.set.name+"-primary-bonus-"+a.text+"-inactive",className:"set-bonus-"+k+" inactive"},a.text))}),x[C].itemData.set.ranks[i].required===k&&x[C].itemData.set.ranks[i].required<=itemSetCount?x[C].itemData.set.ranks[i].attributes.secondary.forEach(function(a){x[C].view.push(React.DOM.li({key:"set-"+x[C].itemData.set.name+"-secondary bonus-"+a.text,className:"set-bonus-"+k},a.text))}):x[C].itemData.set.ranks[i].required===k&&x[C].itemData.set.ranks[i].attributes.secondary.forEach(function(a){x[C].view.push(React.DOM.li({key:"set-"+x[C].itemData.set.name+"-secondary bonus-"+a.text+"-inactive",className:"set-bonus-"+k+" inactive"},a.text))}),x[C].itemData.set.ranks[i].required===k&&x[C].itemData.set.ranks[i].required<=itemSetCount?x[C].itemData.set.ranks[i].attributes.passive.forEach(function(a){x[C].view.push(React.DOM.li({key:"set-"+x[C].itemData.set.name+"-passive bonus-"+a.text,className:"set-bonus-"+k},a.text))}):x[C].itemData.set.ranks[i].required===k&&x[C].itemData.set.ranks[i].attributes.passive.forEach(function(a){x[C].view.push(React.DOM.li({key:"set-"+x[C].itemData.set.name+"-passive bonus-"+a.text+"-inactive",className:"set-bonus-"+k+" inactive"},a.text))})}if(x[C].itemData.attributesRaw&&x[C].itemData.attributesRaw.Sockets)for(i=0;i<x[C].itemData.attributesRaw.Sockets.min;i++)x[C].itemData.gems[i]?(gemLink=t.concat(x[C].itemData.gems[0].item.icon,".png"),x[C].itemData.gems[i].attributesRaw.Jewel_Rank?x[C].view.push(React.DOM.li({key:"socket-"+i,className:"socket",style:{backgroundImage:"url("+gemLink+")"}},React.DOM.span({key:"socket-gem-level"+i,className:"gem-level"},x[C].itemData.gems[i].attributesRaw.Jewel_Rank.min))):x[C].view.push(React.DOM.li({key:"socket-"+i,className:"socket",style:{backgroundImage:"url("+gemLink+")"}})),x[C].itemData.gems[i].attributes.primary[0]&&x[C].view.push(React.DOM.li({key:"gem-passive-primary"+i,className:"gem-passive"},x[C].itemData.gems[i].attributes.primary[0].text)),x[C].itemData.gems[i].attributes.secondary[0]&&x[C].view.push(React.DOM.li({key:"gem-passive-secondary"+i,className:"gem-passive"},x[C].itemData.gems[i].attributes.secondary[0].text)),x[C].itemData.gems[i].attributes.passive[0]&&x[C].view.push(React.DOM.li({key:"gem-passive-secondary"+i,className:"gem-passive"},x[C].itemData.gems[i].attributes.passive[0].text))):x[C].view.push(React.DOM.li({key:"socket-"+i,className:"socket"}));items.push(React.DOM.div({key:C.toString(),className:"item "+isAncient+" "+itemQuality+" "+C,onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({className:"desc"},React.DOM.ul({className:"stats"},x[C].view))))}else items.push(React.DOM.div({key:C.toString(),className:"empty item "+C}));if(o.attributes&&this.state.generalStats&&"Hellfire Amulet"===o.name){switch(hellfirePassiveLink=o.attributes.passive[0].text.substring(9).replace(" passive.","").replace(/ /g,"").toLowerCase(),hellfirePassiveDisplay=o.attributes.passive[0].text.substring(9).replace(" passive.",""),this.state.generalStats["class"].value){case"demon-hunter":constructedLink=s.concat("demonhunter_passive_",hellfirePassiveLink);break;case"witch-doctor":constructedLink=s.concat("witchdoctor_passive_",hellfirePassiveLink);break;case"barbarian":constructedLink=s.concat("barbarian_passive_",hellfirePassiveLink);break;case"crusader":constructedLink=s.concat("crusader_passive_",hellfirePassiveLink);break;case"monk":constructedLink=s.concat("monk_passive_",hellfirePassiveLink);break;case"wizard":constructedLink=s.concat("wizard_passive_",hellfirePassiveLink);break;default:console.log("new class?")}specialPassive.push(React.DOM.div({key:hellfirePassiveDisplay,className:"hasIcon"},hellfirePassiveDisplay," (HA)",React.DOM.div({key:hellfirePassiveDisplay,className:"icon",style:{backgroundImage:"url("+constructedLink+".png)"}})))}for(var E in primaryStats)primaryStats.hasOwnProperty(E)&&(c="",j[E]>100&&(c+="life"===E&&this.state.defensiveStats?primaryStats[E].name+": "+Math.round(j[E]+j[E]*this.state.defensiveStats.maxHealthBonus.paragonModifier.value/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."):"armor"===E&&this.state.defensiveStats?primaryStats[E].name+": "+Math.round(j[E]+j[E]*this.state.defensiveStats.armor.paragonModifier.value/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."):primaryStats[E].name+": "+Math.round(j[E]).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."),statsArray.push(React.DOM.div({key:E},c))));if(j){for(var F in z)if(z.hasOwnProperty(F)){if(d="",e=0,z[F].name&&(d+=z[F].name,d+=": "),z[F].fromApi)if(z[F].hasMods)switch(F){case"critDamage":e=Math.round(1e3*(j[z[F].key]*z[F].normalization+z[F].paragonModifier.value+z[F].errorCorrection/100))/1e3;break;default:e=Math.round(1e3*(j[z[F].key]*z[F].normalization+z[F].paragonModifier.value))/1e3}else switch(F){case"critDamage":e=Math.round(1e3*(j[z[F].key]*z[F].normalization+z[F].errorCorrection))/1e3;break;default:e=Math.round(1e3*j[z[F].key*z[F].normalization])/1e3}else if(z[F].hasMods)switch(F){case"ResCostRed":case"cooldownReduction":e=this.normalizeMultiplicativeStat(z[F].value,z[F].paragonModifier.value);break;case"attacksPerSecond":e=this.normalizeWeaponAttackSpeed(z[F].value*z[F].normalization,z[F].paragonModifier.value,p.attacksPerSecond?p.attacksPerSecond.max:0,q.attacksPerSecond?.15:0);break;default:e=z[F].paragonModifier.value+z[F].value*z[F].normalization}else switch(F){case"ResCostRed":case"cooldownReduction":e=this.normalizeMultiplicativeStat(z[F].value,1);break;case"attacksPerSecond":e=this.normalizeWeaponAttackSpeed(z[F].value*z[F].normalization,1,p.attacksPerSecond?p.attacksPerSecond.max:0,q.attacksPerSecond?.15:0);break;default:e=z[F].value*z[F].normalization}e&&additionalStatsOffensive.push(React.DOM.div({key:F,className:"bonusstat"},d+e+z[F].unit))}u&&additionalStatsOffensive.push(React.DOM.div({dangerouslySetInnerHTML:{__html:"Skill Damage: "+u},key:"Skill Damage Stat",className:"bonusstat"}))}if(j)for(var G in y)y.hasOwnProperty(G)&&(d="",e=0,y[G].name&&(d+=y[G].name,d+=": "),e=y[G].fromApi?y[G].hasMods?Math.round(1e3*(y[G].paragonModifier.value+j[y[G].key]*y[G].normalization))/1e3:Math.round(1e3*j[y[G].key])/1e3:y[G].hasMods?Math.round(1e3*(y[G].paragonModifier.value+y[G].value*y[G].normalization))/1e3:Math.round(y[G].value*y[G].normalization*1e3)/1e3,e&&additionalStatsDefensive.push(React.DOM.div({key:G,className:"bonusstat"},d+e+y[G].unit)));if(j&&j.critDamage&&j.critChance&&0!==minDmgCalc&&0!==maxDmgCalc&&this.state.generalStats&&this.state.offensiveStats){var H,I,J,K,L,M=.5*(minDmgCalc+maxDmgCalc),N=j.critChance+this.state.offensiveStats.critChance.paragonModifier.value/100,O=j.critDamage-1+this.state.offensiveStats.critDamage.paragonModifier.value/100,P=N,Q=O,R=0,S=0,T=3,U=1,V=[];if(V.length=0,"demon-hunter"===n["class"].value||"monk"===n["class"].value?H=j.dexterity/100:"barbarian"===n["class"].value||"crusader"===n["class"].value?H=j.strength/100:"wizard"===n["class"].value||"witch-doctor"===n["class"].value?H=j.intelligence/100:(H=1,console.log("new class?")),I=(1+H)*M,this.state.skillDmgRaw)for(i=0;i<this.state.skillDmgRaw.length;i++)g.forEach(function(a){a.skill&&-1!==v[i].search(a.skill.name.toString())&&V.push([T,v[i]])});for(i=0;i<passiveBuffPool.length;i++)h.forEach(function(a){a.skill&&a.skill.name===passiveBuffPool[i][0]&&("Damage"===passiveBuffPool[i][1]&&(R+=passiveBuffPool[i][2]),"Crit Chance"===passiveBuffPool[i][1]&&(P+=passiveBuffPool[i][2]))});for(i=0;i<skillBuffPool.length;i++)g.forEach(function(a){a.skill&&a.rune?(a.skill.name===skillBuffPool[i][0]||a.rune.name===skillBuffPool[i][0])&&"Damage"===skillBuffPool[i][1]&&(R+=skillBuffPool[i][2]):a.skill&&a.skill.name===skillBuffPool[i][0]&&"Damage"===skillBuffPool[i][1]&&(R+=skillBuffPool[i][2])});this.state.maxEleDmgValue&&(S+=this.state.maxEleDmgValue/100),K=V.sort(),L=K[0]?K[0][0]*(1+parseFloat(K[0][1]))*(1+S):1,w=1,J=I*w*(P*Q+1)*L*(1+R)*(1+U),J?statsArray.push(React.DOM.div({key:"dps"},"DPS: ",Math.round(I*w*(N*O+1)).toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")," | EDPS: ",Math.round(J).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))):statsArray.push(React.DOM.div({key:"dps"},"DPS: ",Math.round(I*w*(N*O+1)).toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")," | EDPS: ","Calculating EDPS.."))}return React.DOM.div({className:"d3-container"},React.DOM.div({className:"d3-char-bg",ref:"charbg",style:backgroundImage}),React.DOM.div({className:"d3-item-wrapper",ref:"items"},items),realms(),heroes(),React.DOM.div({className:"panel-left "+this.state.paragonToggle,ref:"pl"},"General",base,React.DOM.a({className:"button",onClick:this.handleParagonStatsClick},React.DOM.span({className:"button-text"},"show paragon"))),React.DOM.div({className:"panel-bottom-left "+this.state.skillDescToggle,title:"click to open detailed description",ref:"pbl"},"Skills",skills,React.DOM.a({className:"button",onClick:this.handleSkillDescClick},React.DOM.span({className:"button-text"},"show details"))),paragon(),React.DOM.div({className:"panel-bottom-left-desc "+this.state.skillDescToggle,ref:"pbla"},React.DOM.a({className:"button",onClick:this.handleSkillDescClick,title:"click to close"},React.DOM.span({className:"button-text"},"close")),skillsDesc),React.DOM.div({className:"panel-bottom-right "+this.state.passiveDescToggle,title:"click to open detailed description",ref:"pbr"},"Passives",passives,specialPassive,React.DOM.a({className:"button",onClick:this.handlePassiveDescClick},React.DOM.span({className:"button-text"},"show details"))),React.DOM.div({className:"panel-bottom-right-desc "+this.state.passiveDescToggle,ref:"pbra"},React.DOM.a({className:"button",onClick:this.handlePassiveDescClick,title:"click to close"},React.DOM.span({className:"button-text"},"close")),passivesDesc,"Note: your Hellfire Passive cannot be displayed here, courtesy of blizzard"),React.DOM.div({ref:"pr",className:"panel-right "+this.state.toggle},"Stats",statsArray,React.DOM.a({className:"button",onClick:this.handleBonusStatsClick,title:"click to show/hide more stats"},React.DOM.span({className:"button-text"},"show more"))),React.DOM.div({className:"panel-right-additional ",ref:"pra"},"Offensive Stats",additionalStatsOffensive,"Defensive Stats",additionalStatsDefensive,React.DOM.a({className:"button",onClick:this.handleBonusStatsClick,title:"click to show/hide more stats"},React.DOM.span({className:"button-text"},"show less"))))}});ReactDOM.render(React.createElement(d3Profile,{pollInterval:6e5}),document.querySelector(".d3-profile"));