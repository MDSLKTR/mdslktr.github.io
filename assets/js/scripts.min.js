var statPool=["Damage_Dealt_Percent_Bonus#Fire","Damage_Dealt_Percent_Bonus#Physical","Damage_Dealt_Percent_Bonus#Cold","Damage_Dealt_Percent_Bonus#Poison","Damage_Dealt_Percent_Bonus#Lightning","Power_Cooldown_Reduction_Percent_All","Resource_Cost_Reduction_Percent_All","Damage_Percent_Bonus_Vs_Elites","Damage_Percent_Reduction_From_Elites","Splash_Damage_Effect_Percent","Gold_PickUp_Radius","Damage_Percent_Reduction_From_Melee","Damage_Percent_Reduction_From_Ranged","Hitpoints_Max_Percent_Bonus_Item","Attacks_Per_Second_Percent"],DamagePercentAll="Damage_Weapon_Percent_All",DamageBonusMinPhysical="Damage_Weapon_Bonus_Min_X1#Physical",weaponElementsMin=["Damage_Weapon_Min#Arcane","Damage_Weapon_Min#Fire","Damage_Weapon_Min#Lightning","Damage_Weapon_Min#Cold","Damage_Weapon_Min#Poison","Damage_Weapon_Bonus_Min_X1#Physical"],weaponElementsDelta=["Damage_Weapon_Delta#Arcane","Damage_Weapon_Delta#Fire","Damage_Weapon_Delta#Lightning","Damage_Weapon_Delta#Cold","Damage_Weapon_Delta#Poison","Damage_Weapon_Bonus_Delta_X1#Physical"],hellfirePassiveDisplay,hellfirePassiveLink,setPool=[["Cain's Fate",0],["Bastions of Will",0],["Aughild's Victory",0],["Aughild's Authority",0],["Guardian's Contingency",0],["Immortal King's Call",0],["Natalya's Vengeance",0],["Tal Rasha's Elements",0],["Sage's Plight",0],["Sage's Journey",0],["Born's Defiance",0],["Born's Command",0],["Unhallowed Essence",0],["Aughild's Authority",0],["Cain's Destiny",0],["Thorns of the Invoker",0],["Might of the Earth",0],["Firebird's Finery",0],["Guardian's Jeopardy",0],["Helltooth Harness",0],["Armor of Akkhan",0],["Wrath of the Wastes",0],["Raiment of the Jade Harvester",0],["Embodiment of the Marauder",0],["Raiment of a Thousand Storms",0],["The Legacy of Raekor",0],["Roland's Legacy",0],["Delsere's Magnum Opus",0],["Monkey King's Garb",0],["Asheara's Uniform",0],["Demon's Skin",0],["Demon's Hide",0],["Asheara's Vestments",0],["Thorns of the Invoker",0],["Delsere's Magnum Opus",0],["Blackthorne's Battlegear",0],["Inna's Mantra",0],["Vyr's Amazing Arcana",0],["Krelm's Buff Bulwark",0],["The Shadow's Mantle",0],["Endless Walk",0],["Legacy of Nightmares",0],["Hallowed Defenders",0],["Hallowed Protectors",0],["Manajuma's Way",0],["Zunimassa's Haunt",0],["Chantodo's Resolve",0],["Istvan's Paired Blades",0],["Shenlong's Spirit",0],["Bul-Kathos's Oath",0],["Danetta's Hatred",0],["Captain Crimson's Trimmings",0]],passiveBuffPool=[["Cull the Weak","Damage",.2],["Single Out","Crit Chance",.25],["Archery","Damage",.08],["Archery","Crit Damage",.5],["Archery","Crit Chance",.05],["Custom Engineering","Sentries",2],["Ambush","Damage",.4],["Ballistics","Damage",1],["Sharpshooter","Crit Chance",.04],["Grenadier","Damage",.1],["Steady Aim","Damage",.2]],skillBuffPool=[["Bait the Trap","Crit Chance",.1],["Wolf Companion","Damage",.3]],debuffPool=[["Marked for Death","Damage",.2]],gemPool=[["Zei's Stone of Vengeance","Item_Power_Passive#ItemPassive_Unique_Gem_012_x1"],["Bane of the Trapped","Item_Power_Passive#ItemPassive_Unique_Gem_002_x1"],["Gogok of the Swiftness","Item_Power_Passive#ItemPassive_Unique_Gem_008U_x1"]],realmList=["eu","us","kr"],backgroundImage,itemSetCount,constructedLink,itemQuality,isAncient,gemLink,start,end,panelLeft,panelRight,panelBottomLeft,panelBottomRight,panelRightAdditional,panelLeftAdditional,panelLeftWidth,panelRightWidth,panelBottomLeftHeight,panelBottomRightHeight,panelBottomLeftWidth,panelBottomRightWidth,panelRightAdditionalHeight,panelLeftAdditionalHeight,panelBottomLeftAdditional,panelBottomRightAdditional,panelBottomLeftAdditionalHeight,panelBottomRightAdditionalHeight,itemWrapper,charBgWrapper,target,childElements,parentElement,input,i,j,k,m,results,cdr,resRed,dmgRedMelee,dmgRedRanged,eliteDmg,eliteDmgRed,areaDmg,fireDmg,coldDmg,lightningDmg,physicalDmg,poisonDmg,goldPickUp,maxHealth,atkSpd,saveArr=[],saveArray=[],combined,string,calc,saveValues=[],skilldmgArray=[],skills=[],skillsDesc=[],heroes=[],passives=[],passivesDesc=[],stats=[],paragon=[],specialPassive=[],base=[],style=[],shoulders=[],helmet=[],torso=[],hands=[],feet=[],ringLeft=[],ringRight=[],bracers=[],legs=[],items=[],mainHand=[],offHand=[],belt=[],neck=[],additionalStatsOffensive=[],additionalStatsDefensive=[],minDmgCalc,maxDmgCalc,primaryStats={life:{name:"Life"},toughness:{name:"Toughness"},dexterity:{name:"Dexterity"},strength:{name:"Strength"},intelligence:{name:"Intelligence"},vitality:{name:"Vitality"},armor:{name:"Armor"},damageIncrease:{name:"Damage Increase"},healing:{name:"Healing"}},runeType,runeMap={a:{position:"49%",key:"a"},b:{position:"97%",key:"b"},c:{position:"73",key:"c"},d:{position:"49%",key:"d"},e:{position:"0",key:"e"}},d3Profile=React.createClass({displayName:"d3Profile",getInitialState:function(){var a;return a=localStorage.getItem("realm")?localStorage.getItem("realm"):"eu",{debugMode:!0,skills:[],passives:[],stats:[],heroes:{},items:{},attributes:[],"class":"",name:"",level:"",paragon:"",helmItem:{},amuletItem:{},chestItem:{},bootsItem:{},glovesItem:{},shouldersItem:{},legsItem:{},bracersItem:{},mainItem:{},offItem:{},beltItem:{},ringItemLeft:{},ringItemRight:{},additionalStats:[],atkSpd:0,eliteDmg:0,eliteDmgRed:0,areaDmg:0,goldPickup:0,dmgRedMelee:0,dmgRedRanged:0,maxEleDmg:0,maxHealth:0,invalid:!1,setRing:!1,time:0,toggle:"",skillDescToggle:"",passiveDescToggle:"",paragonToggle:"",hellfire_clear:"",heroesDataUrl:"",heroDataUrl:"",itemUrl:"",panelAnimationComplete:!1,realm:a,paragonStats:{paragonCdr:{name:"Cooldown Reduction",value:0,increment:.2,max:10,unit:"%"},paragonResRed:{name:"Resource Reduction",value:0,increment:.2,max:10,unit:"%"},paragonAtkSpd:{name:"Attack Speed",value:0,increment:.2,max:10,unit:"%"},paragonCritChance:{name:"Crit Chance",value:0,increment:.1,max:5,unit:"%"},paragonCritDmg:{name:"Crit Damage",value:0,increment:1,max:50,unit:"%"},paragonAreaDmg:{name:"Area Damage",value:0,increment:1,max:50,unit:"%"},paragonResource:{name:"Primary Resource",value:0,increment:.5,max:25,unit:""},paragonResistAll:{name:"Resist All",value:0,increment:5,max:250,unit:""},paragonArmor:{name:"Armor",value:0,increment:.5,max:25,unit:"%"},paragonMaxHealth:{name:"Max Health",value:0,increment:.5,max:25,unit:"%"},paragonLifeOnHit:{name:"Life on Hit",value:0,increment:160.9,max:8046.3,unit:""}},battleTag:localStorage.getItem("battleTag"),apiKey:"?locale=en_GB&apikey=65d63bvh7spjgmce3gjq2mv5nzjfsggy",profile:".api.battle.net/d3/profile/",itemIconBase:"http://media.blizzard.com/d3/icons/items/large/",skillIconBase:"http://media.blizzard.com/d3/icons/skills/64/",itemToolTipBase:".api.battle.net/d3/data/"}},getData:function(a){return new Promise(function(b,c){var d=new XMLHttpRequest;d.open("GET",a,!0),d.onload=function(){200===d.status?b(d.response):c(Error(d.statusText))},d.send()})},loadHeroesList:function(a){var b,c=this;a&&(b="https://"+this.state.realm+this.state.profile.concat(a.replace(/#/g,"-"),"/",this.state.apiKey),this.getData(b).then(function(a){var b=JSON.parse(a);c.state.debugMode&&console.log(b),c.setState({heroes:b})}))},loadHeroData:function(a){var b,c=this;a&&(b="https://"+this.state.realm+this.state.profile.concat(this.state.battleTag.replace(/#/g,"-"),"/hero/",a,this.state.apiKey),this.getData(b).then(function(a){var b=JSON.parse(a);c.state.debugMode&&console.log(b),c.setState({generalStats:{name:{name:"Name",value:b.name},id:{name:"Id",value:b.id},"class":{name:"Class",value:b["class"]},level:{name:"Level",value:b.level},paragonLevel:{name:"Paragon Level",value:b.paragonLevel},lastUpdated:{name:"Last updated on",value:b["last-updated"]}},items:b.items,stats:b.stats,kanai:b.legendaryPowers}),b.skills&&c.setState({skills:b.skills.active,passives:b.skills.passive})}).then(function(){c.getItemData()}))},loadItemData:function(a){var b=this,c="https://"+this.state.realm+this.state.itemToolTipBase.concat(a,this.state.apiKey);this.getData(c).then(function(a){var c=JSON.parse(a);switch(b.state.debugMode&&console.log(c),c.type.id){case"GenericHelm":case"Helm":case"Helm_Barbarian":case"Helm_DemonHunter":case"Helm_WitchDoctor":case"Helm_Crusader":case"Helm_Wizard":case"Helm_Monk":case"VoodooMask":b.setState({helmItem:c});break;case"GenericShoulders":case"Shoulders":case"Shoulders_Barbarian":case"Shoulders_DemonHunter":case"Shoulders_WitchDoctor":case"Shoulders_Crusader":case"Shoulders_Wizard":case"Shoulders_Monk":b.setState({shouldersItem:c});break;case"Bracers":b.setState({bracersItem:c});break;case"ChestArmor":case"GenericChestArmor":case"ChestArmor_Barbarian":case"ChestArmor_DemonHunter":case"ChestArmor_WitchDoctor":case"ChestArmor_Crusader":case"ChestArmor_Wizard":case"ChestArmor_Monk":case"Cloak":b.setState({chestItem:c});break;case"GenericLegs":case"Legs":case"Legs_Barbarian":case"Legs_DemonHunter":case"Legs_WitchDoctor":case"Legs_Crusader":case"Legs_Wizard":case"Legs_Monk":b.setState({legsItem:c});break;case"GenericBoots":case"Boots":case"Boots_Barbarian":case"Boots_DemonHunter":case"Boots_WitchDoctor":case"Boots_Crusader":case"Boots_Wizard":case"Boots_Monk":b.setState({bootsItem:c});break;case"Polearm":case"Crossbow":case"Dagger":case"Sword":case"Sword2H":case"Mace":case"Axe":case"FistWeapon":case"CeremonialKnife":case"MightyWeapon1H":case"Flail2H":case"Flail1H":case"HandXbow":case"Bow2H":case"Bow":case"Wand":case"Staff":case"Staff2H":case"CeremonialDagger":case"MightyWeapon2H":case"Mace2H":b.setState({mainItem:c});break;case"GenericGloves":case"Gloves":case"Gloves_Barbarian":case"Gloves_DemonHunter":case"Gloves_WitchDoctor":case"Gloves_Crusader":case"Gloves_Wizard":case"Gloves_Monk":b.setState({glovesItem:c});break;case"Belt":case"GenericBelt":case"Belt_Barbarian":b.setState({beltItem:c});break;case"Amulet":b.setState({amuletItem:c})}})},loadItemDataWithProps:function(a,b){var c=this,d="https://"+this.state.realm+this.state.itemToolTipBase.concat(a,this.state.apiKey);this.getData(d).then(function(a){var d=JSON.parse(a);switch(c.state.debugMode&&console.log(d),d.type.id){case"Ring":b===!0?c.setState({ringItemLeft:d}):c.setState({ringItemRight:d});break;case"Quiver":case"CrusaderShield":case"Shield":case"Orb":case"Source":case"Mojo":c.setState({offItem:d});break;case"Dagger":case"Sword":case"Mace":case"Axe":case"FistWeapon":case"MightyWeapon1H":case"Flail1H":case"HandXbow":case"Bow":case"Wand":case"Staff":c.setState({offItem:d})}})},changeChar:function(a){this.loadHeroData(a)},changeBattleTag:function(a){this.loadHeroesList(a)},triggerStatCollector:function(){this.collectStats(),this.checkSetItems(),this.collectSkillDamage(),console.log("manual stat collector")},startStatCollectorRunner:function(){return this.state.panelAnimationComplete?(this.collectStats(),this.checkSetItems(),this.collectSkillDamage(),void console.log("automatic stat collector")):void console.log("waiting for animations")},componentDidMount:function(){var a,b=localStorage.getItem("battleTag");b&&this.loadHeroesList(b),setInterval(this.startStatCollectorRunner,3e3),setInterval(this.loadHeroesList(this.state.battleTag),this.props.pollInterval),setInterval(this.loadHeroData(this.state.selectedChar),this.props.pollInterval);for(a in this.state.paragonStats)this.state.paragonStats.hasOwnProperty(a)&&(localStorage.getItem(a)?this.state.paragonStats[a].value=parseInt(localStorage.getItem(a)):this.state.paragonStats[a].value=0);this.createRealmList(),panelLeft=ReactDOM.findDOMNode(this.refs.pl),panelRight=ReactDOM.findDOMNode(this.refs.pr),panelBottomLeft=ReactDOM.findDOMNode(this.refs.pbl),panelBottomRight=ReactDOM.findDOMNode(this.refs.pbr),panelRightAdditional=ReactDOM.findDOMNode(this.refs.pra),panelLeftAdditional=ReactDOM.findDOMNode(this.refs.pla),panelBottomLeftAdditional=ReactDOM.findDOMNode(this.refs.pbla),panelBottomRightAdditional=ReactDOM.findDOMNode(this.refs.pbra),itemWrapper=ReactDOM.findDOMNode(this.refs.items),charBgWrapper=ReactDOM.findDOMNode(this.refs.charbg)},setBattleTag:function(a){this.setState({setRing:!1,toggle:"hidden",paragonToggle:"hidden",skillDescToggle:"hidden",passiveDescToggle:"hidden"}),this.animatePanelsOut(),this.animateBonusPanelOut(panelRightAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelLeftAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelBottomLeftAdditional,document.documentElement.clientHeight,1),this.animateBonusPanelOut(panelBottomRightAdditional,document.documentElement.clientHeight/1.5,1),this.setState({battleTag:a.target.value},function(){this.changeBattleTag(this.state.battleTag)}),localStorage.setItem("battleTag",a.target.value)},setRealm:function(a){this.setState({setRing:!1,toggle:"hidden",paragonToggle:"hidden",skillDescToggle:"hidden",passiveDescToggle:"hidden"}),this.animatePanelsOut(),this.animateBonusPanelOut(panelRightAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelLeftAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelBottomLeftAdditional,document.documentElement.clientHeight,1),this.animateBonusPanelOut(panelBottomRightAdditional,document.documentElement.clientHeight/1.5,1),this.setState({realm:a.target.value},function(){this.changeBattleTag(this.state.battleTag)}),localStorage.setItem("realm",a.target.value)},setCharacterSelect:function(a){this.setState({selectedChar:a.target.value,panels:"visible",toggle:"hidden",paragonToggle:"hidden",skillDescToggle:"hidden",passiveDescToggle:"hidden"}),this.changeChar(a.target.value),this.state.heroes.code?this.setState({invalid:!0}):this.setState({invalid:!1}),this.animatePanelsOut(),setTimeout(this.animatePanelsIn,1e3),this.animateBonusPanelOut(panelRightAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelLeftAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelBottomLeftAdditional,document.documentElement.clientHeight,1),this.animateBonusPanelOut(panelBottomRightAdditional,document.documentElement.clientHeight/1.5,1)},animatePanelsIn:function(){this.setState({panelAnimationComplete:!1}),TweenLite.fromTo(panelLeft,2,{x:-1*panelLeftWidth,z:.01,delay:.5},{x:0,z:.01,visibility:"visible",delay:.5,ease:Back.easeOut.config(1.1),onComplete:function(){this.setState({panelAnimationComplete:!0}),TweenLite.to(itemWrapper,2,{delay:.5,opacity:1,visibility:"visible"}),TweenLite.to(charBgWrapper,2,{delay:.5,opacity:1,visibility:"visible"})}.bind(this)}),TweenLite.fromTo(panelRight,2,{x:panelRightWidth,z:.01,delay:.5},{x:0,ease:Back.easeOut.config(1.1),z:.01,visibility:"visible",delay:.5}),TweenLite.fromTo(panelBottomLeft,2,{x:-1*panelBottomLeftWidth,y:panelBottomLeftHeight,delay:.5},{x:0,y:0,ease:Back.easeOut.config(1.1),z:.01,visibility:"visible",delay:.5}),TweenLite.fromTo(panelBottomRight,2,{x:panelBottomRightWidth,y:panelBottomRightHeight,delay:.5},{x:0,y:0,ease:Back.easeOut.config(1.1),z:.01,visibility:"visible",delay:.5})},animatePanelsOut:function(){this.setState({panelAnimationComplete:!1}),panelLeftWidth=panelLeft.offsetWidth,panelRightWidth=panelRight.offsetWidth,panelBottomLeftHeight=panelBottomLeft.offsetHeight,panelBottomRightHeight=panelBottomRight.offsetHeight,panelBottomLeftWidth=panelBottomLeft.offsetWidth,panelBottomRightWidth=panelBottomRight.offsetWidth,TweenLite.to(itemWrapper,.25,{opacity:0}),TweenLite.to(charBgWrapper,.25,{opacity:0}),TweenLite.to(panelLeft,1,{x:-1*panelLeftWidth,z:.01,delay:.5,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)}),TweenLite.to(panelRight,1,{x:panelRightWidth,z:.01,delay:.5}),TweenLite.to(panelBottomLeft,1,{x:-1*panelBottomLeftWidth,y:panelBottomLeftHeight,delay:.5}),TweenLite.to(panelBottomRight,1,{x:panelBottomRightWidth,y:panelBottomRightHeight,delay:.5})},animateBonusPanelIn:function(a,b,c){TweenLite.to(a,1.5,{y:0,z:.01,visibility:"visible",ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0}),c===!0&&this.triggerStatCollector()}.bind(this)})},animateBonusPanelOut:function(a,b,c){TweenLite.to(a,1.5,{y:b*c,z:.01,ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)})},handleBonusStatsClick:function(){this.setState({panelAnimationComplete:!1}),panelRightAdditionalHeight=panelRightAdditional.offsetHeight,"visible"!==this.state.toggle?(this.animateBonusPanelIn(panelRightAdditional,panelRightAdditionalHeight,!0),this.setState({toggle:"visible"})):(this.animateBonusPanelOut(panelRightAdditional,panelRightAdditionalHeight),this.setState({toggle:"hidden"}))},handleParagonStatsClick:function(){this.checkParagon(),this.setState({panelAnimationComplete:!1}),panelLeftAdditionalHeight=panelLeftAdditional.offsetHeight,"visible"!==this.state.paragonToggle?(this.animateBonusPanelIn(panelLeftAdditional,panelLeftAdditionalHeight,!1),this.setState({paragonToggle:"visible"})):(this.animateBonusPanelOut(panelLeftAdditional,panelLeftAdditionalHeight),this.setState({paragonToggle:"hidden"}))},handleSkillDescClick:function(){this.setState({panelAnimationComplete:!1}),panelBottomLeftAdditionalHeight=panelBottomLeftAdditional.offsetHeight,"visible"!==this.state.skillDescToggle?(this.animateBonusPanelIn(panelBottomLeftAdditional,panelBottomLeftAdditionalHeight,!1),this.setState({skillDescToggle:"visible"})):(this.animateBonusPanelOut(panelBottomLeftAdditional,panelBottomLeftAdditionalHeight),this.setState({skillDescToggle:"hidden"}))},handlePassiveDescClick:function(){this.setState({panelAnimationComplete:!1}),panelBottomRightAdditionalHeight=panelBottomRightAdditional.offsetHeight,"visible"!==this.state.passiveDescToggle?(this.animateBonusPanelIn(panelBottomRightAdditional,panelBottomRightAdditionalHeight,!1),this.setState({passiveDescToggle:"visible"})):(this.animateBonusPanelOut(panelBottomRightAdditional,panelBottomRightAdditionalHeight),this.setState({passiveDescToggle:"hidden"}))},handleItemClick:function(a){if(this.setState({panelAnimationComplete:!1}),target=a.target,a.target.classList.contains("item"))for(childElements=target.parentNode.children,target.classList.contains("open")?(target.classList.remove("open"),TweenLite.fromTo(target,1,{width:450,height:500},{width:64,height:128,ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)})):(target.classList.add("open"),TweenLite.fromTo(target,1,{width:64,height:128},{width:450,height:500,ease:Back.easeOut.config(1.5),onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)})),i=0;i<childElements.length;i++)childElements[i].classList.contains("open")&&childElements[i]!==target&&(childElements[i].classList.remove("open"),TweenLite.fromTo(childElements[i],1,{width:450,height:500},{width:64,height:128,ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)}))},checkParagon:function(){for(var a in this.state.paragonStats)if(this.state.paragonStats.hasOwnProperty(a)){var b=this.refs[a].getDOMNode();this.state.paragonStats[a].value===this.state.paragonStats[a].max&&b.classList.add("maxed")}},handleParagon:function(a){target=a.target,parentElement=target.parentNode;for(var b in this.state.paragonStats)this.state.paragonStats.hasOwnProperty(b)&&(parentElement.classList.contains(b)&&(target.classList.contains("paragon-stat-increment")?this.state.paragonStats[b].value<this.state.paragonStats[b].max&&(this.state.paragonStats[b].value=Math.round(10*(this.state.paragonStats[b].value+this.state.paragonStats[b].increment))/10):target.classList.contains("paragon-stat-max")&&!target.classList.contains("maxed")?(target.classList.add("maxed"),this.state.paragonStats[b].value=this.state.paragonStats[b].max):target.classList.contains("paragon-stat-max")&&target.classList.contains("maxed")?(target.classList.remove("maxed"),this.state.paragonStats[b].value=0):this.state.paragonStats[b].value>0&&(this.state.paragonStats[b].value=Math.round(10*(this.state.paragonStats[b].value-this.state.paragonStats[b].increment))/10)),localStorage.setItem(b,this.state.paragonStats[b].value));this.triggerStatCollector()},getItemData:function(){"use strict";var a,b;if(this.setState({helmItem:{},amuletItem:{},chestItem:{},bootsItem:{},glovesItem:{},shouldersItem:{},legsItem:{},bracersItem:{},mainItem:{},offItem:{},beltItem:{},ringItemLeft:{},ringItemRight:{}}),this.state.items){var c=[this.state.items.neck,this.state.items.head,this.state.items.torso,this.state.items.feet,this.state.items.hands,this.state.items.shoulders,this.state.items.legs,this.state.items.bracers,this.state.items.mainHand,this.state.items.waist],d=[[this.state.items.leftFinger,"left"],[this.state.items.rightFinger,"right"],[this.state.items.offHand,null]];for(b=0;b<c.length;b++)c[b]&&(a=c[b].tooltipParams,this.loadItemData(a));for(b=0;b<d.length;b++)d[b][0]&&(a=d[b][0].tooltipParams,"left"===d[b][1]?this.loadItemDataWithProps(a,!0):this.loadItemDataWithProps(a,!1))}},skillDmgSanitize:function(a){calc=0,string="",combined="",saveArray.length=0;for(var b in a)a.hasOwnProperty(b)&&(string=b.toString().slice(4),parseFloat(b)&&(calc=parseFloat(b)*parseFloat(a[b])),0!==calc&&(combined+=string+" "+Math.round(1e4*calc)/100+"%<br>",saveArray.push(calc+" "+string)));return""!==combined?(this.setState({skillDmgRaw:saveArray}),combined):void 0},collectSetNoRingStats:function(){var a,b,c,d,e=[];if(this.state.items){var f=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(a=0;a<f.length;a++)if(f[a]&&f[a].set&&f[a].set.ranks){for(d=0;d<setPool.length;d++)for(f[a].set.name===setPool[d][0]&&setPool[d][1]++,b=0;b<f[a].set.ranks.length;b++)if(f[a].set.name===setPool[d][0]&&f[a].set.ranks[b].required<=setPool[d][1])for(c=0;c<statPool.length;c++)if(f[a].set.ranks[b].attributesRaw[statPool[c]]&&f[a].set.ranks[b].attributesRaw[statPool[c]].min)switch(results[c]=Math.round(1e3*f[a].set.ranks[b].attributesRaw[statPool[c]].min)/1e3,statPool[c]){case"Damage_Dealt_Percent_Bonus#Fire":fireDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Cold":coldDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Lightning":lightningDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Physical":physicalDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Poison":poisonDmg+=100*results[c];break;case"Power_Cooldown_Reduction_Percent_All":cdr*=1-results[c];break;case"Resource_Cost_Reduction_Percent_All":resRed*=1-results[c];break;case"Damage_Percent_Bonus_Vs_Elites":eliteDmg+=100*results[c];break;case"Damage_Percent_Reduction_From_Elites":eliteDmgRed+=100*results[c];break;case"Splash_Damage_Effect_Percent":areaDmg+=100*results[c];break;case"Gold_PickUp_Radius":goldPickUp+=results[c];break;case"Damage_Percent_Reduction_From_Melee":dmgRedMelee*=1-results[c];break;case"Damage_Percent_Reduction_From_Ranged":dmgRedRanged*=1-results[c];break;case"Hitpoints_Max_Percent_Bonus_Item":maxHealth+=100*results[c];break;case"Attacks_Per_Second_Percent":atkSpd+=results[c]}if(e.indexOf(f[a].set.name)>-1)continue;e.push(f[a].set.name)}}},collectSetRingStats:function(){var a,b,c,d,e=[];if(this.state.items){var f=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(a=0;a<f.length;a++)if(f[a]&&f[a].set&&f[a].set.ranks){for(d=0;d<setPool.length;d++)for(f[a].set.name===setPool[d][0]&&setPool[d][1]++,b=0;b<f[a].set.ranks.length;b++)if(f[a].set.name===setPool[d][0]&&f[a].set.ranks[b].required<=setPool[d][1]+1&&setPool[d][1]>=2)for(c=0;c<statPool.length;c++)if(f[a].set.ranks[b].attributesRaw[statPool[c]]&&f[a].set.ranks[b].attributesRaw[statPool[c]].min)switch(results[c]=Math.round(1e3*f[a].set.ranks[b].attributesRaw[statPool[c]].min)/1e3,statPool[c]){case"Damage_Dealt_Percent_Bonus#Fire":fireDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Cold":coldDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Lightning":lightningDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Physical":physicalDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Poison":poisonDmg+=100*results[c];break;case"Power_Cooldown_Reduction_Percent_All":cdr*=1-results[c];break;case"Resource_Cost_Reduction_Percent_All":resRed*=1-results[c];break;case"Damage_Percent_Bonus_Vs_Elites":eliteDmg+=100*results[c];break;case"Damage_Percent_Reduction_From_Elites":eliteDmgRed+=100*results[c];break;case"Splash_Damage_Effect_Percent":areaDmg+=100*results[c];break;case"Gold_PickUp_Radius":goldPickUp+=results[c];break;case"Damage_Percent_Reduction_From_Melee":dmgRedMelee*=1-results[c];break;case"Damage_Percent_Reduction_From_Ranged":dmgRedRanged*=1-results[c];break;case"Hitpoints_Max_Percent_Bonus_Item":maxHealth+=100*results[c];break;case"Attacks_Per_Second_Percent":atkSpd+=results[c]}if(e.indexOf(f[a].set.name)>-1)continue;e.push(f[a].set.name)}}},checkSetItems:function(){var a=[];if(this.state.items){var b=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(i=0;i<b.length;i++)a.push(b[i].name),a.indexOf("Ring of Royal Grandeur")>-1?this.collectSetRingStats():this.collectSetNoRingStats()}},collectSkillDamage:function(){var a,b,c,d;if(skilldmgArray.length=0,saveArr.length=0,saveValues.length=0,this.state.items){var e=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];if(this.state.generalStats&&this.state.skills&&this.state.skills.length>0){for(c=0;c<this.state.skills.length;c++)if(this.state.skills[c].skill)switch(this.state.generalStats["class"].name){case"demon-hunter":saveArr.push("Power_Damage_Percent_Bonus#DemonHunter_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"witch-doctor":saveArr.push("Power_Damage_Percent_Bonus#Witchdoctor_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"barbarian":saveArr.push("Power_Damage_Percent_Bonus#Barbarian_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"crusader":saveArr.push("Power_Damage_Percent_Bonus#Crusader_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"monk":saveArr.push("Power_Damage_Percent_Bonus#Monk_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"wizard":saveArr.push("Power_Damage_Percent_Bonus#Wizard_"+this.state.skills[c].skill.name.replace(/ /g,""))}for(a=0;a<e.length;a++)if(e[a]&&e[a].attributesRaw)for(b=0;b<saveArr.length;b++)e[a].attributesRaw[saveArr[b]]&&e[a].attributesRaw[saveArr[b]].min&&(results[b]=Math.round(1e3*e[a].attributesRaw[saveArr[b]].min)/1e3,Object.getOwnPropertyNames(e[a].attributesRaw[saveArr[b]]===saveArr[b])&&(saveValues.push(this.state.skills[b].skill.name+" "+Math.round(1e4*e[a].attributesRaw[saveArr[b]].min)/100+"%"),skilldmgArray.push(e[a].attributesRaw[saveArr[b]].min+this.state.skills[b].skill.name),d=skilldmgArray.reduce(function(a,b){return b in a?a[b]++:a[b]=1,a},{})))}}this.setState({skillDmg:this.skillDmgSanitize(d)})},collectStats:function(){var a,b;if(results=[],cdr=1,resRed=1,dmgRedMelee=1,dmgRedRanged=1,eliteDmg=0,eliteDmgRed=0,areaDmg=0,fireDmg=0,coldDmg=0,lightningDmg=0,physicalDmg=0,poisonDmg=0,goldPickUp=0,maxHealth=0,atkSpd=0,this.state.items){var c=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(a=0;a<c.length;a++)if(c[a]&&c[a].attributesRaw)for(b=0;b<statPool.length;b++)if(c[a].attributesRaw[statPool[b]]&&c[a].attributesRaw[statPool[b]].min)switch(results[b]=Math.round(1e3*c[a].attributesRaw[statPool[b]].min)/1e3,statPool[b]){case"Damage_Dealt_Percent_Bonus#Fire":fireDmg+=100*results[b];break;case"Damage_Dealt_Percent_Bonus#Cold":coldDmg+=100*results[b];break;case"Damage_Dealt_Percent_Bonus#Lightning":lightningDmg+=100*results[b];break;case"Damage_Dealt_Percent_Bonus#Physical":physicalDmg+=100*results[b];break;case"Damage_Dealt_Percent_Bonus#Poison":poisonDmg+=100*results[b];break;case"Power_Cooldown_Reduction_Percent_All":cdr*=1-results[b];break;case"Resource_Cost_Reduction_Percent_All":resRed*=1-results[b];break;case"Damage_Percent_Bonus_Vs_Elites":eliteDmg+=100*results[b];break;case"Damage_Percent_Reduction_From_Elites":eliteDmgRed+=100*results[b];break;case"Splash_Damage_Effect_Percent":areaDmg+=100*results[b];break;case"Gold_PickUp_Radius":goldPickUp+=results[b];break;case"Damage_Percent_Reduction_From_Melee":dmgRedMelee*=1-results[b];break;case"Damage_Percent_Reduction_From_Ranged":dmgRedRanged*=1-results[b];break;case"Hitpoints_Max_Percent_Bonus_Item":maxHealth+=100*results[b];break;case"Attacks_Per_Second_Percent":atkSpd+=results[b];break;default:console.log("default")}this.state.helmItem&&this.state.helmItem.gems&&this.state.helmItem.attributesRaw&&this.state.helmItem.gems[0].Hitpoints_Max_Percent_Bonus_Item&&(this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All&&this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier?cdr*=1-this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All.min-this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All.min*this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier.min:this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All&&!this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier&&(cdr*=1-this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All.min),this.state.helmItem.gems[0].attributesRaw.Hitpoints_Max_Percent_Bonus_Item&&this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier?maxHealth+=100*this.state.helmItem.gems[0].Hitpoints_Max_Percent_Bonus_Item.min+100*this.state.helmItem.gems[0].Hitpoints_Max_Percent_Bonus_Item.min*this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier.min:this.state.helmItem.gems[0].attributesRaw.Hitpoints_Max_Percent_Bonus_Item&&!this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier&&(maxHealth+=100*this.state.helmItem.gems[0].Hitpoints_Max_Percent_Bonus_Item.min));var d,e=[fireDmg,poisonDmg,lightningDmg,physicalDmg,coldDmg],f=e.reduce(function(a,b){return a>=b?a:b},-(1/0));switch(f){case fireDmg:d="Fire Damage Increase: "+Math.round(100*f)/100+"%";break;case coldDmg:d="Cold Damage Increase: "+Math.round(100*f)/100+"%";break;case physicalDmg:d="Physical Damage Increase: "+Math.round(100*f)/100+"%";break;case lightningDmg:d="Lightning Damage Increase: "+Math.round(100*f)/100+"%";break;case poisonDmg:d="Poison Damage Increase: "+Math.round(100*f)/100+"%"}0!==f?this.setState({maxEleDmg:d,maxEleDmgValue:f}):this.setState({maxEleDmg:"",maxEleDmgValue:0}),this.setState({customOffensiveStats:{cdrRed:{name:"Cooldown Reduction",value:cdr,modifier:this.state.paragonStats.paragonCdr.value,unit:"%"},resRed:{name:"Resource Cost Reduction",value:resRed,modifier:this.state.paragonStats.paragonResRed.value,unit:"%"},eliteDmg:{name:"Elite Damage Bonus",value:eliteDmg,modifier:0,unit:"%"},areaDmg:{name:"Area Damage Bonus",value:areaDmg,modifier:this.state.paragonStats.paragonAreaDmg.value,unit:"%"},atkSpd:{name:"Attack Speed Bonus",value:atkSpd,modifier:this.state.paragonStats.paragonAtkSpd.value,unit:""}},customDefensiveStats:{goldPickup:{name:"Gold Pick-up Range",value:goldPickUp,modifier:0,unit:" yards"},dmgRedMelee:{name:"Melee Damage Reduction",value:Math.round(100*(1-dmgRedMelee)*1e3)/1e3,
modifier:0,unit:"%"},dmgRedRanged:{name:"Ranged Damage Reduction",value:Math.round(100*(1-dmgRedRanged)*1e3)/1e3,modifier:0,unit:"%"},eliteDmgRed:{name:"Elite Damage Reduction",value:eliteDmgRed,modifier:0,unit:"%"},maxHealth:{name:"Max Health Bonus",value:maxHealth,modifier:this.state.paragonStats.paragonMaxHealth.value,unit:"%"}}})}},createRealmList:function(){var a=[];realmList.forEach(function(b){a.push(React.DOM.option({key:b,value:b},b.toUpperCase()))}),this.setState({realms:a})},normalizeMultiplicativeStat:function(a,b){return Math.round(100*(1-a+b/100)*100)/100},normalizeWeaponAttackSpeed:function(a,b,c,d){return d?Math.round(100*(c+c*(d+a+b/100)))/100:Math.round(100*(c+c*(a+b/100)))/100},render:function(){var a,b,c,d=this,e=this.state.skills,f=this.state.passives,g=this.state.stats,h=this.state.heroes,j=this.state.items,l=this.state.generalStats,n=this.state.amuletItem,o=this.state.mainItem,p=this.state.offItem,q=this.state.items,r=this.state.skillIconBase,s=this.state.itemIconBase,t=this.state.maxEleDmg,u=this.state.skillDmg,v=this.state.skillDmgRaw,w=0,x={secondaryResource:{name:"Secondary Resource",modifier:0,value:0,unit:""},fireResist:{name:"Fire Resist",modifier:this.state.paragonStats.paragonResistAll.value,value:0,unit:""},coldResist:{name:"Cold Resist",modifier:this.state.paragonStats.paragonResistAll.value,value:0,unit:""},lightningResist:{name:"Lightning Resist",modifier:this.state.paragonStats.paragonResistAll.value,value:0,unit:""},physicalResist:{name:"Physical Resist",modifier:this.state.paragonStats.paragonResistAll.value,value:0,unit:""},poisonResist:{name:"Poison Resist",modifier:this.state.paragonStats.paragonResistAll.value,value:0,unit:""},lifeOnHit:{name:"Life on Hit",modifier:this.state.paragonStats.paragonLifeOnHit.value,value:0,unit:""}},y={critChance:{name:"Critical Hit Chance",modifier:this.state.paragonStats.paragonCritChance.value,value:0,unit:"%"},critDamage:{name:"Critical Hit Damage",modifier:this.state.paragonStats.paragonCritDmg.value,value:0,unit:"%",errorCorrection:-100},primaryResource:{name:"Primary Resource",modifier:this.state.paragonStats.paragonResource.value,value:0,unit:"%"}},z={head:{itemData:this.state.helmItem,view:helmet},neck:{itemData:this.state.amuletItem,view:neck},torso:{itemData:this.state.chestItem,view:torso},feet:{itemData:this.state.bootsItem,view:feet},hands:{itemData:this.state.glovesItem,view:hands},shoulders:{itemData:this.state.shouldersItem,view:shoulders},legs:{itemData:this.state.legsItem,view:legs},bracers:{itemData:this.state.bracersItem,view:bracers},mainHand:{itemData:this.state.mainItem,view:mainHand},offHand:{itemData:this.state.offItem,view:offHand},leftFinger:{itemData:this.state.ringItemLeft,view:ringLeft},rightFinger:{itemData:this.state.ringItemRight,view:ringRight},waist:{itemData:this.state.beltItem,view:belt}},A=Object.assign(x,this.state.customDefensiveStats),B=Object.assign(y,this.state.customOffensiveStats);for(minDmgCalc=0,maxDmgCalc=0,additionalStatsOffensive=[],additionalStatsDefensive=[],skills=[],skillsDesc=[],heroes=[],passives=[],passivesDesc=[],stats=[],paragon=[],specialPassive=[],base=[],style=[],shoulders=[],helmet=[],torso=[],hands=[],feet=[],ringLeft=[],ringRight=[],bracers=[],legs=[],items=[],mainHand=[],offHand=[],belt=[],neck=[],m=0;m<setPool.length;m++)setPool[m][1]=0;for(b in z)if(z.hasOwnProperty(b))for(m=0;m<setPool.length;m++)z[b].itemData&&z[b].itemData.set&&z[b].itemData.set.name===setPool[m][0]&&setPool[m][1]++;backgroundImage=this.state.generalStats?{backgroundImage:"url(assets/images/"+this.state.generalStats["class"].value+".png)"}:{backgroundImage:"none"},h.heroes?(heroes.push(React.DOM.option({key:"heroes-list",value:"",style:{display:"none"}},"click to select hero")),h.heroes.forEach(function(a){heroes.push(React.DOM.option({key:"heroes-list"+a.id,value:a.id},"["+a["class"]+"] "+a.name+" (id: "+a.id+")"))})):h.code?heroes.push(React.DOM.option({key:"heroes-list-invalid",value:"",style:{display:"none"}},"invalid battleTag")):this.state.battleTag&&""!==this.state.battleTag?heroes.push(React.DOM.option({key:"heroes-list-loading",value:"",style:{display:"none"}},"loading herolist...")):heroes.push(React.DOM.option({key:"heroes-list-empty",value:"",style:{display:"none"}},"enter your battleTag in the field below"));for(var C in this.state.generalStats)if(this.state.generalStats.hasOwnProperty(C)){if(c="",c+=this.state.generalStats[C].value,"class"===C&&(c=this.state.generalStats[C].value.toString().replace(/-/g,"").charAt(0).toUpperCase()+this.state.generalStats[C].value.toString().replace(/-/g,"").slice(1).toLowerCase()),"lastUpdated"===C){var D=new Date(1e3*this.state.generalStats[C].value);c=D.toLocaleDateString()+" - "+D.toLocaleTimeString()}base.push(React.DOM.div({key:C},this.state.generalStats[C].name+": "+c))}if(e&&e.forEach(function(a){a.rune?(constructedLink=r.concat(a.skill.icon),a.rune.type===runeMap[a.rune.type].key&&(runeType={backgroundPosition:"0 "+runeMap[a.rune.type].position}),skills.push(React.DOM.div({key:a.skill.name+"-icon",className:"hasIcon"},a.skill.name," with ",a.rune.name,React.DOM.div({key:a.skill.name+"-icon-front",className:"icon-front",style:{backgroundImage:"url("+constructedLink+".png)"}}),React.DOM.div({key:a.rune.name+"-icon-back",className:"icon-back",style:runeType}))),skillsDesc.push(React.DOM.div({key:a.skill.name+"-description",className:"description"},React.DOM.div({key:a.skill.name+"-desc-icon",className:"desc-icon",style:{backgroundImage:"url("+constructedLink+".png)"}}),a.skill.name+" with "+a.rune.name,React.DOM.p({dangerouslySetInnerHTML:{__html:a.skill.description.replace(/\n/g,"<br/>")},key:a.skill.name+"-desc",className:"skill-desc"}),React.DOM.p({dangerouslySetInnerHTML:{__html:a.rune.description.replace(/\n/g,"<br/>")},key:a.rune.name+"-desc",className:"rune-desc"})))):a.skill&&(constructedLink=r.concat(a.skill.icon),skills.push(React.DOM.div({key:a.skill.name+"-icon",className:"hasIcon"},a.skill.name,React.DOM.div({key:a.skill.name+"-icon-front",className:"icon-front no-rune",style:{backgroundImage:"url("+constructedLink+".png)"}}))),skillsDesc.push(React.DOM.div({key:a.skill.name+"-description",className:"description"},React.DOM.div({key:a.skill.name+"-desc-icon",className:"desc-icon",style:{backgroundImage:"url("+constructedLink+".png)"}}),a.skill.name,React.DOM.p({dangerouslySetInnerHTML:{__html:a.skill.description.replace(/\n/g,"<br/>")},key:a.skill.name+"-desc",className:"skill-desc"}))))}),f&&f.forEach(function(a){a.skill&&(constructedLink=r.concat(a.skill.icon),passives.push(React.DOM.div({key:a.skill.name,className:"hasIcon"},a.skill.name,React.DOM.div({key:a.skill.name+"-icon",className:"icon",style:{backgroundImage:"url("+constructedLink+".png)"}}))),passivesDesc.push(React.DOM.div({key:a.skill.name+"-description",className:"description"},React.DOM.div({key:a.skill.name+"-desc-icon",className:"desc-icon",style:{backgroundImage:"url("+constructedLink+".png)"}}),a.skill.name,React.DOM.p({dangerouslySetInnerHTML:{__html:a.skill.description.replace(/\n/g,"<br/>")},key:a.skill.name+"-description-text",className:"passive-desc"}))))}),this.state.items)for(var E in z)if(z.hasOwnProperty(E))if(q&&q[E]){switch(constructedLink=s.concat(q[E].icon,".png"),j[E].displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;default:itemQuality="common"}if(z[E].itemData.attributesRaw)if(isAncient=z[E].itemData.attributesRaw.Ancient_Rank&&1===z[E].itemData.attributesRaw.Ancient_Rank.min?"ancient":"","mainHand"===E||"offHand"===E){if(z[E].itemData.type){var F="";F=z[E].itemData.type.twoHanded?"(2h)":"(1h)",z[E].view.push(React.DOM.li({key:"item-name",className:itemQuality+" name"},isAncient+" "+z[E].itemData.name+" "+F))}if(z[E].itemData.dps&&z[E].view.push(React.DOM.li({key:"dps",className:"dps"},z[E].itemData.dps.max.toString().substring(0,7)+" DPS")),z[E].itemData.minDamage&&z[E].itemData.maxDamage&&z[E].itemData.attributesRaw)for(i=0;i<weaponElementsMin.length;i++)z[E].itemData.attributesRaw[weaponElementsMin[i]]&&(z[E].itemData.attributesRaw[DamagePercentAll]&&!z[E].itemData.attributesRaw[DamageBonusMinPhysical]?(minDmgCalc=z[E].itemData.minDamage.max+z[E].itemData.attributesRaw[weaponElementsMin[i]].max+z[E].itemData.attributesRaw[weaponElementsMin[i]].max*z[E].itemData.attributesRaw[DamagePercentAll].max,maxDmgCalc=z[E].itemData.maxDamage.max+z[E].itemData.attributesRaw[weaponElementsMin[i]].max+z[E].itemData.attributesRaw[weaponElementsDelta[i]].max+(z[E].itemData.attributesRaw[weaponElementsMin[i]].max+z[E].itemData.attributesRaw[weaponElementsDelta[i]].max)*z[E].itemData.attributesRaw[DamagePercentAll].max,z[E].view.push(React.DOM.li({key:z[E].itemData.name+"raw-damage",className:"raw-damage"},Math.round(minDmgCalc)+" - "+Math.round(maxDmgCalc)+" Damage"))):z[E].itemData.attributesRaw[DamagePercentAll]||z[E].itemData.attributesRaw[DamageBonusMinPhysical]?(minDmgCalc=z[E].itemData.minDamage.max,maxDmgCalc=z[E].itemData.maxDamage.max,z[E].view.push(React.DOM.li({key:z[E].itemData.name+"raw-damage",className:"raw-damage"},Math.round(minDmgCalc)+" - "+Math.round(maxDmgCalc)+" Damage"))):(minDmgCalc=z[E].itemData.minDamage.max+z[E].itemData.attributesRaw[weaponElementsMin[i]].max,maxDmgCalc=z[E].itemData.maxDamage.max+z[E].itemData.attributesRaw[weaponElementsMin[i]].max+z[E].itemData.attributesRaw[weaponElementsDelta[i]].max,z[E].view.push(React.DOM.li({key:z[E].itemData.name+"raw-damage",className:"raw-damage"},Math.round(minDmgCalc)+" - "+Math.round(maxDmgCalc)+" Damage"))))}else z[E].view.push(React.DOM.li({key:"item-name",className:itemQuality+" name"},isAncient+" "+z[E].itemData.name));if(z[E].itemData.attributes&&(z[E].itemData.attributes.primary&&z[E].itemData.attributes.primary.forEach(function(a,b){z[E].view.push(React.DOM.li({key:"primary-stat-"+b,className:"primary"},a.text))}),z[E].itemData.attributes.secondary&&z[E].itemData.attributes.secondary.forEach(function(a,b){z[E].view.push(React.DOM.li({key:"secondary-stat-"+b,className:"secondary"},a.text))}),z[E].itemData.attributes.passive&&z[E].itemData.attributes.passive.forEach(function(a,b){z[E].view.push(React.DOM.li({key:"passive-stat-"+b,className:"passive"},a.text))})),z[E].itemData.set&&z[E].itemData.set.ranks)for(i=0;i<z[E].itemData.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)z[E].itemData.set.name===setPool[m][0]&&this.state.setRing?itemSetCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:z[E].itemData.set.name!==setPool[m][0]||this.state.setRing||(itemSetCount=setPool[m][1]);z[E].itemData.set.ranks[i].required===k&&z[E].itemData.set.ranks[i].required<=itemSetCount?z[E].itemData.set.ranks[i].attributes.primary.forEach(function(a){z[E].view.push(React.DOM.li({key:"set-"+z[E].itemData.set.name+"-primary-bonus-"+a.text,className:"set-bonus-"+k},a.text))}):z[E].itemData.set.ranks[i].required===k&&z[E].itemData.set.ranks[i].attributes.primary.forEach(function(a){z[E].view.push(React.DOM.li({key:"set-"+z[E].itemData.set.name+"-primary-bonus-"+a.text+"-inactive",className:"set-bonus-"+k+" inactive"},a.text))}),z[E].itemData.set.ranks[i].required===k&&z[E].itemData.set.ranks[i].required<=itemSetCount?z[E].itemData.set.ranks[i].attributes.secondary.forEach(function(a){z[E].view.push(React.DOM.li({key:"set-"+z[E].itemData.set.name+"-secondary bonus-"+a.text,className:"set-bonus-"+k},a.text))}):z[E].itemData.set.ranks[i].required===k&&z[E].itemData.set.ranks[i].attributes.secondary.forEach(function(a){z[E].view.push(React.DOM.li({key:"set-"+z[E].itemData.set.name+"-secondary bonus-"+a.text+"-inactive",className:"set-bonus-"+k+" inactive"},a.text))}),z[E].itemData.set.ranks[i].required===k&&z[E].itemData.set.ranks[i].required<=itemSetCount?z[E].itemData.set.ranks[i].attributes.passive.forEach(function(a){z[E].view.push(React.DOM.li({key:"set-"+z[E].itemData.set.name+"-passive bonus-"+a.text,className:"set-bonus-"+k},a.text))}):z[E].itemData.set.ranks[i].required===k&&z[E].itemData.set.ranks[i].attributes.passive.forEach(function(a){z[E].view.push(React.DOM.li({key:"set-"+z[E].itemData.set.name+"-passive bonus-"+a.text+"-inactive",className:"set-bonus-"+k+" inactive"},a.text))})}if(z[E].itemData.attributesRaw&&z[E].itemData.attributesRaw.Sockets)for(i=0;i<z[E].itemData.attributesRaw.Sockets.min;i++)z[E].itemData.gems[i]?(gemLink=s.concat(z[E].itemData.gems[0].item.icon,".png"),z[E].itemData.gems[i].attributesRaw.Jewel_Rank?z[E].view.push(React.DOM.li({key:"socket-"+i,className:"socket",style:{backgroundImage:"url("+gemLink+")"}},React.DOM.span({key:"socket-gem-level"+i,className:"gem-level"},z[E].itemData.gems[i].attributesRaw.Jewel_Rank.min))):z[E].view.push(React.DOM.li({key:"socket-"+i,className:"socket",style:{backgroundImage:"url("+gemLink+")"}})),z[E].itemData.gems[i].attributes.primary[0]&&z[E].view.push(React.DOM.li({key:"gem-passive-primary"+i,className:"gem-passive"},z[E].itemData.gems[i].attributes.primary[0].text)),z[E].itemData.gems[i].attributes.secondary[0]&&z[E].view.push(React.DOM.li({key:"gem-passive-secondary"+i,className:"gem-passive"},z[E].itemData.gems[i].attributes.secondary[0].text)),z[E].itemData.gems[i].attributes.passive[0]&&z[E].view.push(React.DOM.li({key:"gem-passive-secondary"+i,className:"gem-passive"},z[E].itemData.gems[i].attributes.passive[0].text))):z[E].view.push(React.DOM.li({key:"socket-"+i,className:"socket"}));items.push(React.DOM.div({key:E.toString(),className:"item "+isAncient+" "+itemQuality+" "+E,onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({className:"desc"},React.DOM.ul({className:"stats"},z[E].view))))}else items.push(React.DOM.div({key:E.toString(),className:"empty item "+E}));if(n.attributes&&this.state.generalStats&&"Hellfire Amulet"===n.name){switch(hellfirePassiveLink=n.attributes.passive[0].text.substring(9).replace(" passive.","").replace(/ /g,"").toLowerCase(),hellfirePassiveDisplay=n.attributes.passive[0].text.substring(9).replace(" passive.",""),this.state.generalStats["class"].value){case"demon-hunter":constructedLink=r.concat("demonhunter_passive_",hellfirePassiveLink);break;case"witch-doctor":constructedLink=r.concat("witchdoctor_passive_",hellfirePassiveLink);break;case"barbarian":constructedLink=r.concat("barbarian_passive_",hellfirePassiveLink);break;case"crusader":constructedLink=r.concat("crusader_passive_",hellfirePassiveLink);break;case"monk":constructedLink=r.concat("monk_passive_",hellfirePassiveLink);break;case"wizard":constructedLink=r.concat("wizard_passive_",hellfirePassiveLink);break;default:console.log("new class?")}specialPassive.push(React.DOM.div({key:hellfirePassiveDisplay,className:"hasIcon"},hellfirePassiveDisplay," (HA)",React.DOM.div({key:hellfirePassiveDisplay,className:"icon",style:{backgroundImage:"url("+constructedLink+".png)"}})))}for(var G in primaryStats)primaryStats.hasOwnProperty(G)&&(c="",g[G]>100&&(c+="life"===G?primaryStats[G].name+": "+Math.round(g[G]+g[G]*this.state.paragonStats.paragonMaxHealth.value/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."):"armor"===G?primaryStats[G].name+": "+Math.round(g[G]+g[G]*this.state.paragonStats.paragonArmor.value/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."):primaryStats[G].name+": "+Math.round(g[G]).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."),stats.push(React.DOM.div({key:G},c))));if(g){for(var H in B)if(B.hasOwnProperty(H)){if(c="",g[H])switch(B[H].name&&(c+=B[H].name,c+=": "),H){case"critChance":case"critDamage":c+=B[H].errorCorrection?Math.round(1e3*(100*g[H]+B[H].modifier+B[H].errorCorrection))/1e3+"%":Math.round(1e3*(100*g[H]+B[H].modifier))/1e3+"%";break;default:c+=B[H].modifier+g[H]}else if(B[H].value||B[H].modifier)switch(B[H].name&&(c+=B[H].name,c+=": "),H){case"resRed":case"cdrRed":c+=this.normalizeMultiplicativeStat(B[H].value,B[H].modifier)+B[H].unit;break;case"atkSpd":c+=this.normalizeWeaponAttackSpeed(B[H].value,B[H].modifier,o.attacksPerSecond?o.attacksPerSecond.max:0,p.attacksPerSecond?.15:0);break;default:c+=B[H].modifier+B[H].value+B[H].unit}additionalStatsOffensive.push(React.DOM.div({key:H,className:"bonusstat"},c))}t&&additionalStatsOffensive.push(React.DOM.div({key:"Elemental Bonus Damage Stat",className:"bonusstat"},t)),u&&additionalStatsOffensive.push(React.DOM.div({dangerouslySetInnerHTML:{__html:"Skill Damage: "+u},key:"Skill Damage Stat",className:"bonusstat"}))}if(g)for(var I in A)A.hasOwnProperty(I)&&(c="",g[I]?(A[I].name&&(c+=A[I].name,c+=": "),c+=A[I].modifier+g[I]):(A[I].value||A[I].modifier)&&(A[I].name&&(c+=A[I].name,c+=": "),c+=A[I].modifier+A[I].value+A[I].unit),additionalStatsDefensive.push(React.DOM.div({key:I,className:"bonusstat"},c)));for(a in this.state.paragonStats)this.state.paragonStats.hasOwnProperty(a)&&paragon.push(React.DOM.div({key:a,className:"paragon-stat "+a},this.state.paragonStats[a].name+" "+Math.round(10*this.state.paragonStats[a].value)/10+this.state.paragonStats[a].unit,React.DOM.span({className:"paragon-stat-increment",onClick:d.handleParagon},"+"),React.DOM.span({className:"paragon-stat-decrement",onClick:d.handleParagon},"-"),React.DOM.span({ref:a,className:"paragon-stat-max",onClick:d.handleParagon})));if(g&&g.critDamage&&g.critChance&&0!==minDmgCalc&&0!==maxDmgCalc&&this.state.generalStats){var J,K,L,M,N,O=.5*(minDmgCalc+maxDmgCalc),P=g.critChance+this.state.paragonStats.paragonCritChance.value/100,Q=g.critDamage-1+this.state.paragonStats.paragonCritDmg.value/100,R=P,S=Q,T=0,U=0,V=3,W=1,X=[];if(X.length=0,"demon-hunter"===l["class"].value||"monk"===l["class"].value?J=g.dexterity/100:"barbarian"===l["class"].value||"crusader"===l["class"].value?J=g.strength/100:"wizard"===l["class"].value||"witch-doctor"===l["class"].value?J=g.intelligence/100:(J=1,console.log("new class?")),K=(1+J)*O,this.state.skillDmgRaw)for(i=0;i<this.state.skillDmgRaw.length;i++)e.forEach(function(a){a.skill&&-1!==v[i].search(a.skill.name.toString())&&X.push([V,v[i]])});for(i=0;i<passiveBuffPool.length;i++)f.forEach(function(a){a.skill&&a.skill.name===passiveBuffPool[i][0]&&("Damage"===passiveBuffPool[i][1]&&(T+=passiveBuffPool[i][2]),"Crit Chance"===passiveBuffPool[i][1]&&(R+=passiveBuffPool[i][2]))});for(i=0;i<skillBuffPool.length;i++)e.forEach(function(a){a.skill&&a.rune?(a.skill.name===skillBuffPool[i][0]||a.rune.name===skillBuffPool[i][0])&&"Damage"===skillBuffPool[i][1]&&(T+=skillBuffPool[i][2]):a.skill&&a.skill.name===skillBuffPool[i][0]&&"Damage"===skillBuffPool[i][1]&&(T+=skillBuffPool[i][2])});this.state.maxEleDmgValue&&(U+=this.state.maxEleDmgValue/100),M=X.sort(),N=M[0]?M[0][0]*(1+parseFloat(M[0][1]))*(1+U):1,w=1,L=K*w*(R*S+1)*N*(1+T)*(1+W),L?stats.push(React.DOM.div({key:"dps"},"DPS: ",Math.round(K*w*(P*Q+1)).toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")," | EDPS: ",Math.round(L).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))):stats.push(React.DOM.div({key:"dps"},"DPS: ",Math.round(K*w*(P*Q+1)).toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")," | EDPS: ","Calculating EDPS.."))}return React.DOM.div({className:"d3-container"},React.DOM.div({className:"d3-char-bg",ref:"charbg",style:backgroundImage}),React.DOM.div({className:"d3-item-wrapper",ref:"items"},items),React.DOM.div({className:"d3-realm-wrapper"},"1 - Realm: ",React.DOM.select({className:"d3-realm",ref:"select",value:this.state.realm,onChange:this.setRealm},this.state.realms)),React.DOM.div({className:"d3-api-url"},"2 - Enter your BattleTag: ",React.DOM.input({value:this.state.battleTag,placeholder:"NAME#1234",onChange:this.setBattleTag})),React.DOM.div({className:"d3-char-wrapper"},"3 - Click below to select your hero: ",React.DOM.select({className:"d3-chars",ref:"select",value:this.state.selectedChar,onChange:this.setCharacterSelect},heroes)),React.DOM.div({className:"panel-left "+this.state.paragonToggle,ref:"pl"},"General",base,React.DOM.a({className:"button",onClick:this.handleParagonStatsClick},React.DOM.span({className:"button-text"},"show paragon"))),React.DOM.div({className:"panel-bottom-left "+this.state.skillDescToggle,title:"click to open detailed description",ref:"pbl"},"Skills",skills,React.DOM.a({className:"button",onClick:this.handleSkillDescClick},React.DOM.span({className:"button-text"},"show details"))),React.DOM.div({className:"panel-left-additional ",ref:"pla"},"Paragon Points: ",paragon,React.DOM.a({className:"button",onClick:this.handleParagonStatsClick,title:"click to close"},React.DOM.span({className:"button-text"},"close"))),React.DOM.div({className:"panel-bottom-left-desc "+this.state.skillDescToggle,ref:"pbla"},React.DOM.a({className:"button",onClick:this.handleSkillDescClick,title:"click to close"},React.DOM.span({className:"button-text"},"close")),skillsDesc),React.DOM.div({className:"panel-bottom-right "+this.state.passiveDescToggle,title:"click to open detailed description",ref:"pbr"},"Passives",passives,specialPassive,React.DOM.a({className:"button",onClick:this.handlePassiveDescClick},React.DOM.span({className:"button-text"},"show details"))),React.DOM.div({className:"panel-bottom-right-desc "+this.state.passiveDescToggle,ref:"pbra"},React.DOM.a({className:"button",onClick:this.handlePassiveDescClick,title:"click to close"},React.DOM.span({className:"button-text"},"close")),passivesDesc,"Note: your Hellfire Passive cannot be displayed here, courtesy of blizzard"),React.DOM.div({ref:"pr",className:"panel-right "+this.state.toggle},"Stats",stats,React.DOM.a({className:"button",onClick:this.handleBonusStatsClick,title:"click to show/hide more stats"},React.DOM.span({className:"button-text"},"show more"))),React.DOM.div({className:"panel-right-additional ",ref:"pra"},"Offensive Stats",additionalStatsOffensive,"Defensive Stats",additionalStatsDefensive,React.DOM.a({className:"button",onClick:this.handleBonusStatsClick,title:"click to show/hide more stats"},React.DOM.span({className:"button-text"},"show less"))))}});ReactDOM.render(React.createElement(d3Profile,{pollInterval:6e5}),document.querySelector(".d3-profile")),function(){var a=document.querySelector(".d3-bg"),b=function(){TweenLite.fromTo(a,3,{y:-100,z:.01},{y:0,z:.01})};b()}();