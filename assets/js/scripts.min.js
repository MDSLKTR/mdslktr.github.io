var statPool=["Damage_Dealt_Percent_Bonus#Fire","Damage_Dealt_Percent_Bonus#Physical","Damage_Dealt_Percent_Bonus#Cold","Damage_Dealt_Percent_Bonus#Poison","Damage_Dealt_Percent_Bonus#Lightning","Power_Cooldown_Reduction_Percent_All","Resource_Cost_Reduction_Percent_All","Damage_Percent_Bonus_Vs_Elites","Damage_Percent_Reduction_From_Elites","Splash_Damage_Effect_Percent","Gold_PickUp_Radius","Damage_Percent_Reduction_From_Melee","Damage_Percent_Reduction_From_Ranged","Hitpoints_Max_Percent_Bonus_Item","Attacks_Per_Second_Percent"],DamagePercentAll="Damage_Weapon_Percent_All",DamageBonusMinPhysical="Damage_Weapon_Bonus_Min_X1#Physical",weaponElementsMin=["Damage_Weapon_Min#Arcane","Damage_Weapon_Min#Fire","Damage_Weapon_Min#Lightning","Damage_Weapon_Min#Cold","Damage_Weapon_Min#Poison","Damage_Weapon_Bonus_Min_X1#Physical"],weaponElementsDelta=["Damage_Weapon_Delta#Arcane","Damage_Weapon_Delta#Fire","Damage_Weapon_Delta#Lightning","Damage_Weapon_Delta#Cold","Damage_Weapon_Delta#Poison","Damage_Weapon_Bonus_Delta_X1#Physical"],hellfirePassiveDisplay,hellfirePassiveLink,setPool=[["Cain's Fate",0],["Bastions of Will",0],["Aughild's Victory",0],["Aughild's Authority",0],["Guardian's Contingency",0],["Immortal King's Call",0],["Natalya's Vengeance",0],["Tal Rasha's Elements",0],["Sage's Plight",0],["Sage's Journey",0],["Born's Defiance",0],["Born's Command",0],["Unhallowed Essence",0],["Aughild's Authority",0],["Cain's Destiny",0],["Thorns of the Invoker",0],["Might of the Earth",0],["Firebird's Finery",0],["Guardian's Jeopardy",0],["Helltooth Harness",0],["Armor of Akkhan",0],["Wrath of the Wastes",0],["Raiment of the Jade Harvester",0],["Embodiment of the Marauder",0],["Raiment of a Thousand Storms",0],["The Legacy of Raekor",0],["Roland's Legacy",0],["Delsere's Magnum Opus",0],["Monkey King's Garb",0],["Asheara's Uniform",0],["Demon's Skin",0],["Demon's Hide",0],["Asheara's Vestments",0],["Thorns of the Invoker",0],["Delsere's Magnum Opus",0],["Blackthorne's Battlegear",0],["Inna's Mantra",0],["Vyr's Amazing Arcana",0],["Krelm's Buff Bulwark",0],["The Shadow's Mantle",0],["Endless Walk",0],["Legacy of Nightmares",0],["Hallowed Defenders",0],["Hallowed Protectors",0],["Manajuma's Way",0],["Zunimassa's Haunt",0],["Chantodo's Resolve",0],["Istvan's Paired Blades",0],["Shenlong's Spirit",0],["Bul-Kathos's Oath",0],["Danetta's Hatred",0],["Captain Crimson's Trimmings",0]],passiveBuffPool=[["Cull the Weak","Damage",.2],["Single Out","Crit Chance",.25],["Archery","Damage",.08],["Archery","Crit Damage",.5],["Archery","Crit Chance",.05],["Custom Engineering","Sentries",2],["Ambush","Damage",.4],["Ballistics","Damage",1],["Sharpshooter","Crit Chance",.04],["Grenadier","Damage",.1],["Steady Aim","Damage",.2]],skillBuffPool=[["Bait the Trap","Crit Chance",.1],["Wolf Companion","Damage",.3]],debuffPool=[["Marked for Death","Damage",.2]],gemPool=[["Zei's Stone of Vengeance","Item_Power_Passive#ItemPassive_Unique_Gem_012_x1"],["Bane of the Trapped","Item_Power_Passive#ItemPassive_Unique_Gem_002_x1"],["Gogok of the Swiftness","Item_Power_Passive#ItemPassive_Unique_Gem_008U_x1"]],realmList=["eu","us","kr"],backgroundImage,itemSetCount,constructedLink,itemQuality,isAncient,gemLink,start,end,panelLeft,panelRight,panelBottomLeft,panelBottomRight,panelRightAdditional,panelLeftAdditional,panelLeftWidth,panelRightWidth,panelBottomLeftHeight,panelBottomRightHeight,panelBottomLeftWidth,panelBottomRightWidth,panelRightAdditionalHeight,panelLeftAdditionalHeight,panelBottomLeftAdditional,panelBottomRightAdditional,panelBottomLeftAdditionalHeight,panelBottomRightAdditionalHeight,itemWrapper,charBgWrapper,target,childElements,parentElement,input,i,j,k,m,results,cdr,resRed,dmgRedMelee,dmgRedRanged,eliteDmg,eliteDmgRed,areaDmg,fireDmg,coldDmg,lightningDmg,physicalDmg,poisonDmg,goldPickUp,maxHealth,atkSpd,saveArr=[],saveArray=[],combined,string,calc,saveValues=[],skilldmgArray=[],skills=[],skillsDesc=[],heroes=[],passives=[],passivesDesc=[],stats=[],paragon=[],specialPassive=[],base=[],style=[],shoulders=[],helmet=[],torso=[],hands=[],feet=[],ringLeft=[],ringRight=[],bracers=[],legs=[],items=[],mainHand=[],offHand=[],belt=[],neck=[],additionalStatsOffensive=[],additionalStatsDefensive=[],calculatedAttackSpeed,minDmgCalc,maxDmgCalc,primaryStats={life:["Life",0],toughness:["Toughness",0],dexterity:["Dexterity",0],strength:["Strength",0],intelligence:["Intelligence",0],armor:["Armor",0],damageIncrease:["Damage Increase",0]},d3Profile=React.createClass({displayName:"d3Profile",getInitialState:function(){var a;return a=localStorage.getItem("realm")?localStorage.getItem("realm"):"eu",{debugMode:!1,skills:[],passives:[],stats:[],heroes:{},items:{},attributes:[],"class":"",name:"",level:"",paragon:"",helmItem:{},amuletItem:{},shouldersItem:{},bracersItem:{},chestItem:{},ringItemLeft:{},ringItemRight:{},mainItem:{},offItem:{},legsItem:{},bootsItem:{},glovesItem:{},beltItem:{},additionalStats:[],atkSpd:0,eliteDmg:0,eliteDmgRed:0,areaDmg:0,goldPickup:0,dmgRedMelee:0,dmgRedRanged:0,maxEleDmg:0,maxHealth:0,invalid:!1,setRing:!1,time:0,toggle:"",skillDescToggle:"",passiveDescToggle:"",paragonToggle:"",hellfire_clear:"",heroesDataUrl:"",heroDataUrl:"",itemUrl:"",panelAnimationComplete:!1,realm:a,paragonStats:{paragonCdr:["Cooldown Reduction",0,.2,10,"%"],paragonResRed:["Resource Reduction",0,.2,10,"%"],paragonAtkSpd:["Attack Speed",0,.2,10,"%"],paragonCritChance:["Crit Chance",0,.1,5,"%"],paragonCritDmg:["Crit Damage",0,1,50,"%"],paragonAreaDmg:["Area Damage",0,1,50,"%"],paragonResource:["Primary Resource",0,.5,25,""],paragonResistAll:["Resist All",0,5,250,""],paragonArmor:["Armor",0,.5,25,"%"],paragonMaxHealth:["Max Health",0,.5,25,"%"]},battleTag:localStorage.getItem("battleTag"),apiKey:"?locale=en_GB&apikey=65d63bvh7spjgmce3gjq2mv5nzjfsggy",profile:".api.battle.net/d3/profile/",itemIconBase:"http://media.blizzard.com/d3/icons/items/large/",skillIconBase:"http://media.blizzard.com/d3/icons/skills/64/",itemToolTipBase:".api.battle.net/d3/data/"}},getData:function(a){return new Promise(function(b,c){var d=new XMLHttpRequest;d.open("GET",a,!0),d.onload=function(){200===d.status?b(d.response):c(Error(d.statusText))},d.send()})},loadHeroesList:function(a){var b,c=this;a&&(b="https://"+this.state.realm+this.state.profile.concat(a.replace(/#/g,"-"),"/",this.state.apiKey),this.getData(b).then(function(a){var b=JSON.parse(a);c.state.debugMode&&console.log(b),c.setState({heroes:b})}))},loadHeroData:function(a){var b,c=this;a&&(b="https://"+this.state.realm+this.state.profile.concat(this.state.battleTag.replace(/#/g,"-"),"/hero/",a,this.state.apiKey),this.getData(b).then(function(a){var b=JSON.parse(a);c.state.debugMode&&console.log(b),c.setState({name:b.name,id:b.id,"class":b["class"],level:b.level,paragon:b.paragonLevel,stats:b.stats,items:b.items,time:b["last-updated"]}),b.skills&&c.setState({skills:b.skills.active,passives:b.skills.passive})}).then(function(){c.getItemData()}))},loadItemData:function(a){var b=this,c="https://"+this.state.realm+this.state.itemToolTipBase.concat(a,this.state.apiKey);this.getData(c).then(function(a){var c=JSON.parse(a);switch(b.state.debugMode&&console.log(c),c.type.id){case"GenericHelm":case"Helm":case"Helm_Barbarian":case"Helm_DemonHunter":case"Helm_WitchDoctor":case"Helm_Crusader":case"Helm_Wizard":case"Helm_Monk":case"VoodooMask":b.setState({helmItem:c});break;case"GenericShoulders":case"Shoulders":case"Shoulders_Barbarian":case"Shoulders_DemonHunter":case"Shoulders_WitchDoctor":case"Shoulders_Crusader":case"Shoulders_Wizard":case"Shoulders_Monk":b.setState({shouldersItem:c});break;case"Bracers":b.setState({bracersItem:c});break;case"ChestArmor":case"GenericChestArmor":case"ChestArmor_Barbarian":case"ChestArmor_DemonHunter":case"ChestArmor_WitchDoctor":case"ChestArmor_Crusader":case"ChestArmor_Wizard":case"ChestArmor_Monk":case"Cloak":b.setState({chestItem:c});break;case"GenericLegs":case"Legs":case"Legs_Barbarian":case"Legs_DemonHunter":case"Legs_WitchDoctor":case"Legs_Crusader":case"Legs_Wizard":case"Legs_Monk":b.setState({legsItem:c});break;case"GenericBoots":case"Boots":case"Boots_Barbarian":case"Boots_DemonHunter":case"Boots_WitchDoctor":case"Boots_Crusader":case"Boots_Wizard":case"Boots_Monk":b.setState({bootsItem:c});break;case"Polearm":case"Crossbow":case"Dagger":case"Sword":case"Sword2H":case"Mace":case"Axe":case"FistWeapon":case"CeremonialKnife":case"MightyWeapon1H":case"Flail2H":case"Flail1H":case"HandXbow":case"Bow2H":case"Bow":case"Wand":case"Staff":case"Staff2H":case"CeremonialDagger":case"MightyWeapon2H":case"Mace2H":b.setState({mainItem:c});break;case"GenericGloves":case"Gloves":case"Gloves_Barbarian":case"Gloves_DemonHunter":case"Gloves_WitchDoctor":case"Gloves_Crusader":case"Gloves_Wizard":case"Gloves_Monk":b.setState({glovesItem:c});break;case"Belt":case"GenericBelt":case"Belt_Barbarian":b.setState({beltItem:c});break;case"Amulet":b.setState({amuletItem:c})}})},loadItemDataWithProps:function(a,b){var c=this,d="https://"+this.state.realm+this.state.itemToolTipBase.concat(a,this.state.apiKey);this.getData(d).then(function(a){var d=JSON.parse(a);switch(c.state.debugMode&&console.log(d),d.type.id){case"Ring":b===!0?c.setState({ringItemLeft:d}):c.setState({ringItemRight:d});break;case"Quiver":case"CrusaderShield":case"Shield":case"Orb":case"Source":case"Mojo":c.setState({offItem:d});break;case"Dagger":case"Sword":case"Mace":case"Axe":case"FistWeapon":case"MightyWeapon1H":case"Flail1H":case"HandXbow":case"Bow":case"Wand":case"Staff":c.setState({offItem:d})}})},changeChar:function(a){this.loadHeroData(a)},changeBattleTag:function(a){this.loadHeroesList(a)},triggerStatCollector:function(){this.collectStats(),this.checkSetItems(),this.collectSkillDamage(),console.log("manual stat collector")},startStatCollectorRunner:function(){return this.state.panelAnimationComplete?(this.collectStats(),this.checkSetItems(),this.collectSkillDamage(),void console.log("automatic stat collector")):void console.log("waiting for animations")},componentDidMount:function(){var a=localStorage.getItem("battleTag");a&&this.loadHeroesList(a),setInterval(this.startStatCollectorRunner,3e3),setInterval(this.loadHeroesList(this.state.battleTag),this.props.pollInterval),setInterval(this.loadHeroData(this.state.selectedChar),this.props.pollInterval);var b;for(b in this.state.paragonStats)this.state.paragonStats.hasOwnProperty(b)&&(localStorage.getItem(b)?this.state.paragonStats[b][1]=parseInt(localStorage.getItem(b)):this.state.paragonStats[b][1]=0);this.createRealmList(),panelLeft=this.refs.pl.getDOMNode(),panelRight=this.refs.pr.getDOMNode(),panelBottomLeft=this.refs.pbl.getDOMNode(),panelBottomRight=this.refs.pbr.getDOMNode(),panelRightAdditional=this.refs.pra.getDOMNode(),panelLeftAdditional=this.refs.pla.getDOMNode(),panelBottomLeftAdditional=this.refs.pbla.getDOMNode(),panelBottomRightAdditional=this.refs.pbra.getDOMNode(),itemWrapper=this.refs.items.getDOMNode(),charBgWrapper=this.refs.charbg.getDOMNode()},setBattleTag:function(a){this.setState({heroes:{},items:{},skills:[],passives:[],stats:[],attributes:[],"class":{},name:{},level:{},paragon:{},time:0,setRing:!1,toggle:"hidden",paragonToggle:"hidden",skillDescToggle:"hidden",passiveDescToggle:"hidden"}),this.animatePanelsOut(),this.animateBonusPanelOut(panelRightAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelLeftAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelBottomLeftAdditional,document.documentElement.clientHeight,1),this.animateBonusPanelOut(panelBottomRightAdditional,document.documentElement.clientHeight/1.5,1),this.setState({battleTag:a.target.value},function(){this.changeBattleTag(this.state.battleTag)}),localStorage.setItem("battleTag",a.target.value)},setRealm:function(a){this.setState({heroes:{},items:{},skills:[],passives:[],stats:[],attributes:[],"class":{},name:{},level:{},paragon:{},time:0,setRing:!1,toggle:"hidden",paragonToggle:"hidden",skillDescToggle:"hidden",passiveDescToggle:"hidden"}),this.animatePanelsOut(),this.animateBonusPanelOut(panelRightAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelLeftAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelBottomLeftAdditional,document.documentElement.clientHeight,1),this.animateBonusPanelOut(panelBottomRightAdditional,document.documentElement.clientHeight/1.5,1),this.setState({realm:a.target.value},function(){this.changeBattleTag(this.state.battleTag)}),localStorage.setItem("realm",a.target.value)},setCharacterSelect:function(a){console.log(a),this.setState({selectedChar:a.target.value,panels:"visible",toggle:"hidden",paragonToggle:"hidden",skillDescToggle:"hidden",passiveDescToggle:"hidden"}),this.changeChar(a.target.value),this.state.heroes.code?this.setState({invalid:!0}):this.setState({invalid:!1}),this.animatePanelsOut(),setTimeout(this.animatePanelsIn,1e3),this.animateBonusPanelOut(panelRightAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelLeftAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelBottomLeftAdditional,document.documentElement.clientHeight,1),this.animateBonusPanelOut(panelBottomRightAdditional,document.documentElement.clientHeight/1.5,1)},animatePanelsIn:function(){this.setState({panelAnimationComplete:!1}),TweenLite.fromTo(panelLeft,2,{x:-1*panelLeftWidth,z:.01,delay:.5},{x:0,z:.01,visibility:"visible",delay:.5,ease:Back.easeOut.config(1.1),onComplete:function(){this.setState({panelAnimationComplete:!0}),TweenLite.to(itemWrapper,2,{delay:.5,opacity:1,visibility:"visible"}),TweenLite.to(charBgWrapper,2,{delay:.5,opacity:1,visibility:"visible"})}.bind(this)}),TweenLite.fromTo(panelRight,2,{x:panelRightWidth,z:.01,delay:.5},{x:0,ease:Back.easeOut.config(1.1),z:.01,visibility:"visible",delay:.5}),TweenLite.fromTo(panelBottomLeft,2,{x:-1*panelBottomLeftWidth,y:panelBottomLeftHeight,delay:.5},{x:0,y:0,ease:Back.easeOut.config(1.1),z:.01,visibility:"visible",delay:.5}),TweenLite.fromTo(panelBottomRight,2,{x:panelBottomRightWidth,y:panelBottomRightHeight,delay:.5},{x:0,y:0,ease:Back.easeOut.config(1.1),z:.01,visibility:"visible",delay:.5})},animatePanelsOut:function(){this.setState({panelAnimationComplete:!1}),panelLeftWidth=panelLeft.offsetWidth,panelRightWidth=panelRight.offsetWidth,panelBottomLeftHeight=panelBottomLeft.offsetHeight,panelBottomRightHeight=panelBottomRight.offsetHeight,panelBottomLeftWidth=panelBottomLeft.offsetWidth,panelBottomRightWidth=panelBottomRight.offsetWidth,TweenLite.to(itemWrapper,.25,{opacity:0}),TweenLite.to(charBgWrapper,.25,{opacity:0}),TweenLite.to(panelLeft,1,{x:-1*panelLeftWidth,z:.01,delay:.5,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)}),TweenLite.to(panelRight,1,{x:panelRightWidth,z:.01,delay:.5}),TweenLite.to(panelBottomLeft,1,{x:-1*panelBottomLeftWidth,y:panelBottomLeftHeight,delay:.5}),TweenLite.to(panelBottomRight,1,{x:panelBottomRightWidth,y:panelBottomRightHeight,delay:.5})},animateBonusPanelIn:function(a,b,c){TweenLite.to(a,1.5,{y:0,z:.01,visibility:"visible",ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0}),c===!0&&this.triggerStatCollector()}.bind(this)})},animateBonusPanelOut:function(a,b,c){TweenLite.to(a,1.5,{y:b*c,z:.01,ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)})},handleBonusStatsClick:function(){this.setState({panelAnimationComplete:!1}),panelRightAdditionalHeight=panelRightAdditional.offsetHeight,"visible"!==this.state.toggle?(this.animateBonusPanelIn(panelRightAdditional,panelRightAdditionalHeight,!0),this.setState({toggle:"visible"})):(this.animateBonusPanelOut(panelRightAdditional,panelRightAdditionalHeight),this.setState({toggle:"hidden"}))},handleParagonStatsClick:function(){this.checkParagon(),this.setState({panelAnimationComplete:!1}),panelLeftAdditionalHeight=panelLeftAdditional.offsetHeight,"visible"!==this.state.paragonToggle?(this.animateBonusPanelIn(panelLeftAdditional,panelLeftAdditionalHeight,!1),this.setState({paragonToggle:"visible"})):(this.animateBonusPanelOut(panelLeftAdditional,panelLeftAdditionalHeight),this.setState({paragonToggle:"hidden"}))},handleSkillDescClick:function(){this.setState({panelAnimationComplete:!1}),panelBottomLeftAdditionalHeight=panelBottomLeftAdditional.offsetHeight,"visible"!==this.state.skillDescToggle?(this.animateBonusPanelIn(panelBottomLeftAdditional,panelBottomLeftAdditionalHeight,!1),this.setState({skillDescToggle:"visible"})):(this.animateBonusPanelOut(panelBottomLeftAdditional,panelBottomLeftAdditionalHeight),this.setState({skillDescToggle:"hidden"}))},handlePassiveDescClick:function(){this.setState({panelAnimationComplete:!1}),panelBottomRightAdditionalHeight=panelBottomRightAdditional.offsetHeight,"visible"!==this.state.passiveDescToggle?(this.animateBonusPanelIn(panelBottomRightAdditional,panelBottomRightAdditionalHeight,!1),this.setState({passiveDescToggle:"visible"})):(this.animateBonusPanelOut(panelBottomRightAdditional,panelBottomRightAdditionalHeight),this.setState({passiveDescToggle:"hidden"}))},handleItemClick:function(a){if(this.setState({panelAnimationComplete:!1}),target=a.target,a.target.classList.contains("item"))for(childElements=target.parentNode.children,target.classList.contains("open")?(target.classList.remove("open"),TweenLite.fromTo(target,1,{width:450,height:500},{width:64,height:128,ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)})):(target.classList.add("open"),TweenLite.fromTo(target,1,{width:64,height:128},{width:450,height:500,ease:Back.easeOut.config(1.5),onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)})),i=0;i<childElements.length;i++)childElements[i].classList.contains("open")&&childElements[i]!==target&&(childElements[i].classList.remove("open"),TweenLite.fromTo(childElements[i],1,{width:450,height:500},{width:64,height:128,ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)}))},checkParagon:function(){for(var a in this.state.paragonStats)if(this.state.paragonStats.hasOwnProperty(a)){var b=this.refs[a].getDOMNode();this.state.paragonStats[a][1]===this.state.paragonStats[a][3]&&b.classList.add("maxed")}},handleParagon:function(a){target=a.target,parentElement=target.parentNode;for(var b in this.state.paragonStats)this.state.paragonStats.hasOwnProperty(b)&&(console.log(this.state.paragonStats[b][2],b),parentElement.classList.contains(b)&&(target.classList.contains("paragon-stat-increment")?this.state.paragonStats[b][1]<this.state.paragonStats[b][3]&&(this.state.paragonStats[b][1]=Math.round(10*(this.state.paragonStats[b][1]+this.state.paragonStats[b][2]))/10):target.classList.contains("paragon-stat-max")&&!target.classList.contains("maxed")?(target.classList.add("maxed"),this.state.paragonStats[b][1]=this.state.paragonStats[b][3]):target.classList.contains("paragon-stat-max")&&target.classList.contains("maxed")?(target.classList.remove("maxed"),this.state.paragonStats[b][1]=0):this.state.paragonStats[b][1]>0&&(this.state.paragonStats[b][1]=Math.round(10*(this.state.paragonStats[b][1]-this.state.paragonStats[b][2]))/10)),localStorage.setItem(b,this.state.paragonStats[b][1]));this.triggerStatCollector()},getItemData:function(){"use strict";var a,b;if(this.setState({helmItem:{},amuletItem:{},chestItem:{},bootsItem:{},glovesItem:{},shouldersItem:{},legsItem:{},bracersItem:{},mainItem:{},offItem:{},beltItem:{},ringItemLeft:{},ringItemRight:{}}),this.state.items){var c=[this.state.items.neck,this.state.items.head,this.state.items.torso,this.state.items.feet,this.state.items.hands,this.state.items.shoulders,this.state.items.legs,this.state.items.bracers,this.state.items.mainHand,this.state.items.waist],d=[[this.state.items.leftFinger,"left"],[this.state.items.rightFinger,"right"],[this.state.items.offHand,null]];for(b=0;b<c.length;b++)c[b]&&(a=c[b].tooltipParams,this.loadItemData(a));for(b=0;b<d.length;b++)d[b][0]&&(a=d[b][0].tooltipParams,"left"===d[b][1]?this.loadItemDataWithProps(a,!0):this.loadItemDataWithProps(a,!1))}},skillDmgSanitize:function(a){calc=0,string="",combined="",saveArray.length=0;for(var b in a)a.hasOwnProperty(b)&&(string=b.toString().slice(4),parseFloat(b)&&(calc=parseFloat(b)*parseFloat(a[b])),0!==calc&&(combined+=string+" "+Math.round(1e4*calc)/100+"%<br>",saveArray.push(calc+" "+string)));return""!==combined?(this.setState({skillDmgRaw:saveArray}),combined):void 0},collectSetNoRingStats:function(){var a,b,c,d,e=[];if(this.state.items){var f=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(a=0;a<f.length;a++)if(f[a]&&f[a].set&&f[a].set.ranks){for(d=0;d<setPool.length;d++)for(f[a].set.name===setPool[d][0]&&setPool[d][1]++,b=0;b<f[a].set.ranks.length;b++)if(f[a].set.name===setPool[d][0]&&f[a].set.ranks[b].required<=setPool[d][1])for(c=0;c<statPool.length;c++)if(f[a].set.ranks[b].attributesRaw[statPool[c]]&&f[a].set.ranks[b].attributesRaw[statPool[c]].min)switch(results[c]=Math.round(1e3*f[a].set.ranks[b].attributesRaw[statPool[c]].min)/1e3,statPool[c]){case"Damage_Dealt_Percent_Bonus#Fire":fireDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Cold":coldDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Lightning":lightningDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Physical":physicalDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Poison":poisonDmg+=100*results[c];break;case"Power_Cooldown_Reduction_Percent_All":cdr*=1-results[c];break;case"Resource_Cost_Reduction_Percent_All":resRed*=1-results[c];break;case"Damage_Percent_Bonus_Vs_Elites":eliteDmg+=100*results[c];break;case"Damage_Percent_Reduction_From_Elites":eliteDmgRed+=100*results[c];break;case"Splash_Damage_Effect_Percent":areaDmg+=100*results[c];break;case"Gold_PickUp_Radius":goldPickUp+=results[c];break;case"Damage_Percent_Reduction_From_Melee":dmgRedMelee*=1-results[c];break;case"Damage_Percent_Reduction_From_Ranged":dmgRedRanged*=1-results[c];break;case"Hitpoints_Max_Percent_Bonus_Item":maxHealth+=100*results[c];break;case"Attacks_Per_Second_Percent":atkSpd+=results[c]}if(e.indexOf(f[a].set.name)>-1)continue;e.push(f[a].set.name)}}},collectSetRingStats:function(){var a,b,c,d,e=[];if(this.state.items){var f=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(a=0;a<f.length;a++)if(f[a]&&f[a].set&&f[a].set.ranks){for(d=0;d<setPool.length;d++)for(f[a].set.name===setPool[d][0]&&setPool[d][1]++,b=0;b<f[a].set.ranks.length;b++)if(f[a].set.name===setPool[d][0]&&f[a].set.ranks[b].required<=setPool[d][1]+1&&setPool[d][1]>=2)for(c=0;c<statPool.length;c++)if(f[a].set.ranks[b].attributesRaw[statPool[c]]&&f[a].set.ranks[b].attributesRaw[statPool[c]].min)switch(results[c]=Math.round(1e3*f[a].set.ranks[b].attributesRaw[statPool[c]].min)/1e3,statPool[c]){case"Damage_Dealt_Percent_Bonus#Fire":fireDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Cold":coldDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Lightning":lightningDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Physical":physicalDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Poison":poisonDmg+=100*results[c];break;case"Power_Cooldown_Reduction_Percent_All":cdr*=1-results[c];break;case"Resource_Cost_Reduction_Percent_All":resRed*=1-results[c];break;case"Damage_Percent_Bonus_Vs_Elites":eliteDmg+=100*results[c];break;case"Damage_Percent_Reduction_From_Elites":eliteDmgRed+=100*results[c];break;case"Splash_Damage_Effect_Percent":areaDmg+=100*results[c];break;case"Gold_PickUp_Radius":goldPickUp+=results[c];break;case"Damage_Percent_Reduction_From_Melee":dmgRedMelee*=1-results[c];break;case"Damage_Percent_Reduction_From_Ranged":dmgRedRanged*=1-results[c];break;case"Hitpoints_Max_Percent_Bonus_Item":maxHealth+=100*results[c];break;case"Attacks_Per_Second_Percent":atkSpd+=results[c]}if(e.indexOf(f[a].set.name)>-1)continue;e.push(f[a].set.name)}}},checkSetItems:function(){var a=[];if(this.state.items){var b=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(i=0;i<b.length;i++)a.push(b[i].name),a.indexOf("Ring of Royal Grandeur")>-1?this.collectSetRingStats():this.collectSetNoRingStats()}},collectSkillDamage:function(){var a,b,c,d;if(skilldmgArray.length=0,saveArr.length=0,saveValues.length=0,this.state.items){var e=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];if(this.state["class"]&&this.state.skills&&this.state.skills.length>0){for(c=0;c<this.state.skills.length;c++)if(this.state.skills[c].skill)switch(this.state["class"]){case"demon-hunter":saveArr.push("Power_Damage_Percent_Bonus#DemonHunter_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"witch-doctor":saveArr.push("Power_Damage_Percent_Bonus#Witchdoctor_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"barbarian":saveArr.push("Power_Damage_Percent_Bonus#Barbarian_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"crusader":saveArr.push("Power_Damage_Percent_Bonus#Crusader_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"monk":saveArr.push("Power_Damage_Percent_Bonus#Monk_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"wizard":saveArr.push("Power_Damage_Percent_Bonus#Wizard_"+this.state.skills[c].skill.name.replace(/ /g,""))}for(a=0;a<e.length;a++)if(e[a]&&e[a].attributesRaw)for(b=0;b<saveArr.length;b++)e[a].attributesRaw[saveArr[b]]&&e[a].attributesRaw[saveArr[b]].min&&(results[b]=Math.round(1e3*e[a].attributesRaw[saveArr[b]].min)/1e3,Object.getOwnPropertyNames(e[a].attributesRaw[saveArr[b]]===saveArr[b])&&(saveValues.push(this.state.skills[b].skill.name+" "+Math.round(1e4*e[a].attributesRaw[saveArr[b]].min)/100+"%"),skilldmgArray.push(e[a].attributesRaw[saveArr[b]].min+this.state.skills[b].skill.name),d=skilldmgArray.reduce(function(a,b){return b in a?a[b]++:a[b]=1,a},{})))}}this.setState({skillDmg:this.skillDmgSanitize(d)})},collectStats:function(){var a,b;if(results=[],cdr=1,resRed=1,dmgRedMelee=1,dmgRedRanged=1,eliteDmg=0,eliteDmgRed=0,areaDmg=0,fireDmg=0,coldDmg=0,lightningDmg=0,physicalDmg=0,poisonDmg=0,goldPickUp=0,maxHealth=0,atkSpd=0,this.state.items){var c=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(a=0;a<c.length;a++)if(c[a]&&c[a].attributesRaw)for(b=0;b<statPool.length;b++)if(c[a].attributesRaw[statPool[b]]&&c[a].attributesRaw[statPool[b]].min)switch(results[b]=Math.round(1e3*c[a].attributesRaw[statPool[b]].min)/1e3,statPool[b]){case"Damage_Dealt_Percent_Bonus#Fire":fireDmg+=100*results[b];break;case"Damage_Dealt_Percent_Bonus#Cold":coldDmg+=100*results[b];break;case"Damage_Dealt_Percent_Bonus#Lightning":lightningDmg+=100*results[b];break;case"Damage_Dealt_Percent_Bonus#Physical":physicalDmg+=100*results[b];break;case"Damage_Dealt_Percent_Bonus#Poison":poisonDmg+=100*results[b];break;case"Power_Cooldown_Reduction_Percent_All":cdr*=1-results[b];break;case"Resource_Cost_Reduction_Percent_All":resRed*=1-results[b];break;case"Damage_Percent_Bonus_Vs_Elites":eliteDmg+=100*results[b];break;case"Damage_Percent_Reduction_From_Elites":eliteDmgRed+=100*results[b];break;case"Splash_Damage_Effect_Percent":areaDmg+=100*results[b];break;case"Gold_PickUp_Radius":goldPickUp+=results[b];break;case"Damage_Percent_Reduction_From_Melee":dmgRedMelee*=1-results[b];break;case"Damage_Percent_Reduction_From_Ranged":dmgRedRanged*=1-results[b];break;case"Hitpoints_Max_Percent_Bonus_Item":maxHealth+=100*results[b];break;case"Attacks_Per_Second_Percent":atkSpd+=results[b];break;default:console.log("default")}this.state.helmItem&&this.state.helmItem.gems&&this.state.helmItem.gems[0]&&this.state.helmItem.attributesRaw&&(this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All&&this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier?cdr*=1-this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All.min-this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All.min*this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier.min:this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All&&!this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier&&(cdr*=1-this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All.min),this.state.helmItem.gems[0].attributesRaw.Hitpoints_Max_Percent_Bonus_Item&&this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier?maxHealth+=100*this.state.helmItem.gems[0].Hitpoints_Max_Percent_Bonus_Item.min+100*this.state.helmItem.gems[0].Hitpoints_Max_Percent_Bonus_Item.min*this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier.min:this.state.helmItem.gems[0].attributesRaw.Hitpoints_Max_Percent_Bonus_Item&&!this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier&&(maxHealth+=100*this.state.helmItem.gems[0].Hitpoints_Max_Percent_Bonus_Item.min));var d,e=[fireDmg,poisonDmg,lightningDmg,physicalDmg,coldDmg],f=e.reduce(function(a,b){return a>=b?a:b},-(1/0));switch(f){case fireDmg:d="Fire Damage Increase: "+Math.round(100*f)/100+"%";break;case coldDmg:d="Cold Damage Increase: "+Math.round(100*f)/100+"%";break;case physicalDmg:d="Physical Damage Increase: "+Math.round(100*f)/100+"%";break;case lightningDmg:d="Lightning Damage Increase: "+Math.round(100*f)/100+"%";break;case poisonDmg:d="Poison Damage Increase: "+Math.round(100*f)/100+"%"}0!==f?this.setState({maxEleDmg:d,maxEleDmgValue:f}):this.setState({maxEleDmg:"",maxEleDmgValue:0}),this.setState({cdrRed:cdr,resRed:resRed,eliteDmg:eliteDmg,eliteDmgRed:eliteDmgRed,areaDmg:areaDmg,goldPickup:goldPickUp,dmgRedMelee:dmgRedMelee,dmgRedRanged:dmgRedRanged,maxHealth:maxHealth,atkSpd:atkSpd})}},createRealmList:function(){var a=[];realmList.forEach(function(b){a.push(React.DOM.option({key:b,value:b},b.toUpperCase()))}),this.setState({realms:a})},render:function(){var a=this.state.skills,b=this.state.passives,c=this.state.stats,d=this.state.name,e=this.state.heroes,f=this.state.items,g=this.state["class"],h=this.state.level,j=this.state.paragon,l=this.state.amuletItem,n=(this.state.shouldersItem,this.state.helmItem,this.state.chestItem,this.state.glovesItem,this.state.bootsItem,this.state.bracersItem,this.state.legsItem,this.state.mainItem),o=this.state.offItem,p=(this.state.beltItem,this.state.amuletItem,this.state.ringItemLeft,this.state.ringItemRight,this.state.items),q=this.state.skillIconBase,r=this.state.itemIconBase,s=this.state.time,t=this.state.cdrRed,u=this.state.resRed,v=this.state.eliteDmg,w=this.state.eliteDmgRed,x=this.state.areaDmg,y=this.state.goldPickup,z=this.state.dmgRedMelee,A=this.state.dmgRedRanged,B=this.state.maxEleDmg,C=this.state.maxHealth,D=this.state.skillDmg,E=this.state.skillDmgRaw,F=this.state.atkSpd,G=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight],H=0;
for(minDmgCalc=0,maxDmgCalc=0,additionalStatsOffensive.length=0,additionalStatsDefensive.length=0,skills.length=0,skillsDesc.length=0,heroes.length=0,passives.length=0,passivesDesc.length=0,stats.length=0,paragon.length=0,specialPassive.length=0,base.length=0,style.length=0,shoulders.length=0,helmet.length=0,torso.length=0,hands.length=0,feet.length=0,ringLeft.length=0,ringRight.length=0,bracers.length=0,legs.length=0,items.length=0,mainHand.length=0,offHand.length=0,belt.length=0,neck.length=0,i=0;i<G.length;i++)for(m=0;m<setPool.length;m++)G[i]&&G[i].set&&G[i].set.name===setPool[m][0]&&setPool[m][1]++;if(backgroundImage=g?{backgroundImage:"url(assets/images/"+g+".png)"}:{backgroundImage:"none"},e.heroes?(heroes.push(React.DOM.option({key:e.heroes.key,value:"",style:{display:"none"}},"click to select hero")),e.heroes.forEach(function(a){heroes.push(React.DOM.option({key:e.heroes.key,value:a.id},"["+a["class"]+"] "+a.name+" (id: "+a.id+")"))})):e.code?heroes.push(React.DOM.option({key:e.code.key,value:"",style:{display:"none"}},"invalid battleTag")):null===this.state.battleTag||""===this.state.battleTag?heroes.push(React.DOM.option({value:"",style:{display:"none"}},"enter your battleTag in the field below")):heroes.push(React.DOM.option({value:"",style:{display:"none"}},"loading herolist...")),d&&g&&h){var I=g.toString().replace(/-/g,"").charAt(0).toUpperCase()+g.toString().replace(/-/g,"").slice(1).toLowerCase();base.push(React.DOM.div({key:d.key},"Name: ",d)),base.push(React.DOM.div({key:"class-name"},"Class: ",I)),base.push(React.DOM.div({key:h.key},"Level: ",h)),j&&base.push(React.DOM.div({key:j.key},"Paragon: ",j))}else base.push(React.DOM.div({key:"class-name"},"Class: "));if(s&&1e3*s!==0){var J=new Date(1e3*s),K=J.toLocaleDateString()+" - "+J.toLocaleTimeString();base.push(React.DOM.div({key:s,className:"last-updated"},"last-updated on: "+K))}a!==[]&&a.forEach(function(b){var c;if(b.rune){switch(constructedLink=q.concat(b.skill.icon),b.rune.type){case"a":c={backgroundPosition:"0 49%"};break;case"b":c={backgroundPosition:"0 97%"};break;case"c":c={backgroundPosition:"0 73%"};break;case"d":c={backgroundPosition:"0 0"};break;case"e":c={backgroundPosition:"0 25%"}}skills.push(React.DOM.div({key:a.key,className:"hasIcon"},b.skill.name," with ",b.rune.name,React.DOM.div({key:a.key,className:"icon-front",style:{backgroundImage:"url("+constructedLink+".png)"}}),React.DOM.div({key:a.key,className:"icon-back",style:c}))),skillsDesc.push(React.DOM.div({key:a.key,className:"description"},React.DOM.div({key:a.key,className:"desc-icon",style:{backgroundImage:"url("+constructedLink+".png)"}}),b.skill.name+" with "+b.rune.name,React.DOM.p({dangerouslySetInnerHTML:{__html:b.skill.description.replace(/\n/g,"<br/>")},key:a.key,className:"skill-desc"}),React.DOM.p({dangerouslySetInnerHTML:{__html:b.rune.description.replace(/\n/g,"<br/>")},key:a.key,className:"rune-desc"})))}else b.skill&&(constructedLink=q.concat(b.skill.icon),skills.push(React.DOM.div({key:a.key,className:"hasIcon"},b.skill.name,React.DOM.div({key:a.key,className:"icon-front no-rune",style:{backgroundImage:"url("+constructedLink+".png)"}}))),skillsDesc.push(React.DOM.div({key:a.key,className:"description"},React.DOM.div({key:a.key,className:"desc-icon",style:{backgroundImage:"url("+constructedLink+".png)"}}),b.skill.name,React.DOM.p({dangerouslySetInnerHTML:{__html:b.skill.description.replace(/\n/g,"<br/>")},key:a.key,className:"skill-desc"}))))}),b!==[]&&b.forEach(function(a){a.skill&&(constructedLink=q.concat(a.skill.icon),passives.push(React.DOM.div({key:b.key,className:"hasIcon"},a.skill.name,React.DOM.div({key:b.key,className:"icon",style:{backgroundImage:"url("+constructedLink+".png)"}}))),passivesDesc.push(React.DOM.div({key:b.key,className:"description"},React.DOM.div({key:b.key,className:"desc-icon",style:{backgroundImage:"url("+constructedLink+".png)"}}),a.skill.name,React.DOM.p({dangerouslySetInnerHTML:{__html:a.skill.description.replace(/\n/g,"<br/>")},key:b.key,className:"passive-desc"}))))});var L={head:[this.state.helmItem,helmet],torso:[this.state.chestItem,torso]};if(this.state.items)for(var M in L)if(L.hasOwnProperty(M))if(p&&p[M]){switch(constructedLink=r.concat(p[M].icon,".png"),f[M].displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(L[M][0].attributesRaw&&(L[M][0].attributesRaw.Ancient_Rank&&1===L[M][0].attributesRaw.Ancient_Rank.min?(isAncient="ancient",L[M][1].push(React.DOM.li({key:"item-name",className:itemQuality+" name"},isAncient+" "+L[M][0].name))):(isAncient="",L[M][1].push(React.DOM.li({key:"item-name",className:itemQuality+" name"},L[M][0].name)))),L[M][0].attributes&&(L[M][0].attributes.primary&&L[M][0].attributes.primary.forEach(function(a,b){L[M][1].push(React.DOM.li({key:"primary-stat-"+b,className:"primary"},a.text))}),L[M][0].attributes.secondary&&L[M][0].attributes.secondary.forEach(function(a,b){L[M][1].push(React.DOM.li({key:"secondary-stat-"+b,className:"secondary"},a.text))}),L[M][0].attributes.passive&&L[M][0].attributes.passive.forEach(function(a,b){L[M][1].push(React.DOM.li({key:"passive-stat-"+b,className:"passive"},a.text))})),L[M][0].set&&L[M][0].set.ranks)for(i=0;i<L[M][0].set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)L[M][0].set.name===setPool[m][0]&&this.state.setRing?itemSetCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:L[M][0].set.name!==setPool[m][0]||this.state.setRing||(itemSetCount=setPool[m][1]);L[M][0].set.ranks[i].required===k&&L[M][0].set.ranks[i].required<=itemSetCount?L[M][0].set.ranks[i].attributes.primary.forEach(function(a){L[M][1].push(React.DOM.li({key:"set-bonus-"+k,className:"set-bonus-"+k},a.text))}):L[M][0].set.ranks[i].required===k&&L[M][0].set.ranks[i].attributes.primary.forEach(function(a){L[M][1].push(React.DOM.li({key:"set-bonus-"+k+"-inactive",className:"set-bonus-"+k+" inactive"},a.text))}),L[M][0].set.ranks[i].required===k&&L[M][0].set.ranks[i].required<=itemSetCount?L[M][0].set.ranks[i].attributes.secondary.forEach(function(a){L[M][1].push(React.DOM.li({key:"set-bonus-"+k,className:"set-bonus-"+k},a.text))}):L[M][0].set.ranks[i].required===k&&L[M][0].set.ranks[i].attributes.secondary.forEach(function(a){L[M][1].push(React.DOM.li({key:"set-bonus-"+k+"-inactive",className:"set-bonus-"+k+" inactive"},a.text))}),L[M][0].set.ranks[i].required===k&&L[M][0].set.ranks[i].required<=itemSetCount?L[M][0].set.ranks[i].attributes.passive.forEach(function(a){L[M][1].push(React.DOM.li({key:"set-bonus-"+k,className:"set-bonus-"+k},a.text))}):L[M][0].set.ranks[i].required===k&&L[M][0].set.ranks[i].attributes.passive.forEach(function(a){L[M][1].push(React.DOM.li({key:"set-bonus-"+k+"-inactive",className:"set-bonus-"+k+" inactive"},a.text))})}L[M][0].attributesRaw&&L[M][0].attributesRaw.Sockets&&L[M][0].gems[0]&&(gemLink=r.concat(L[M][0].gems[0].item.icon,".png"),L[M][1].push(React.DOM.li({key:"socket",className:"socket",style:{backgroundImage:"url("+gemLink+")"}})),L[M][0].gems[0].attributes.primary&&L[M][0].gems[0].attributes.primary.forEach(function(a,b){L[M][1].push(React.DOM.li({key:"gem-passive-"+b,className:"gem-passive"},a.text))}),L[M][0].gems[0].attributes.secondary&&L[M][0].gems[0].attributes.secondary.forEach(function(a,b){L[M][1].push(React.DOM.li({key:"gem-passive-"+b,className:"gem-passive"},a.text))})),items.push(React.DOM.div({key:M.toString(),className:"item "+isAncient+" "+itemQuality+" "+M,onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({className:"desc"},React.DOM.ul({className:"stats"},L[M][1]))))}else items.push(React.DOM.div({key:M.toString(),className:"empty item head"}));if(l.attributes&&f&&l.attributes.passive[0]&&-1!==l.attributes.passive[0].text.search("passive")&&f.neck&&"Hellfire Amulet"===f.neck.name){switch(hellfirePassiveLink=l.attributes.passive[0].text.substring(9).replace(" passive.","").replace(/ /g,"").toLowerCase(),hellfirePassiveDisplay=l.attributes.passive[0].text.substring(9).replace(" passive.",""),g){case"demon-hunter":constructedLink=q.concat("demonhunter_passive_",hellfirePassiveLink);break;case"witch-doctor":constructedLink=q.concat("witchdoctor_passive_",hellfirePassiveLink);break;case"barbarian":constructedLink=q.concat("barbarian_passive_",hellfirePassiveLink);break;case"crusader":constructedLink=q.concat("crusader_passive_",hellfirePassiveLink);break;case"monk":constructedLink=q.concat("monk_passive_",hellfirePassiveLink);break;case"wizard":constructedLink=q.concat("wizard_passive_",hellfirePassiveLink);break;default:console.log("new class?")}specialPassive.push(React.DOM.div({key:l.key,className:"hasIcon"},hellfirePassiveDisplay," (HA)",React.DOM.div({key:l.key,className:"icon",style:{backgroundImage:"url("+constructedLink+".png)"}})))}if(this.state.id)for(var N in primaryStats)primaryStats.hasOwnProperty(N)&&0!==c[N]&&c[N]&&("life"===N?stats.push(React.DOM.div({key:N},primaryStats[N][0]+": ",Math.round(c[N]+c[N]*this.state.paragonStats.paragonMaxHealth[1]/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))):"armor"===N?stats.push(React.DOM.div({key:N},primaryStats[N][0]+": ",Math.round(c[N]+c[N]*this.state.paragonStats.paragonArmor[1]/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))):stats.push(React.DOM.div({key:N},primaryStats[N][0]+": ",Math.round(c[N]).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))));if(additionalStatsOffensive&&c&&(c.critChance?additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Critical Hit Chance: "+Math.round(1e3*(100*c.critChance+this.state.paragonStats.paragonCritChance[1]))/1e3+"%")):c.critChance||0===this.state.paragonStats.paragonCritChance[1]||additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Critical Hit Chance: "+Math.round(1e3*this.state.paragonStats.paragonCritChance[1])/1e3+"%")),c.critDamage?additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Critical Damage increase: "+Math.round(1e3*(100*c.critDamage+this.state.paragonStats.paragonCritDmg[1]-100))/1e3+"%")):c.critDamage||0===this.state.paragonStats.paragonCritDmg[1]||additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Critical Damage increase: "+Math.round(1e3*(this.state.paragonStats.paragonCritDmg[1]-100))/1e3+"%")),1!==t?additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Cooldown Reduction: "+Math.round(100*(1-t+this.state.paragonStats.paragonCdr[1]/100)*100)/100+"%")):0!==this.state.paragonStats.paragonCdr[1]&&additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Cooldown Reduction: "+this.state.paragonStats.paragonCdr[1]+"%")),1!==u?additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Resource Cost Reduction: "+Math.round(100*(1-u+this.state.paragonStats.paragonResRed[1]/100)*100)/100+"%")):0!==this.state.paragonStats.paragonResRed[1]&&additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Resource Cost Reduction: "+this.state.paragonStats.paragonResRed[1]+"%")),n.attacksPerSecond&&o.attacksPerSecond?(H=n.attacksPerSecond.max+n.attacksPerSecond.max*(.15+F+this.state.paragonStats.paragonAtkSpd[1]/100),additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Attacks per Second: "+Math.round(100*H)/100))):n.attacksPerSecond?(H=n.attacksPerSecond.max+n.attacksPerSecond.max*(F+this.state.paragonStats.paragonAtkSpd[1]/100),additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Attacks per Second: "+Math.round(100*H)/100))):n.attacksPerSecond||0===this.state.paragonStats.paragonAtkSpd[1]||(H=this.state.paragonStats.paragonAtkSpd[1]/100,additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Attacks per Second: "+Math.round(100*H)/100))),0!==v&&additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Bonus Damage to Elites: "+v+"%")),0!==x?additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Area Bonus Damage: "+(x+this.state.paragonStats.paragonAreaDmg[1])+"%")):0!==this.state.paragonStats.paragonAreaDmg[1]&&additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Area Bonus Damage: "+this.state.paragonStats.paragonAreaDmg[1]+"%")),0!==B&&additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},B)),c.primaryResource?additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Primary Resource: "+(c.primaryResource+this.state.paragonStats.paragonResource[1]))):0!==this.state.paragonStats.paragonResource[1]&&additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Primary Resource: "+this.state.paragonStats.paragonResource[1])),D&&additionalStatsOffensive.push(React.DOM.div({dangerouslySetInnerHTML:{__html:"Skill Damage: "+D},key:additionalStatsOffensive.key,className:"bonusstat"}))),c&&c.critDamage&&c.critChance&&H&&0!==minDmgCalc&&0!==maxDmgCalc){var O,P,Q,R,S,T=.5*(minDmgCalc+maxDmgCalc),U=c.critChance+this.state.paragonStats.paragonCritChance[1]/100,V=c.critDamage-1+this.state.paragonStats.paragonCritDmg[1]/100,W=U,X=V,Y=0,Z=0,$=3,_=1,aa=[];if(aa.length=0,"demon-hunter"===g||"monk"===g?O=c.dexterity/100:"barbarian"===g||"crusader"===g?O=c.strength/100:"wizard"===g||"witch-doctor"===g?O=c.intelligence/100:(O=1,console.log("new class?")),P=(1+O)*T,this.state.skillDmgRaw)for(i=0;i<this.state.skillDmgRaw.length;i++)a.forEach(function(a){a.skill&&-1!==E[i].search(a.skill.name.toString())&&aa.push([$,E[i]])});for(i=0;i<passiveBuffPool.length;i++)b.forEach(function(a){a.skill&&a.skill.name===passiveBuffPool[i][0]&&("Damage"===passiveBuffPool[i][1]&&(Y+=passiveBuffPool[i][2]),"Crit Chance"===passiveBuffPool[i][1]&&(W+=passiveBuffPool[i][2]))});for(i=0;i<skillBuffPool.length;i++)a.forEach(function(a){a.skill&&a.rune?(a.skill.name===skillBuffPool[i][0]||a.rune.name===skillBuffPool[i][0])&&"Damage"===skillBuffPool[i][1]&&(Y+=skillBuffPool[i][2]):a.skill&&a.skill.name===skillBuffPool[i][0]&&"Damage"===skillBuffPool[i][1]&&(Y+=skillBuffPool[i][2])});this.state.maxEleDmgValue&&(Z+=this.state.maxEleDmgValue/100),R=aa.sort(),S=R[0]?R[0][0]*(1+parseFloat(R[0][1]))*(1+Z):1,Q=P*H*(W*X+1)*S*(1+Y)*(1+_),Q?stats.push(React.DOM.div({key:"dps"},"DPS: ",Math.round(P*H*(U*V+1)).toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")," | EDPS: ",Math.round(Q).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))):stats.push(React.DOM.div({key:"dps"},"DPS: ",Math.round(P*H*(U*V+1)).toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")," | EDPS: ","Calculating EDPS.."))}additionalStatsDefensive&&c&&(c.secondaryResource&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Secondary Resource: "+c.secondaryResource)),c.physicalResist?additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Physical Resist: "+(c.physicalResist+this.state.paragonStats.paragonResistAll[1]))):0!==this.state.paragonStats.paragonResistAll[1]&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Physical Resist: "+this.state.paragonStats.paragonResistAll[1])),c.fireResist?additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Fire Resist: "+(c.fireResist+this.state.paragonStats.paragonResistAll[1]))):0!==this.state.paragonStats.paragonResistAll[1]&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Fire Resist: "+this.state.paragonStats.paragonResistAll[1])),c.coldResist?additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Cold Resist: "+(c.coldResist+this.state.paragonStats.paragonResistAll[1]))):0!==this.state.paragonStats.paragonResistAll[1]&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Cold Resist: "+this.state.paragonStats.paragonResistAll[1])),c.lightningResist?additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Lighting Resist: "+(c.lightningResist+this.state.paragonStats.paragonResistAll[1]))):0!==this.state.paragonStats.paragonResistAll[1]&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Lighting Resist: "+this.state.paragonStats.paragonResistAll[1])),c.poisonResist?additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Poison Resist: "+(c.poisonResist+this.state.paragonStats.paragonResistAll[1]))):0!==this.state.paragonStats.paragonResistAll[1]&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Poison Resist: "+this.state.paragonStats.paragonResistAll[1])),0!==y&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Gold Pick-up Radius: "+y+" yards")),1!==z&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Melee Damage Reduction: "+Math.round(100*(1-z)*1e3)/1e3+"%")),1!==A&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Ranged Damage Reduction: "+Math.round(100*(1-A)*1e3)/1e3+"%")),0!==w&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Damage Reduction from Elites: "+w+"%")),C?additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Bonus Max Health: "+(C+this.state.paragonStats.paragonMaxHealth[1])+"%")):0!==this.state.paragonStats.paragonMaxHealth[1]&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Bonus Max Health: "+this.state.paragonStats.paragonMaxHealth[1]+"%")));var ba=this;for(var ca in this.state.paragonStats)this.state.paragonStats.hasOwnProperty(ca)&&paragon.push(React.DOM.div({key:ca,className:"paragon-stat "+ca},this.state.paragonStats[ca][0]+" "+Math.round(10*this.state.paragonStats[ca][1])/10+this.state.paragonStats[ca][4],React.DOM.span({className:"paragon-stat-increment",onClick:ba.handleParagon},"+"),React.DOM.span({className:"paragon-stat-decrement",onClick:ba.handleParagon},"-"),React.DOM.span({ref:ca,className:"paragon-stat-max",onClick:ba.handleParagon})));return React.DOM.div({className:"d3-container"},React.DOM.div({className:"d3-char-bg",ref:"charbg",style:backgroundImage}),React.DOM.div({className:"d3-item-wrapper",ref:"items"},items),React.DOM.div({className:"d3-realm-wrapper"},"1 - Realm: ",React.DOM.select({className:"d3-realm",ref:"select",value:this.state.realm,onChange:this.setRealm},this.state.realms)),React.DOM.div({className:"d3-api-url"},"2 - Enter your BattleTag: ",React.DOM.input({value:this.state.battleTag,placeholder:"NAME#1234",onChange:this.setBattleTag})),React.DOM.div({className:"d3-char-wrapper"},"3 - Click below to select your hero: ",React.DOM.select({className:"d3-chars",ref:"select",value:this.state.selectedChar,onChange:this.setCharacterSelect},heroes)),React.DOM.div({className:"panel-left "+this.state.paragonToggle,ref:"pl"},"General",base,React.DOM.a({className:"button",onClick:this.handleParagonStatsClick},React.DOM.span({className:"button-text"},"show paragon"))),React.DOM.div({className:"panel-bottom-left "+this.state.skillDescToggle,title:"click to open detailed description",ref:"pbl"},"Skills",skills,React.DOM.a({className:"button",onClick:this.handleSkillDescClick},React.DOM.span({className:"button-text"},"show details"))),React.DOM.div({className:"panel-left-additional ",ref:"pla"},"Paragon Points: ",paragon,React.DOM.a({className:"button",onClick:this.handleParagonStatsClick,title:"click to close"},React.DOM.span({className:"button-text"},"close"))),React.DOM.div({className:"panel-bottom-left-desc "+this.state.skillDescToggle,ref:"pbla"},React.DOM.a({className:"button",onClick:this.handleSkillDescClick,title:"click to close"},React.DOM.span({className:"button-text"},"close")),skillsDesc),React.DOM.div({className:"panel-bottom-right "+this.state.passiveDescToggle,title:"click to open detailed description",ref:"pbr"},"Passives",passives,specialPassive,React.DOM.a({className:"button",onClick:this.handlePassiveDescClick},React.DOM.span({className:"button-text"},"show details"))),React.DOM.div({className:"panel-bottom-right-desc "+this.state.passiveDescToggle,ref:"pbra"},React.DOM.a({className:"button",onClick:this.handlePassiveDescClick,title:"click to close"},React.DOM.span({className:"button-text"},"close")),passivesDesc,"Note: your Hellfire Passive cannot be displayed here, courtesy of blizzard"),React.DOM.div({ref:"pr",className:"panel-right "+this.state.toggle},"Stats",stats,React.DOM.a({className:"button",onClick:this.handleBonusStatsClick,title:"click to show/hide more stats"},React.DOM.span({className:"button-text"},"show more"))),React.DOM.div({className:"panel-right-additional ",ref:"pra"},"Offensive Stats",additionalStatsOffensive,"Defensive Stats",additionalStatsDefensive,React.DOM.a({className:"button",onClick:this.handleBonusStatsClick,title:"click to show/hide more stats"},React.DOM.span({className:"button-text"},"show less"))))}});React.render(React.createElement(d3Profile,{pollInterval:6e5}),document.querySelector(".d3-profile")),function(){var a=document.querySelector(".d3-bg"),b=function(){TweenLite.fromTo(a,3,{y:-100,z:.01},{y:0,z:.01})};b()}();