var statPool=["Damage_Dealt_Percent_Bonus#Fire","Damage_Dealt_Percent_Bonus#Physical","Damage_Dealt_Percent_Bonus#Cold","Damage_Dealt_Percent_Bonus#Poison","Damage_Dealt_Percent_Bonus#Lightning","Power_Cooldown_Reduction_Percent_All","Resource_Cost_Reduction_Percent_All","Damage_Percent_Bonus_Vs_Elites","Damage_Percent_Reduction_From_Elites","Splash_Damage_Effect_Percent","Gold_PickUp_Radius","Damage_Percent_Reduction_From_Melee","Damage_Percent_Reduction_From_Ranged","Hitpoints_Max_Percent_Bonus_Item","Attacks_Per_Second_Percent"],DamagePercentAll="Damage_Weapon_Percent_All",DamageBonusMinPhysical="Damage_Weapon_Bonus_Min_X1#Physical",weaponElementsMin=["Damage_Weapon_Min#Arcane","Damage_Weapon_Min#Fire","Damage_Weapon_Min#Lightning","Damage_Weapon_Min#Cold","Damage_Weapon_Min#Poison","Damage_Weapon_Bonus_Min_X1#Physical"],weaponElementsDelta=["Damage_Weapon_Delta#Arcane","Damage_Weapon_Delta#Fire","Damage_Weapon_Delta#Lightning","Damage_Weapon_Delta#Cold","Damage_Weapon_Delta#Poison","Damage_Weapon_Bonus_Delta_X1#Physical"],hellfirePassiveDisplay,hellfirePassiveLink,setPool=[["Cain's Fate",0],["Bastions of Will",0],["Aughild's Victory",0],["Aughild's Authority",0],["Guardian's Contingency",0],["Immortal King's Call",0],["Natalya's Vengeance",0],["Tal Rasha's Elements",0],["Sage's Plight",0],["Sage's Journey",0],["Born's Defiance",0],["Born's Command",0],["Unhallowed Essence",0],["Aughild's Authority",0],["Cain's Destiny",0],["Thorns of the Invoker",0],["Might of the Earth",0],["Firebird's Finery",0],["Guardian's Jeopardy",0],["Helltooth Harness",0],["Armor of Akkhan",0],["Wrath of the Wastes",0],["Raiment of the Jade Harvester",0],["Embodiment of the Marauder",0],["Raiment of a Thousand Storms",0],["The Legacy of Raekor",0],["Roland's Legacy",0],["Delsere's Magnum Opus",0],["Monkey King's Garb",0],["Asheara's Uniform",0],["Demon's Skin",0],["Demon's Hide",0],["Asheara's Vestments",0],["Thorns of the Invoker",0],["Delsere's Magnum Opus",0],["Blackthorne's Battlegear",0],["Inna's Mantra",0],["Vyr's Amazing Arcana",0],["Krelm's Buff Bulwark",0],["The Shadow's Mantle",0],["Endless Walk",0],["Legacy of Nightmares",0],["Hallowed Defenders",0],["Hallowed Protectors",0],["Manajuma's Way",0],["Zunimassa's Haunt",0],["Chantodo's Resolve",0],["Istvan's Paired Blades",0],["Shenlong's Spirit",0],["Bul-Kathos's Oath",0],["Danetta's Hatred",0],["Captain Crimson's Trimmings",0]],passiveBuffPool=[["Cull the Weak","Damage",.2],["Single Out","Crit Chance",.25],["Archery","Damage",.08],["Archery","Crit Damage",.5],["Archery","Crit Chance",.05],["Custom Engineering","Sentries",2],["Ambush","Damage",.4],["Ballistics","Damage",1],["Sharpshooter","Crit Chance",.04],["Grenadier","Damage",.1],["Steady Aim","Damage",.2]],skillBuffPool=[["Bait the Trap","Crit Chance",.1],["Wolf Companion","Damage",.3]],debuffPool=[["Marked for Death","Damage",.2]],gemPool=[["Zei's Stone of Vengeance","Item_Power_Passive#ItemPassive_Unique_Gem_012_x1"],["Bane of the Trapped","Item_Power_Passive#ItemPassive_Unique_Gem_002_x1"],["Gogok of the Swiftness","Item_Power_Passive#ItemPassive_Unique_Gem_008U_x1"]],fetchHeroList,fetchHeroData,fetchHeroItems,updateHerolist,updateHeroData,updateHeroItems,helmCount,torsoCount,handsCount,feetCount,shouldersCount,legsCount,bracersCount,mainCount,offCount,beltCount,ringRCount,ringLCount,neckCount,constructedLink,itemQuality,isAncient,gemLink,start,end,panelLeft,panelRight,panelBottomLeft,panelBottomRight,panelRightAdditional,panelLeftAdditional,panelLeftWidth,panelRightWidth,panelBottomLeftHeight,panelBottomRightHeight,panelBottomLeftWidth,panelBottomRightWidth,panelRightAdditionalHeight,panelLeftAdditionalHeight,panelBottomLeftAdditional,panelBottomRightAdditional,panelBottomLeftAdditionalHeight,panelBottomRightAdditionalHeight,itemWrapper,charBgWrapper,target,childElements,parentElement,input,selectedChar,i,j,k,m,results,cdr,resRed,dmgRedMelee,dmgRedRanged,eliteDmg,eliteDmgRed,areaDmg,fireDmg,coldDmg,lightningDmg,physicalDmg,poisonDmg,goldPickUp,maxHealth,atkSpd,saveArr=[],saveArray=[],combined,string,calc,saveValues=[],skilldmgArray=[],skills=[],skillsDesc=[],heroes=[],realms=[],passives=[],passivesDesc=[],stats=[],paragon=[],specialPassive=[],base=[],style=[],shoulders=[],helmet=[],torso=[],hands=[],feet=[],ringLeft=[],ringRight=[],bracers=[],legs=[],items=[],mainHand=[],offHand=[],belt=[],neck=[],additionalStatsOffensive=[],additionalStatsDefensive=[],calculatedAttackSpeed,minDmgCalc,maxDmgCalc,pcdr,presred,patkspd,pcritdmg,pcritchance,pareadmg,presource,presistall,parmor,pmaxlife,DataWrapper=React.createClass({displayName:"DataWrapper",getInitialState:function(){var a;return a=localStorage.getItem("realm")?localStorage.getItem("realm"):"eu",{skills:[],passives:[],stats:[],heroes:{},items:{},attributes:[],"class":"",name:"",level:"",paragon:"",helmItem:{},amuletItem:{},shouldersItem:{},bracersItem:{},chestItem:{},ringItemLeft:{},ringItemRight:{},mainItem:{},offItem:{},legsItem:{},bootsItem:{},glovesItem:{},beltItem:{},additionalStats:[],atkSpd:0,eliteDmg:0,eliteDmgRed:0,areaDmg:0,goldPickup:0,dmgRedMelee:0,dmgRedRanged:0,maxEleDmg:0,maxHealth:0,paragonCdr:parseInt(localStorage.getItem("paragonCdr")),paragonResRed:parseInt(localStorage.getItem("paragonResRed")),paragonAtkSpd:parseInt(localStorage.getItem("paragonAtkSpd")),paragonCritDmg:parseInt(localStorage.getItem("paragonCritDmg")),paragonCritChance:parseInt(localStorage.getItem("paragonCritChance")),paragonAreaDmg:parseInt(localStorage.getItem("paragonAreaDmg")),paragonResource:parseInt(localStorage.getItem("paragonResource")),paragonResistAll:parseInt(localStorage.getItem("paragonResistAll")),paragonArmor:parseInt(localStorage.getItem("paragonArmor")),paragonMaxHealth:parseInt(localStorage.getItem("paragonMaxHealth")),invalid:!1,setRing:!1,time:0,toggle:"",skillDescToggle:"",passiveDescToggle:"",paragonToggle:"",hellfire_clear:"",heroesDataUrl:"",heroDataUrl:"",itemUrl:"",panelAnimationComplete:!1,realm:a,battleTag:localStorage.getItem("battleTag"),apiKey:"?locale=en_GB&apikey=65d63bvh7spjgmce3gjq2mv5nzjfsggy",profile:".api.battle.net/d3/profile/",itemIconBase:"http://media.blizzard.com/d3/icons/items/large/",skillIconBase:"http://media.blizzard.com/d3/icons/skills/64/",itemToolTipBase:".api.battle.net/d3/data/"}},loadHeroesData:function(){if(start=(new Date).getTime(),this.state.battleTag){this.setState({heroesDataUrl:"https://"+this.state.realm+this.state.profile.concat(this.state.battleTag.replace(/#/g,"-"),"/",this.state.apiKey)});var a=new XMLHttpRequest;a&&(a.open("GET",this.state.heroesDataUrl,!0),a.onreadystatechange=function(){if(4===a.readyState&&a.status>=200&&a.status<400){var b=JSON.parse(a.responseText);this.setState({heroes:b}),clearInterval(fetchHeroList),clearInterval(updateHerolist),end=(new Date).getTime(),console.log("Heroes Data fetched in",end-start,"ms")}}.bind(this),a.send())}},loadHeroData:function(){if(start=(new Date).getTime(),this.state.selected){this.setState({heroDataUrl:"https://"+this.state.realm+this.state.profile.concat(this.state.battleTag.replace(/#/g,"-"),"/hero/",this.state.selected,this.state.apiKey)});var a=new XMLHttpRequest;a&&(a.open("GET",this.state.heroDataUrl,!0),a.onreadystatechange=function(){if(4===a.readyState&&a.status>=200&&a.status<400){var b=JSON.parse(a.responseText);this.setState({name:b.name,"class":b["class"],level:b.level,paragon:b.paragonLevel,stats:b.stats,items:b.items,time:b["last-updated"]}),b.skills&&this.setState({skills:b.skills.active,passives:b.skills.passive}),clearInterval(fetchHeroData),clearInterval(updateHeroData),end=(new Date).getTime(),console.log("Hero Data fetched in",end-start,"ms")}}.bind(this),a.send())}},loadItemData:function(a){start=(new Date).getTime(),this.setState({itemUrl:"https://"+this.state.realm+this.state.itemToolTipBase.concat(a,this.state.apiKey)});var b=new XMLHttpRequest;b&&(b.open("GET",this.state.itemUrl,!0),b.onreadystatechange=function(){if(4===b.readyState&&b.status>=200&&b.status<400){var a=JSON.parse(b.responseText);switch(a.type.id){case"GenericHelm":case"Helm":case"Helm_Barbarian":case"Helm_DemonHunter":case"Helm_WitchDoctor":case"Helm_Crusader":case"Helm_Wizard":case"Helm_Monk":case"VoodooMask":this.setState({helmItem:a});break;case"GenericShoulders":case"Shoulders":case"Shoulders_Barbarian":case"Shoulders_DemonHunter":case"Shoulders_WitchDoctor":case"Shoulders_Crusader":case"Shoulders_Wizard":case"Shoulders_Monk":this.setState({shouldersItem:a});break;case"Bracers":this.setState({bracersItem:a});break;case"ChestArmor":case"GenericChestArmor":case"ChestArmor_Barbarian":case"ChestArmor_DemonHunter":case"ChestArmor_WitchDoctor":case"ChestArmor_Crusader":case"ChestArmor_Wizard":case"ChestArmor_Monk":case"Cloak":this.setState({chestItem:a});break;case"GenericLegs":case"Legs":case"Legs_Barbarian":case"Legs_DemonHunter":case"Legs_WitchDoctor":case"Legs_Crusader":case"Legs_Wizard":case"Legs_Monk":this.setState({legsItem:a});break;case"GenericBoots":case"Boots":case"Boots_Barbarian":case"Boots_DemonHunter":case"Boots_WitchDoctor":case"Boots_Crusader":case"Boots_Wizard":case"Boots_Monk":this.setState({bootsItem:a});break;case"Polearm":case"Crossbow":case"Dagger":case"Sword":case"Sword2H":case"Mace":case"Axe":case"FistWeapon":case"CeremonialKnife":case"MightyWeapon1H":case"Flail2H":case"Flail1H":case"HandXbow":case"Bow2H":case"Bow":case"Wand":case"Staff":case"Staff2H":case"CeremonialDagger":case"MightyWeapon2H":case"Mace2H":this.setState({mainItem:a});break;case"GenericGloves":case"Gloves":case"Gloves_Barbarian":case"Gloves_DemonHunter":case"Gloves_WitchDoctor":case"Gloves_Crusader":case"Gloves_Wizard":case"Gloves_Monk":this.setState({glovesItem:a});break;case"Belt":case"GenericBelt":case"Belt_Barbarian":this.setState({beltItem:a});break;case"Amulet":this.setState({amuletItem:a})}end=(new Date).getTime(),console.log("Item Data fetched in",end-start,"ms")}}.bind(this),b.send())},loadItemDataWithProps:function(a,b){start=(new Date).getTime(),this.setState({itemUrl:"https://"+this.state.realm+this.state.itemToolTipBase.concat(a,this.state.apiKey)});var c=new XMLHttpRequest;c&&(c.open("GET",this.state.itemUrl,!0),c.onreadystatechange=function(){if(4===c.readyState&&c.status>=200&&c.status<400){var a=JSON.parse(c.responseText);switch(a.type.id){case"Ring":b===!0?this.setState({ringItemLeft:a}):this.setState({ringItemRight:a});break;case"Quiver":case"CrusaderShield":case"Shield":case"Orb":case"Source":case"Mojo":this.setState({offItem:a});break;case"Dagger":case"Sword":case"Mace":case"Axe":case"FistWeapon":case"MightyWeapon1H":case"Flail1H":case"HandXbow":case"Bow":case"Wand":case"Staff":this.setState({offItem:a})}end=(new Date).getTime(),console.log("Item Data fetched in",end-start,"ms")}}.bind(this),c.send())},changeChar:function(){updateHeroData=setInterval(this.loadHeroData,500),updateHeroItems=setInterval(this.getItemData,1250)},changeBattleTag:function(){clearInterval(updateHerolist),updateHerolist=setInterval(this.loadHeroesData,1e3)},triggerStatCollector:function(){this.collectStats(),this.checkSetItems(),this.collectSkillDamage(),console.log("manual stat collector")},checkUpdates:function(){return this.state.panelAnimationComplete?(this.collectStats(),this.checkSetItems(),this.collectSkillDamage(),void console.log("automatic stat collector")):void console.log("waiting for animations")},initServiceWorker:function(){"serviceWorker"in navigator?(console.log("CLIENT: service worker registration in progress."),navigator.serviceWorker.register("service-worker.js").then(function(){console.log("CLIENT: service worker registration complete.")},function(){console.log("CLIENT: service worker registration failure.")})):console.log("CLIENT: service worker is not supported.")},componentDidMount:function(){this.initServiceWorker(),fetchHeroList=setInterval(this.loadHeroesData,1e3),fetchHeroData=setInterval(this.loadHeroData,1500),setInterval(this.checkUpdates,3e3),setInterval(this.loadHeroesData,this.props.pollInterval),setInterval(this.loadHeroData,this.props.pollInterval),setInterval(this.getItemData,this.props.pollInterval),parseInt(localStorage.getItem("paragonCdr"))||this.setState({paragonCdr:0}),parseInt(localStorage.getItem("paragonResRed"))||this.setState({paragonResRed:0}),parseInt(localStorage.getItem("paragonAtkSpd"))||this.setState({paragonAtkSpd:0}),parseInt(localStorage.getItem("paragonCritChance"))||this.setState({paragonCritChance:0}),parseInt(localStorage.getItem("paragonCritDmg"))||this.setState({paragonCritDmg:0}),parseInt(localStorage.getItem("paragonAreaDmg"))||this.setState({paragonAreaDmg:0}),parseInt(localStorage.getItem("paragonResource"))||this.setState({paragonResource:0}),parseInt(localStorage.getItem("paragonResistAll"))||this.setState({paragonResistAll:0}),parseInt(localStorage.getItem("paragonArmor"))||this.setState({paragonArmor:0}),parseInt(localStorage.getItem("paragonMaxHealth"))||this.setState({paragonMaxHealth:0}),panelLeft=this.refs.pl.getDOMNode(),panelRight=this.refs.pr.getDOMNode(),panelBottomLeft=this.refs.pbl.getDOMNode(),panelBottomRight=this.refs.pbr.getDOMNode(),panelRightAdditional=this.refs.pra.getDOMNode(),panelLeftAdditional=this.refs.pla.getDOMNode(),panelBottomLeftAdditional=this.refs.pbla.getDOMNode(),panelBottomRightAdditional=this.refs.pbra.getDOMNode(),itemWrapper=this.refs.items.getDOMNode(),charBgWrapper=this.refs.charbg.getDOMNode()},handleChange:function(a){input=a.target.value,this.setState({battleTag:input,heroes:{},items:{},skills:[],passives:[],stats:[],attributes:[],"class":{},name:{},level:{},paragon:{},time:0,setRing:!1,toggle:"hidden",paragonToggle:"hidden",skillDescToggle:"hidden",passiveDescToggle:"hidden"}),this.animatePanelsOut(),this.animateBonusPanelOut(panelRightAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelLeftAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelBottomLeftAdditional,document.documentElement.clientHeight,1),this.animateBonusPanelOut(panelBottomRightAdditional,document.documentElement.clientHeight/1.5,1),localStorage.setItem("battleTag",input),this.changeBattleTag()},setRealm:function(a){input=a.target.value,this.setState({realm:input,heroes:{},items:{},skills:[],passives:[],stats:[],attributes:[],"class":{},name:{},level:{},paragon:{},time:0,setRing:!1,toggle:"hidden",paragonToggle:"hidden",skillDescToggle:"hidden",passiveDescToggle:"hidden"}),this.animatePanelsOut(),this.animateBonusPanelOut(panelRightAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelLeftAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelBottomLeftAdditional,document.documentElement.clientHeight,1),this.animateBonusPanelOut(panelBottomRightAdditional,document.documentElement.clientHeight/1.5,1),localStorage.setItem("realm",input),this.changeBattleTag()},setSelect:function(){selectedChar=this.refs.select.getDOMNode().value,this.setState({selected:selectedChar,panels:"visible",toggle:"hidden",paragonToggle:"hidden",skillDescToggle:"hidden",passiveDescToggle:"hidden"}),this.changeChar(),this.state.heroes.code?this.setState({invalid:!0}):this.setState({invalid:!1}),this.animatePanelsOut(),setTimeout(this.animatePanelsIn,1e3),this.animateBonusPanelOut(panelRightAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelLeftAdditional,document.documentElement.clientHeight/1.5,-1),this.animateBonusPanelOut(panelBottomLeftAdditional,document.documentElement.clientHeight,1),this.animateBonusPanelOut(panelBottomRightAdditional,document.documentElement.clientHeight/1.5,1)},animatePanelsIn:function(){this.setState({panelAnimationComplete:!1}),TweenLite.fromTo(panelLeft,2,{x:-1*panelLeftWidth,z:.01,delay:.5},{x:0,z:.01,visibility:"visible",delay:.5,ease:Back.easeOut.config(1.1),onComplete:function(){this.setState({panelAnimationComplete:!0}),TweenLite.to(itemWrapper,2,{delay:.5,opacity:1,visibility:"visible"}),TweenLite.to(charBgWrapper,2,{delay:.5,opacity:1,visibility:"visible"})}.bind(this)}),TweenLite.fromTo(panelRight,2,{x:panelRightWidth,z:.01,delay:.5},{x:0,ease:Back.easeOut.config(1.1),z:.01,visibility:"visible",delay:.5}),TweenLite.fromTo(panelBottomLeft,2,{x:-1*panelBottomLeftWidth,y:panelBottomLeftHeight,delay:.5},{x:0,y:0,ease:Back.easeOut.config(1.1),z:.01,visibility:"visible",delay:.5}),TweenLite.fromTo(panelBottomRight,2,{x:panelBottomRightWidth,y:panelBottomRightHeight,delay:.5},{x:0,y:0,ease:Back.easeOut.config(1.1),z:.01,visibility:"visible",delay:.5})},animatePanelsOut:function(){this.setState({panelAnimationComplete:!1}),panelLeftWidth=panelLeft.offsetWidth,panelRightWidth=panelRight.offsetWidth,panelBottomLeftHeight=panelBottomLeft.offsetHeight,panelBottomRightHeight=panelBottomRight.offsetHeight,panelBottomLeftWidth=panelBottomLeft.offsetWidth,panelBottomRightWidth=panelBottomRight.offsetWidth,TweenLite.to(itemWrapper,.25,{opacity:0}),TweenLite.to(charBgWrapper,.25,{opacity:0}),TweenLite.to(panelLeft,1,{x:-1*panelLeftWidth,z:.01,delay:.5,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)}),TweenLite.to(panelRight,1,{x:panelRightWidth,z:.01,delay:.5}),TweenLite.to(panelBottomLeft,1,{x:-1*panelBottomLeftWidth,y:panelBottomLeftHeight,delay:.5}),TweenLite.to(panelBottomRight,1,{x:panelBottomRightWidth,y:panelBottomRightHeight,delay:.5})},animateBonusPanelIn:function(a,b,c){TweenLite.to(a,1.5,{y:0,z:.01,visibility:"visible",ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0}),c===!0&&this.triggerStatCollector()}.bind(this)})},animateBonusPanelOut:function(a,b,c){TweenLite.to(a,1.5,{y:b*c,z:.01,ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)})},handleBonusStatsClick:function(){this.setState({panelAnimationComplete:!1}),panelRightAdditionalHeight=panelRightAdditional.offsetHeight,"visible"!==this.state.toggle?(this.animateBonusPanelIn(panelRightAdditional,panelRightAdditionalHeight,!0,-1),this.setState({toggle:"visible"})):(this.animateBonusPanelOut(panelRightAdditional,panelRightAdditionalHeight,-1),this.setState({toggle:"hidden"}))},handleParagonStatsClick:function(){this.checkParagon(),this.setState({panelAnimationComplete:!1}),panelLeftAdditionalHeight=panelLeftAdditional.offsetHeight,"visible"!==this.state.paragonToggle?(this.animateBonusPanelIn(panelLeftAdditional,panelLeftAdditionalHeight,!1,-1),this.setState({paragonToggle:"visible"})):(this.animateBonusPanelOut(panelLeftAdditional,panelLeftAdditionalHeight,-1),this.setState({paragonToggle:"hidden"}))},handleSkillDescClick:function(){this.setState({panelAnimationComplete:!1}),panelBottomLeftAdditionalHeight=panelBottomLeftAdditional.offsetHeight,"visible"!==this.state.skillDescToggle?(this.animateBonusPanelIn(panelBottomLeftAdditional,panelBottomLeftAdditionalHeight,!1,1),this.setState({skillDescToggle:"visible"})):(this.animateBonusPanelOut(panelBottomLeftAdditional,panelBottomLeftAdditionalHeight,1),this.setState({skillDescToggle:"hidden"}))},handlePassiveDescClick:function(){this.setState({panelAnimationComplete:!1}),panelBottomRightAdditionalHeight=panelBottomRightAdditional.offsetHeight,"visible"!==this.state.passiveDescToggle?(this.animateBonusPanelIn(panelBottomRightAdditional,panelBottomRightAdditionalHeight,!1,1),this.setState({passiveDescToggle:"visible"})):(this.animateBonusPanelOut(panelBottomRightAdditional,panelBottomRightAdditionalHeight,1),this.setState({passiveDescToggle:"hidden"}))},handleItemClick:function(a){if(this.setState({panelAnimationComplete:!1}),target=a.target,a.target.classList.contains("item"))for(childElements=target.parentNode.children,target.classList.contains("open")?(target.classList.remove("open"),TweenLite.fromTo(target,1,{width:450,height:500},{width:64,height:128,ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)})):(target.classList.add("open"),TweenLite.fromTo(target,1,{width:64,height:128},{width:450,height:500,ease:Back.easeOut.config(1.5),onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)})),i=0;i<childElements.length;i++)childElements[i].classList.contains("open")&&childElements[i]!==target&&(childElements[i].classList.remove("open"),TweenLite.fromTo(childElements[i],1,{width:450,height:500},{width:64,height:128,ease:Power4.easeOut,onComplete:function(){this.setState({panelAnimationComplete:!0})}.bind(this)}))},checkParagon:function(){pcdr=this.refs.cdr.getDOMNode(),presred=this.refs.resred.getDOMNode(),patkspd=this.refs.atkspd.getDOMNode(),pcritdmg=this.refs.critdmg.getDOMNode(),pcritchance=this.refs.critchance.getDOMNode(),pareadmg=this.refs.areadmg.getDOMNode(),presource=this.refs.resource.getDOMNode(),presistall=this.refs.resistall.getDOMNode(),parmor=this.refs.armor.getDOMNode(),pmaxlife=this.refs.maxlife.getDOMNode(),10===this.state.paragonCdr&&pcdr.classList.add("maxed"),10===this.state.paragonResRed&&presred.classList.add("maxed"),10===this.state.paragonAtkSpd&&patkspd.classList.add("maxed"),50===this.state.paragonCritDmg&&pcritdmg.classList.add("maxed"),5===this.state.paragonCritChance&&pcritchance.classList.add("maxed"),50===this.state.paragonAreaDmg&&pareadmg.classList.add("maxed"),25===this.state.paragonResource&&presource.classList.add("maxed"),250===this.state.paragonResistAll&&presistall.classList.add("maxed"),25===this.state.paragonArmor&&parmor.classList.add("maxed"),25===this.state.paragonMaxHealth&&pmaxlife.classList.add("maxed")},handleParagon:function(a){target=a.target,parentElement=target.parentNode,parentElement.classList.contains("cdr")&&(target.classList.contains("paragon-stat-increment")?this.state.paragonCdr<10&&this.setState({paragonCdr:Math.round(10*(this.state.paragonCdr+.2))/10}):target.classList.contains("paragon-stat-max")&&!target.classList.contains("maxed")?(target.classList.add("maxed"),this.setState({paragonCdr:10})):target.classList.contains("paragon-stat-max")&&target.classList.contains("maxed")?(target.classList.remove("maxed"),this.setState({paragonCdr:0})):this.state.paragonCdr>0&&this.setState({paragonCdr:Math.round(10*(this.state.paragonCdr-.2))/10})),parentElement.classList.contains("resred")&&(target.classList.contains("paragon-stat-increment")?this.state.paragonResRed<10&&this.setState({paragonResRed:Math.round(10*(this.state.paragonResRed+.2))/10}):target.classList.contains("paragon-stat-max")&&!target.classList.contains("maxed")?(target.classList.add("maxed"),this.setState({paragonResRed:10})):target.classList.contains("paragon-stat-max")&&target.classList.contains("maxed")?(target.classList.remove("maxed"),this.setState({paragonResRed:0})):this.state.paragonResRed>0&&this.setState({paragonResRed:Math.round(10*(this.state.paragonResRed-.2))/10})),parentElement.classList.contains("atkspd")&&(target.classList.contains("paragon-stat-increment")?this.state.paragonAtkSpd<10&&this.setState({paragonAtkSpd:Math.round(10*(this.state.paragonAtkSpd+.2))/10}):target.classList.contains("paragon-stat-max")&&!target.classList.contains("maxed")?(target.classList.add("maxed"),this.setState({paragonAtkSpd:10})):target.classList.contains("paragon-stat-max")&&target.classList.contains("maxed")?(target.classList.remove("maxed"),this.setState({paragonAtkSpd:0})):this.state.paragonAtkSpd>0&&this.setState({paragonAtkSpd:Math.round(10*(this.state.paragonAtkSpd-.2))/10})),parentElement.classList.contains("critdmg")&&(target.classList.contains("paragon-stat-increment")?this.state.paragonCritDmg<50&&this.setState({paragonCritDmg:Math.round(10*(this.state.paragonCritDmg+1))/10}):target.classList.contains("paragon-stat-max")&&!target.classList.contains("maxed")?(target.classList.add("maxed"),this.setState({paragonCritDmg:50})):target.classList.contains("paragon-stat-max")&&target.classList.contains("maxed")?(target.classList.remove("maxed"),this.setState({paragonCritDmg:0})):this.state.paragonCritDmg>0&&this.setState({paragonCritDmg:Math.round(10*(this.state.paragonCritDmg-1))/10})),parentElement.classList.contains("critchance")&&(target.classList.contains("paragon-stat-increment")?this.state.paragonCritChance<5&&this.setState({paragonCritChance:Math.round(10*(this.state.paragonCritChance+.1))/10}):target.classList.contains("paragon-stat-max")&&!target.classList.contains("maxed")?(target.classList.add("maxed"),this.setState({paragonCritChance:5})):target.classList.contains("paragon-stat-max")&&target.classList.contains("maxed")?(target.classList.remove("maxed"),this.setState({paragonCritChance:0})):this.state.paragonCritChance>0&&this.setState({paragonCritChance:Math.round(10*(this.state.paragonCritChance-.1))/10})),parentElement.classList.contains("areadmg")&&(target.classList.contains("paragon-stat-increment")?this.state.paragonAreaDmg<50&&this.setState({paragonAreaDmg:Math.round(10*(this.state.paragonAreaDmg+1))/10}):target.classList.contains("paragon-stat-max")&&!target.classList.contains("maxed")?(target.classList.add("maxed"),this.setState({paragonAreaDmg:50})):target.classList.contains("paragon-stat-max")&&target.classList.contains("maxed")?(target.classList.remove("maxed"),this.setState({paragonAreaDmg:0})):this.state.paragonAreaDmg>0&&this.setState({paragonAreaDmg:Math.round(10*(this.state.paragonAreaDmg-1))/10})),parentElement.classList.contains("resource")&&(target.classList.contains("paragon-stat-increment")?this.state.paragonResource<25&&this.setState({paragonResource:Math.round(10*(this.state.paragonResource+.5))/10}):target.classList.contains("paragon-stat-max")&&!target.classList.contains("maxed")?(target.classList.add("maxed"),this.setState({paragonResource:25})):target.classList.contains("paragon-stat-max")&&target.classList.contains("maxed")?(target.classList.remove("maxed"),this.setState({paragonResource:0})):this.state.paragonResource>0&&this.setState({paragonResource:Math.round(10*(this.state.paragonResource-.5))/10})),parentElement.classList.contains("resistall")&&(target.classList.contains("paragon-stat-increment")?this.state.paragonResistAll<250&&this.setState({paragonResistAll:Math.round(10*(this.state.paragonResistAll+5))/10}):target.classList.contains("paragon-stat-max")&&!target.classList.contains("maxed")?(target.classList.add("maxed"),this.setState({paragonResistAll:250})):target.classList.contains("paragon-stat-max")&&target.classList.contains("maxed")?(target.classList.remove("maxed"),this.setState({paragonResistAll:0})):this.state.paragonResistAll>0&&this.setState({paragonResistAll:Math.round(10*(this.state.paragonResistAll-5))/10})),parentElement.classList.contains("armor")&&(target.classList.contains("paragon-stat-increment")?this.state.paragonArmor<25&&this.setState({paragonArmor:Math.round(10*(this.state.paragonArmor+.5))/10}):target.classList.contains("paragon-stat-max")&&!target.classList.contains("maxed")?(target.classList.add("maxed"),this.setState({paragonArmor:25})):target.classList.contains("paragon-stat-max")&&target.classList.contains("maxed")?(target.classList.remove("maxed"),this.setState({paragonArmor:0})):this.state.paragonArmor>0&&this.setState({paragonArmor:Math.round(10*(this.state.paragonArmor-.5))/10})),parentElement.classList.contains("maxlife")&&(target.classList.contains("paragon-stat-increment")?this.state.paragonMaxHealth<25&&this.setState({paragonMaxHealth:Math.round(10*(this.state.paragonMaxHealth+.5))/10}):target.classList.contains("paragon-stat-max")&&!target.classList.contains("maxed")?(target.classList.add("maxed"),this.setState({paragonMaxHealth:25})):target.classList.contains("paragon-stat-max")&&target.classList.contains("maxed")?(target.classList.remove("maxed"),this.setState({paragonMaxHealth:0})):this.state.paragonMaxHealth>0&&this.setState({paragonMaxHealth:Math.round(10*(this.state.paragonMaxHealth-.5))/10})),this.triggerStatCollector()},getItemData:function(){"use strict";var a,b;if(this.setState({helmItem:{},amuletItem:{},chestItem:{},bootsItem:{},glovesItem:{},shouldersItem:{},legsItem:{},bracersItem:{},mainItem:{},offItem:{},beltItem:{},ringItemLeft:{},ringItemRight:{}}),this.state.items){var c=[this.state.items.neck,this.state.items.head,this.state.items.torso,this.state.items.feet,this.state.items.hands,this.state.items.shoulders,this.state.items.legs,this.state.items.bracers,this.state.items.mainHand,this.state.items.waist],d=[[this.state.items.leftFinger,"left"],[this.state.items.rightFinger,"right"],[this.state.items.offHand,null]];for(b=0;b<c.length;b++)c[b]&&(a=c[b].tooltipParams,this.loadItemData(a));for(b=0;b<d.length;b++)d[b][0]&&(a=d[b][0].tooltipParams,"left"===d[b][1]?this.loadItemDataWithProps(a,!0):this.loadItemDataWithProps(a,!1))}clearInterval(updateHeroItems),clearInterval(fetchHeroItems)},skillDmgSanitize:function(a){calc=0,string="",combined="",saveArray.length=0;for(var b in a)a.hasOwnProperty(b)&&(string=b.toString().slice(4),parseFloat(b)&&(calc=parseFloat(b)*parseFloat(a[b])),0!==calc&&(combined+=string+" "+Math.round(1e4*calc)/100+"%<br>",saveArray.push(calc+" "+string)));return""!==combined?(this.setState({skillDmgRaw:saveArray}),combined):void 0},collectSetNoRingStats:function(){var a,b,c,d,e=[];if(this.state.items){var f=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(a=0;a<f.length;a++)if(f[a]&&f[a].set&&f[a].set.ranks){for(d=0;d<setPool.length;d++)for(f[a].set.name===setPool[d][0]&&setPool[d][1]++,b=0;b<f[a].set.ranks.length;b++)if(f[a].set.name===setPool[d][0]&&f[a].set.ranks[b].required<=setPool[d][1])for(c=0;c<statPool.length;c++)if(f[a].set.ranks[b].attributesRaw[statPool[c]]&&f[a].set.ranks[b].attributesRaw[statPool[c]].min)switch(results[c]=Math.round(1e3*f[a].set.ranks[b].attributesRaw[statPool[c]].min)/1e3,statPool[c]){case"Damage_Dealt_Percent_Bonus#Fire":fireDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Cold":coldDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Lightning":lightningDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Physical":physicalDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Poison":poisonDmg+=100*results[c];break;case"Power_Cooldown_Reduction_Percent_All":cdr*=1-results[c];break;case"Resource_Cost_Reduction_Percent_All":resRed*=1-results[c];break;case"Damage_Percent_Bonus_Vs_Elites":eliteDmg+=100*results[c];break;case"Damage_Percent_Reduction_From_Elites":eliteDmgRed+=100*results[c];break;case"Splash_Damage_Effect_Percent":areaDmg+=100*results[c];break;case"Gold_PickUp_Radius":goldPickUp+=results[c];break;case"Damage_Percent_Reduction_From_Melee":dmgRedMelee*=1-results[c];break;case"Damage_Percent_Reduction_From_Ranged":dmgRedRanged*=1-results[c];break;case"Hitpoints_Max_Percent_Bonus_Item":maxHealth+=100*results[c];break;case"Attacks_Per_Second_Percent":atkSpd+=results[c]}if(e.indexOf(f[a].set.name)>-1)continue;e.push(f[a].set.name)}}},collectSetRingStats:function(){var a,b,c,d,e=[];if(this.state.items){var f=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(a=0;a<f.length;a++)if(f[a]&&f[a].set&&f[a].set.ranks){for(d=0;d<setPool.length;d++)for(f[a].set.name===setPool[d][0]&&setPool[d][1]++,b=0;b<f[a].set.ranks.length;b++)if(f[a].set.name===setPool[d][0]&&f[a].set.ranks[b].required<=setPool[d][1]+1&&setPool[d][1]>=2)for(c=0;c<statPool.length;c++)if(f[a].set.ranks[b].attributesRaw[statPool[c]]&&f[a].set.ranks[b].attributesRaw[statPool[c]].min)switch(results[c]=Math.round(1e3*f[a].set.ranks[b].attributesRaw[statPool[c]].min)/1e3,statPool[c]){case"Damage_Dealt_Percent_Bonus#Fire":fireDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Cold":coldDmg+=100*results[c];
break;case"Damage_Dealt_Percent_Bonus#Lightning":lightningDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Physical":physicalDmg+=100*results[c];break;case"Damage_Dealt_Percent_Bonus#Poison":poisonDmg+=100*results[c];break;case"Power_Cooldown_Reduction_Percent_All":cdr*=1-results[c];break;case"Resource_Cost_Reduction_Percent_All":resRed*=1-results[c];break;case"Damage_Percent_Bonus_Vs_Elites":eliteDmg+=100*results[c];break;case"Damage_Percent_Reduction_From_Elites":eliteDmgRed+=100*results[c];break;case"Splash_Damage_Effect_Percent":areaDmg+=100*results[c];break;case"Gold_PickUp_Radius":goldPickUp+=results[c];break;case"Damage_Percent_Reduction_From_Melee":dmgRedMelee*=1-results[c];break;case"Damage_Percent_Reduction_From_Ranged":dmgRedRanged*=1-results[c];break;case"Hitpoints_Max_Percent_Bonus_Item":maxHealth+=100*results[c];break;case"Attacks_Per_Second_Percent":atkSpd+=results[c]}if(e.indexOf(f[a].set.name)>-1)continue;e.push(f[a].set.name)}}},checkSetItems:function(){var a=[];if(this.state.items){var b=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(i=0;i<b.length;i++)a.push(b[i].name),a.indexOf("Ring of Royal Grandeur")>-1?this.collectSetRingStats():this.collectSetNoRingStats()}},collectSkillDamage:function(){var a,b,c,d;if(skilldmgArray.length=0,saveArr.length=0,saveValues.length=0,this.state.items){var e=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];if(this.state["class"]&&this.state.skills&&this.state.skills.length>0){for(c=0;c<this.state.skills.length;c++)if(this.state.skills[c].skill)switch(this.state["class"]){case"demon-hunter":saveArr.push("Power_Damage_Percent_Bonus#DemonHunter_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"witch-doctor":saveArr.push("Power_Damage_Percent_Bonus#Witchdoctor_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"barbarian":saveArr.push("Power_Damage_Percent_Bonus#Barbarian_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"crusader":saveArr.push("Power_Damage_Percent_Bonus#Crusader_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"monk":saveArr.push("Power_Damage_Percent_Bonus#Monk_"+this.state.skills[c].skill.name.replace(/ /g,""));break;case"wizard":saveArr.push("Power_Damage_Percent_Bonus#Wizard_"+this.state.skills[c].skill.name.replace(/ /g,""))}for(a=0;a<e.length;a++)if(e[a]&&e[a].attributesRaw)for(b=0;b<saveArr.length;b++)e[a].attributesRaw[saveArr[b]]&&e[a].attributesRaw[saveArr[b]].min&&(results[b]=Math.round(1e3*e[a].attributesRaw[saveArr[b]].min)/1e3,Object.getOwnPropertyNames(e[a].attributesRaw[saveArr[b]]===saveArr[b])&&(saveValues.push(this.state.skills[b].skill.name+" "+Math.round(1e4*e[a].attributesRaw[saveArr[b]].min)/100+"%"),skilldmgArray.push(e[a].attributesRaw[saveArr[b]].min+this.state.skills[b].skill.name),d=skilldmgArray.reduce(function(a,b){return b in a?a[b]++:a[b]=1,a},{})))}}this.setState({skillDmg:this.skillDmgSanitize(d)})},collectStats:function(){var a,b;if(results=[],cdr=1,resRed=1,dmgRedMelee=1,dmgRedRanged=1,eliteDmg=0,eliteDmgRed=0,areaDmg=0,fireDmg=0,coldDmg=0,lightningDmg=0,physicalDmg=0,poisonDmg=0,goldPickUp=0,maxHealth=0,atkSpd=0,this.state.items){var c=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(a=0;a<c.length;a++)if(c[a]&&c[a].attributesRaw)for(b=0;b<statPool.length;b++)if(c[a].attributesRaw[statPool[b]]&&c[a].attributesRaw[statPool[b]].min)switch(results[b]=Math.round(1e3*c[a].attributesRaw[statPool[b]].min)/1e3,statPool[b]){case"Damage_Dealt_Percent_Bonus#Fire":fireDmg+=100*results[b];break;case"Damage_Dealt_Percent_Bonus#Cold":coldDmg+=100*results[b];break;case"Damage_Dealt_Percent_Bonus#Lightning":lightningDmg+=100*results[b];break;case"Damage_Dealt_Percent_Bonus#Physical":physicalDmg+=100*results[b];break;case"Damage_Dealt_Percent_Bonus#Poison":poisonDmg+=100*results[b];break;case"Power_Cooldown_Reduction_Percent_All":cdr*=1-results[b];break;case"Resource_Cost_Reduction_Percent_All":resRed*=1-results[b];break;case"Damage_Percent_Bonus_Vs_Elites":eliteDmg+=100*results[b];break;case"Damage_Percent_Reduction_From_Elites":eliteDmgRed+=100*results[b];break;case"Splash_Damage_Effect_Percent":areaDmg+=100*results[b];break;case"Gold_PickUp_Radius":goldPickUp+=results[b];break;case"Damage_Percent_Reduction_From_Melee":dmgRedMelee*=1-results[b];break;case"Damage_Percent_Reduction_From_Ranged":dmgRedRanged*=1-results[b];break;case"Hitpoints_Max_Percent_Bonus_Item":maxHealth+=100*results[b];break;case"Attacks_Per_Second_Percent":atkSpd+=results[b];break;default:console.log("default")}this.state.helmItem&&this.state.helmItem.gems&&this.state.helmItem.gems[0]&&this.state.helmItem.attributesRaw&&(this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All&&this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier?cdr*=1-this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All.min-this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All.min*this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier.min:this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All&&!this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier&&(cdr*=1-this.state.helmItem.gems[0].attributesRaw.Power_Cooldown_Reduction_Percent_All.min),this.state.helmItem.gems[0].attributesRaw.Hitpoints_Max_Percent_Bonus_Item&&this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier?maxHealth+=100*this.state.helmItem.gems[0].Hitpoints_Max_Percent_Bonus_Item.min+100*this.state.helmItem.gems[0].Hitpoints_Max_Percent_Bonus_Item.min*this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier.min:this.state.helmItem.gems[0].attributesRaw.Hitpoints_Max_Percent_Bonus_Item&&!this.state.helmItem.attributesRaw.Gem_Attributes_Multiplier&&(maxHealth+=100*this.state.helmItem.gems[0].Hitpoints_Max_Percent_Bonus_Item.min));var d,e=[fireDmg,poisonDmg,lightningDmg,physicalDmg,coldDmg],f=e.reduce(function(a,b){return a>=b?a:b},-(1/0));switch(f){case fireDmg:d="Fire Damage Increase: "+Math.round(100*f)/100+"%";break;case coldDmg:d="Cold Damage Increase: "+Math.round(100*f)/100+"%";break;case physicalDmg:d="Physical Damage Increase: "+Math.round(100*f)/100+"%";break;case lightningDmg:d="Lightning Damage Increase: "+Math.round(100*f)/100+"%";break;case poisonDmg:d="Poison Damage Increase: "+Math.round(100*f)/100+"%"}0!==f?(this.setState({maxEleDmg:d}),this.setState({maxEleDmgValue:f})):(this.setState({maxEleDmg:""}),this.setState({maxEleDmgValue:0})),this.setState({cdrRed:cdr}),this.setState({resRed:resRed}),this.setState({eliteDmg:eliteDmg}),this.setState({eliteDmgRed:eliteDmgRed}),this.setState({areaDmg:areaDmg}),this.setState({goldPickup:goldPickUp}),this.setState({dmgRedMelee:dmgRedMelee}),this.setState({dmgRedRanged:dmgRedRanged}),this.setState({maxHealth:maxHealth}),this.setState({atkSpd:atkSpd})}},render:function(){var a=this.state.skills,b=this.state.passives,c=this.state.stats,d=this.state.name,e=this.state.heroes,f=this.state.items,g=this.state["class"],h=this.state.level,j=this.state.paragon,l=this.state.amuletItem,n=this.state.shouldersItem,o=this.state.helmItem,p=this.state.chestItem,q=this.state.glovesItem,r=this.state.bootsItem,s=this.state.bracersItem,t=this.state.legsItem,u=this.state.mainItem,v=this.state.offItem,w=this.state.beltItem,x=this.state.amuletItem,y=this.state.ringItemLeft,z=this.state.ringItemRight,A=this.state.items,B=this.state.skillIconBase,C=this.state.itemIconBase,D=this.state.time,E=this.state.cdrRed,F=this.state.resRed,G=this.state.eliteDmg,H=this.state.eliteDmgRed,I=this.state.areaDmg,J=this.state.goldPickup,K=this.state.dmgRedMelee,L=this.state.dmgRedRanged,M=this.state.maxEleDmg,N=this.state.maxHealth,O=this.state.skillDmg,P=this.state.skillDmgRaw,Q=this.state.atkSpd,R=this.state.paragonCdr,S=this.state.paragonAtkSpd,T=this.state.paragonResRed,U=this.state.paragonCritDmg,V=this.state.paragonCritChance,W=this.state.paragonAreaDmg,X=this.state.paragonResource,Y=this.state.paragonResistAll,Z=this.state.paragonArmor,$=this.state.paragonMaxHealth,_=[this.state.helmItem,this.state.amuletItem,this.state.chestItem,this.state.bootsItem,this.state.glovesItem,this.state.shouldersItem,this.state.legsItem,this.state.bracersItem,this.state.mainItem,this.state.offItem,this.state.beltItem,this.state.ringItemLeft,this.state.ringItemRight];for(calculatedAttackSpeed=0,minDmgCalc=0,maxDmgCalc=0,additionalStatsOffensive.length=0,additionalStatsDefensive.length=0,skills.length=0,skillsDesc.length=0,heroes.length=0,realms.length=0,passives.length=0,passivesDesc.length=0,stats.length=0,paragon.length=0,specialPassive.length=0,base.length=0,style.length=0,shoulders.length=0,helmet.length=0,torso.length=0,hands.length=0,feet.length=0,ringLeft.length=0,ringRight.length=0,bracers.length=0,legs.length=0,items.length=0,mainHand.length=0,offHand.length=0,belt.length=0,neck.length=0,i=0;i<_.length;i++)for(m=0;m<setPool.length;m++)_[i]&&_[i].set&&_[i].set.name===setPool[m][0]&&setPool[m][1]++;switch(realms.push(React.DOM.option({key:"eu",value:"eu"},"EU")),realms.push(React.DOM.option({key:"us",value:"us"},"US")),realms.push(React.DOM.option({key:"kr",value:"kr"},"KR")),g){case"demon-hunter":style={backgroundImage:'url("assets/images/dh.png")'};break;case"witch-doctor":style={backgroundImage:'url("assets/images/wd.png")'};break;case"barbarian":style={backgroundImage:'url("assets/images/barbarian.png")'};break;case"crusader":style={backgroundImage:'url("assets/images/crusader.png")'};break;case"monk":style={backgroundImage:'url("assets/images/monk.png")'};break;case"wizard":style={backgroundImage:'url("assets/images/wiz.jpg")'};break;default:style={backgroundImage:"none"}}if(e.heroes?(heroes.push(React.DOM.option({key:e.heroes.key,value:"",style:{display:"none"}},"click to select hero")),e.heroes.forEach(function(a){heroes.push(React.DOM.option({key:e.heroes.key,value:a.id},"["+a["class"]+"] "+a.name+" (id: "+a.id+")"))})):e.code?heroes.push(React.DOM.option({key:e.code.key,value:"",style:{display:"none"}},"invalid battleTag")):null===this.state.battleTag||""===this.state.battleTag?heroes.push(React.DOM.option({value:"",style:{display:"none"}},"enter your battleTag in the field below")):heroes.push(React.DOM.option({value:"",style:{display:"none"}},"loading herolist...")),d&&g&&h){var aa=g.toString().replace(/-/g,"").charAt(0).toUpperCase()+g.toString().replace(/-/g,"").slice(1).toLowerCase();base.push(React.DOM.div({key:d.key},"Name: ",d)),base.push(React.DOM.div({key:"class-name"},"Class: ",aa)),base.push(React.DOM.div({key:h.key},"Level: ",h)),j&&base.push(React.DOM.div({key:j.key},"Paragon: ",j))}else base.push(React.DOM.div({key:"class-name"},"Class: "));if(D&&1e3*D!==0){var ba=new Date(1e3*D),ca=ba.toLocaleDateString()+" - "+ba.toLocaleTimeString();base.push(React.DOM.div({key:D.key,className:"last-updated"},"last-updated on: "+ca))}if(a!==[]&&a.forEach(function(b){var c;if(b.rune){switch(constructedLink=B.concat(b.skill.icon),b.rune.type){case"a":c={backgroundPosition:"0 49%"};break;case"b":c={backgroundPosition:"0 97%"};break;case"c":c={backgroundPosition:"0 73%"};break;case"d":c={backgroundPosition:"0 0"};break;case"e":c={backgroundPosition:"0 25%"}}skills.push(React.DOM.div({key:a.key,className:"hasIcon"},b.skill.name," with ",b.rune.name,React.DOM.div({key:a.key,className:"icon-front",style:{backgroundImage:"url("+constructedLink+".png)"}}),React.DOM.div({key:a.key,className:"icon-back",style:c}))),skillsDesc.push(React.DOM.div({key:a.key,className:"description"},React.DOM.div({key:a.key,className:"desc-icon",style:{backgroundImage:"url("+constructedLink+".png)"}}),b.skill.name+" with "+b.rune.name,React.DOM.p({dangerouslySetInnerHTML:{__html:b.skill.description.replace(/\n/g,"<br/>")},key:a.key,className:"skill-desc"}),React.DOM.p({dangerouslySetInnerHTML:{__html:b.rune.description.replace(/\n/g,"<br/>")},key:a.key,className:"rune-desc"})))}else b.skill&&(constructedLink=B.concat(b.skill.icon),skills.push(React.DOM.div({key:a.key,className:"hasIcon"},b.skill.name,React.DOM.div({key:a.key,className:"icon-front no-rune",style:{backgroundImage:"url("+constructedLink+".png)"}}))),skillsDesc.push(React.DOM.div({key:a.key,className:"description"},React.DOM.div({key:a.key,className:"desc-icon",style:{backgroundImage:"url("+constructedLink+".png)"}}),b.skill.name,React.DOM.p({dangerouslySetInnerHTML:{__html:b.skill.description.replace(/\n/g,"<br/>")},key:a.key,className:"skill-desc"}))))}),b!==[]&&b.forEach(function(a){a.skill&&(constructedLink=B.concat(a.skill.icon),passives.push(React.DOM.div({key:b.key,className:"hasIcon"},a.skill.name,React.DOM.div({key:b.key,className:"icon",style:{backgroundImage:"url("+constructedLink+".png)"}}))),passivesDesc.push(React.DOM.div({key:b.key,className:"description"},React.DOM.div({key:b.key,className:"desc-icon",style:{backgroundImage:"url("+constructedLink+".png)"}}),a.skill.name,React.DOM.p({dangerouslySetInnerHTML:{__html:a.skill.description.replace(/\n/g,"<br/>")},key:b.key,className:"passive-desc"}))))}),A&&A.head&&o){switch(constructedLink=C.concat(A.head.icon,".png"),f.head.displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(o.attributesRaw&&(o.attributesRaw.Ancient_Rank&&1===o.attributesRaw.Ancient_Rank.min?(isAncient="ancient",helmet.push(React.DOM.li({key:o.key,className:itemQuality+" name"},isAncient+" "+f.head.name))):(isAncient="",helmet.push(React.DOM.li({key:o.key,className:itemQuality+" name"},f.head.name)))),o.attributes&&(o.attributes.primary&&o.attributes.primary.forEach(function(a){helmet.push(React.DOM.li({key:o.key,className:"primary"},a.text))}),o.attributes.secondary&&o.attributes.secondary.forEach(function(a){helmet.push(React.DOM.li({key:o.key,className:"secondary"},a.text))}),o.attributes.passive&&o.attributes.passive.forEach(function(a){helmet.push(React.DOM.li({key:o.key,className:"passive"},a.text))})),o.set&&o.set.ranks)for(i=0;i<o.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)o.set.name===setPool[m][0]&&this.state.setRing?helmCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:o.set.name!==setPool[m][0]||this.state.setRing||(helmCount=setPool[m][1]);o.set.ranks[i].required===k&&o.set.ranks[i].required<=helmCount?o.set.ranks[i].attributes.primary.forEach(function(a){helmet.push(React.DOM.li({key:o.key,className:"set-bonus-"+k},a.text))}):o.set.ranks[i].required===k&&o.set.ranks[i].attributes.primary.forEach(function(a){helmet.push(React.DOM.li({key:o.key,className:"set-bonus-"+k+" inactive"},a.text))}),o.set.ranks[i].required===k&&o.set.ranks[i].required<=helmCount?o.set.ranks[i].attributes.secondary.forEach(function(a){helmet.push(React.DOM.li({key:o.key,className:"set-bonus-"+k},a.text))}):o.set.ranks[i].required===k&&o.set.ranks[i].attributes.secondary.forEach(function(a){helmet.push(React.DOM.li({key:o.key,className:"set-bonus-"+k+" inactive"},a.text))}),o.set.ranks[i].required===k&&o.set.ranks[i].required<=helmCount?o.set.ranks[i].attributes.passive.forEach(function(a){helmet.push(React.DOM.li({key:o.key,className:"set-bonus-"+k},a.text))}):o.set.ranks[i].required===k&&o.set.ranks[i].attributes.passive.forEach(function(a){helmet.push(React.DOM.li({key:o.key,className:"set-bonus-"+k+" inactive"},a.text))})}o.attributesRaw&&o.attributesRaw.Sockets&&o.gems[0]&&(gemLink=C.concat(o.gems[0].item.icon,".png"),helmet.push(React.DOM.li({key:o.key,className:"socket",style:{backgroundImage:"url("+gemLink+")"}})),o.gems[0].attributes.primary&&o.gems[0].attributes.primary.forEach(function(a){helmet.push(React.DOM.li({key:o.key,className:"gem-passive"},a.text))}),o.gems[0].attributes.secondary&&o.gems[0].attributes.secondary.forEach(function(a){helmet.push(React.DOM.li({key:o.key,className:"gem-passive"},a.text))})),items.push(React.DOM.div({key:A.key,className:"item "+isAncient+" "+itemQuality+" head",onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({key:o.key,className:"desc"},React.DOM.ul({key:o.key,className:"stats"},helmet))))}else items.push(React.DOM.div({key:A.key,className:"empty item head"}));if(A&&A.torso&&p){switch(constructedLink=C.concat(A.torso.icon,".png"),f.torso.displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(p.attributesRaw&&(p.attributesRaw.Ancient_Rank&&1===p.attributesRaw.Ancient_Rank.min?(isAncient="ancient",torso.push(React.DOM.li({key:p.key,className:itemQuality+" name"},isAncient+" "+f.torso.name))):(isAncient="",torso.push(React.DOM.li({key:p.key,className:itemQuality+" name"},f.torso.name)))),p.attributes&&(p.attributes.primary&&p.attributes.primary.forEach(function(a){torso.push(React.DOM.li({key:p.key,className:"primary"},a.text))}),p.attributes.secondary&&p.attributes.secondary.forEach(function(a){torso.push(React.DOM.li({key:p.key,className:"secondary"},a.text))}),p.attributes.passive&&p.attributes.passive.forEach(function(a){torso.push(React.DOM.li({key:p.key,className:"passive"},a.text))})),p.set&&p.set.ranks)for(i=0;i<p.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)p.set.name===setPool[m][0]&&this.state.setRing?torsoCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:p.set.name!==setPool[m][0]||this.state.setRing||(torsoCount=setPool[m][1]);p.set.ranks[i].required===k&&p.set.ranks[i].required<=torsoCount?p.set.ranks[i].attributes.primary.forEach(function(a){torso.push(React.DOM.li({key:p.key,className:"set-bonus-"+k},a.text))}):p.set.ranks[i].required===k&&p.set.ranks[i].attributes.primary.forEach(function(a){torso.push(React.DOM.li({key:p.key,className:"set-bonus-"+k+" inactive"},a.text))}),p.set.ranks[i].required===k&&p.set.ranks[i].required<=torsoCount?p.set.ranks[i].attributes.secondary.forEach(function(a){torso.push(React.DOM.li({key:p.key,className:"set-bonus-"+k},a.text))}):p.set.ranks[i].required===k&&p.set.ranks[i].attributes.secondary.forEach(function(a){torso.push(React.DOM.li({key:p.key,className:"set-bonus-"+k+" inactive"},a.text))}),p.set.ranks[i].required===k&&p.set.ranks[i].required<=torsoCount?p.set.ranks[i].attributes.passive.forEach(function(a){torso.push(React.DOM.li({key:p.key,className:"set-bonus-"+k},a.text))}):p.set.ranks[i].required===k&&p.set.ranks[i].attributes.passive.forEach(function(a){torso.push(React.DOM.li({key:p.key,className:"set-bonus-"+k+" inactive"},a.text))})}p.attributesRaw&&p.attributesRaw.Sockets&&p.gems[0]?(gemLink=C.concat(p.gems[0].item.icon,".png"),p.gems[0].attributes.primary&&p.gems[0].attributes.primary.forEach(function(a){torso.push(React.DOM.li({key:p.key,className:"socket",style:{backgroundImage:"url("+gemLink+")"}})),torso.push(React.DOM.li({key:p.key,className:"gem-passive"},a.text)),torso.push(React.DOM.li({key:p.key,className:"socket",style:{backgroundImage:"url("+gemLink+")"}})),torso.push(React.DOM.li({key:p.key,className:"gem-passive"},a.text)),torso.push(React.DOM.li({key:p.key,className:"socket",style:{backgroundImage:"url("+gemLink+")"}})),torso.push(React.DOM.li({key:p.key,className:"gem-passive"},a.text))})):p.attributesRaw&&p.attributesRaw.Sockets&&(torso.push(React.DOM.li({key:p.key,className:"socket"})),torso.push(React.DOM.li({key:p.key,className:"socket"})),torso.push(React.DOM.li({key:p.key,className:"socket"}))),items.push(React.DOM.div({key:A.key,className:"item "+isAncient+" "+itemQuality+" torso",onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({key:p.key,className:"desc"},React.DOM.ul({key:p.key,className:"stats"},torso))))}else items.push(React.DOM.div({key:A.key,className:"empty item torso"}));if(A&&A.hands&&q){switch(constructedLink=C.concat(A.hands.icon,".png"),f.hands.displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(q.attributesRaw&&(q.attributesRaw.Ancient_Rank&&1===q.attributesRaw.Ancient_Rank.min?(isAncient="ancient",hands.push(React.DOM.li({key:q.key,className:itemQuality+" name"},isAncient+" "+f.hands.name))):(isAncient="",hands.push(React.DOM.li({key:q.key,className:itemQuality+" name"},f.hands.name)))),q.attributes&&(q.attributes.primary&&q.attributes.primary.forEach(function(a){hands.push(React.DOM.li({key:q.key,className:"primary"},a.text))}),q.attributes.secondary&&q.attributes.secondary.forEach(function(a){hands.push(React.DOM.li({key:q.key,className:"secondary"},a.text))}),q.attributes.passive&&q.attributes.passive.forEach(function(a){hands.push(React.DOM.li({key:q.key,className:"passive"},a.text))})),q.set&&q.set.ranks)for(i=0;i<q.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)q.set.name===setPool[m][0]&&this.state.setRing?handsCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:q.set.name!==setPool[m][0]||this.state.setRing||(handsCount=setPool[m][1]);q.set.ranks[i].required===k&&q.set.ranks[i].required<=handsCount?q.set.ranks[i].attributes.primary.forEach(function(a){hands.push(React.DOM.li({key:q.key,className:"set-bonus-"+k},a.text))}):q.set.ranks[i].required===k&&q.set.ranks[i].attributes.primary.forEach(function(a){hands.push(React.DOM.li({key:q.key,className:"set-bonus-"+k+" inactive"},a.text))}),q.set.ranks[i].required===k&&q.set.ranks[i].required<=handsCount?q.set.ranks[i].attributes.secondary.forEach(function(a){hands.push(React.DOM.li({key:q.key,className:"set-bonus-"+k},a.text))}):q.set.ranks[i].required===k&&q.set.ranks[i].attributes.secondary.forEach(function(a){hands.push(React.DOM.li({key:q.key,className:"set-bonus-"+k+" inactive"},a.text))}),q.set.ranks[i].required===k&&q.set.ranks[i].required<=handsCount?q.set.ranks[i].attributes.passive.forEach(function(a){hands.push(React.DOM.li({key:q.key,className:"set-bonus-"+k},a.text))}):q.set.ranks[i].required===k&&q.set.ranks[i].attributes.passive.forEach(function(a){hands.push(React.DOM.li({key:q.key,className:"set-bonus-"+k+" inactive"},a.text))})}items.push(React.DOM.div({key:A.key,className:"item "+isAncient+" "+itemQuality+" hands",onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({key:q.key,className:"desc"},React.DOM.ul({key:q.key,className:"stats"},hands))))}else items.push(React.DOM.div({key:A.key,className:"empty item hands"}));if(A&&A.feet&&r){switch(constructedLink=C.concat(A.feet.icon,".png"),f.feet.displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(r.attributesRaw&&(r.attributesRaw.Ancient_Rank&&1===r.attributesRaw.Ancient_Rank.min?(isAncient="ancient",feet.push(React.DOM.li({key:r.key,className:itemQuality+" name"},isAncient+" "+f.feet.name))):(isAncient="",feet.push(React.DOM.li({key:r.key,className:itemQuality+" name"},f.feet.name)))),r.attributes&&(r.attributes.primary&&r.attributes.primary.forEach(function(a){feet.push(React.DOM.li({key:r.key,className:"primary"},a.text))}),r.attributes.secondary&&r.attributes.secondary.forEach(function(a){feet.push(React.DOM.li({key:r.key,className:"secondary"},a.text))}),r.attributes.passive&&r.attributes.passive.forEach(function(a){feet.push(React.DOM.li({key:r.key,className:"passive"},a.text))})),r.set&&r.set.ranks)for(i=0;i<r.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)r.set.name===setPool[m][0]&&this.state.setRing?feetCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:r.set.name!==setPool[m][0]||this.state.setRing||(feetCount=setPool[m][1]);r.set.ranks[i].required===k&&r.set.ranks[i].required<=feetCount?r.set.ranks[i].attributes.primary.forEach(function(a){feet.push(React.DOM.li({key:r.key,className:"set-bonus-"+k},a.text))}):r.set.ranks[i].required===k&&r.set.ranks[i].attributes.primary.forEach(function(a){feet.push(React.DOM.li({key:r.key,className:"set-bonus-"+k+" inactive"},a.text))}),r.set.ranks[i].required===k&&r.set.ranks[i].required<=feetCount?r.set.ranks[i].attributes.secondary.forEach(function(a){feet.push(React.DOM.li({key:r.key,className:"set-bonus-"+k},a.text))}):r.set.ranks[i].required===k&&r.set.ranks[i].attributes.secondary.forEach(function(a){feet.push(React.DOM.li({key:r.key,className:"set-bonus-"+k+" inactive"},a.text))}),r.set.ranks[i].required===k&&r.set.ranks[i].required<=feetCount?r.set.ranks[i].attributes.passive.forEach(function(a){feet.push(React.DOM.li({key:r.key,className:"set-bonus-"+k},a.text))}):r.set.ranks[i].required===k&&r.set.ranks[i].attributes.passive.forEach(function(a){feet.push(React.DOM.li({key:r.key,className:"set-bonus-"+k+" inactive"},a.text))})}items.push(React.DOM.div({key:A.key,className:"item "+isAncient+" "+itemQuality+" feet",onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({key:r.key,className:"desc"},React.DOM.ul({key:r.key,className:"stats"},feet))))}else items.push(React.DOM.div({key:A.key,className:"empty item feet"}));if(A&&A.shoulders&&n){switch(constructedLink=C.concat(A.shoulders.icon,".png"),f.shoulders.displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(n.attributesRaw&&(n.attributesRaw.Ancient_Rank&&1===n.attributesRaw.Ancient_Rank.min?(isAncient="ancient",shoulders.push(React.DOM.li({key:n.key,className:itemQuality+" name"},isAncient+" "+f.shoulders.name))):(isAncient="",shoulders.push(React.DOM.li({key:n.key,className:itemQuality+" name"},f.shoulders.name)))),n.attributes&&(n.attributes.primary&&n.attributes.primary.forEach(function(a){shoulders.push(React.DOM.li({key:n.key,className:"primary"},a.text))}),n.attributes.secondary&&n.attributes.secondary.forEach(function(a){shoulders.push(React.DOM.li({key:n.key,className:"secondary"},a.text))}),n.attributes.passive&&n.attributes.passive.forEach(function(a){shoulders.push(React.DOM.li({key:n.key,className:"passive"},a.text))})),n.set&&n.set.ranks)for(i=0;i<n.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)n.set.name===setPool[m][0]&&this.state.setRing?shouldersCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:n.set.name!==setPool[m][0]||this.state.setRing||(shouldersCount=setPool[m][1]);n.set.ranks[i].required===k&&n.set.ranks[i].required<=shouldersCount?n.set.ranks[i].attributes.primary.forEach(function(a){shoulders.push(React.DOM.li({key:n.key,className:"set-bonus-"+k},a.text))}):n.set.ranks[i].required===k&&n.set.ranks[i].attributes.primary.forEach(function(a){shoulders.push(React.DOM.li({key:n.key,className:"set-bonus-"+k+" inactive"},a.text))}),n.set.ranks[i].required===k&&n.set.ranks[i].required<=shouldersCount?n.set.ranks[i].attributes.secondary.forEach(function(a){shoulders.push(React.DOM.li({key:n.key,className:"set-bonus-"+k},a.text))}):n.set.ranks[i].required===k&&n.set.ranks[i].attributes.secondary.forEach(function(a){shoulders.push(React.DOM.li({key:n.key,className:"set-bonus-"+k+" inactive"},a.text))}),n.set.ranks[i].required===k&&n.set.ranks[i].required<=shouldersCount?n.set.ranks[i].attributes.passive.forEach(function(a){shoulders.push(React.DOM.li({key:n.key,className:"set-bonus-"+k},a.text))}):n.set.ranks[i].required===k&&n.set.ranks[i].attributes.passive.forEach(function(a){shoulders.push(React.DOM.li({key:n.key,className:"set-bonus-"+k+" inactive"},a.text))})}items.push(React.DOM.div({key:A.key,className:"item "+isAncient+" "+itemQuality+" shoulders",onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({key:n.key,className:"desc"},React.DOM.ul({key:n.key,className:"stats"},shoulders))))}else items.push(React.DOM.div({key:A.key,className:"empty item shoulders"}));if(A&&A.legs&&t){switch(constructedLink=C.concat(A.legs.icon,".png"),f.legs.displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(t.attributesRaw&&(t.attributesRaw.Ancient_Rank&&1===t.attributesRaw.Ancient_Rank.min?(isAncient="ancient",legs.push(React.DOM.li({key:t.key,className:itemQuality+" name"},isAncient+" "+f.legs.name))):(isAncient="",legs.push(React.DOM.li({key:t.key,className:itemQuality+" name"},f.legs.name)))),t.attributes&&(t.attributes.primary&&t.attributes.primary.forEach(function(a){legs.push(React.DOM.li({key:t.key,className:"primary"},a.text))}),t.attributes.secondary&&t.attributes.secondary.forEach(function(a){legs.push(React.DOM.li({key:t.key,className:"secondary"},a.text))}),t.attributes.passive&&t.attributes.passive.forEach(function(a){legs.push(React.DOM.li({key:t.key,className:"passive"},a.text))})),t.set&&t.set.ranks)for(i=0;i<t.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)t.set.name===setPool[m][0]&&this.state.setRing?legsCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:t.set.name!==setPool[m][0]||this.state.setRing||(legsCount=setPool[m][1]);t.set.ranks[i].required===k&&t.set.ranks[i].required<=legsCount?t.set.ranks[i].attributes.primary.forEach(function(a){legs.push(React.DOM.li({key:t.key,className:"set-bonus-"+k},a.text))}):t.set.ranks[i].required===k&&t.set.ranks[i].attributes.primary.forEach(function(a){legs.push(React.DOM.li({key:t.key,className:"set-bonus-"+k+" inactive"},a.text))}),t.set.ranks[i].required===k&&t.set.ranks[i].required<=legsCount?t.set.ranks[i].attributes.secondary.forEach(function(a){legs.push(React.DOM.li({key:t.key,className:"set-bonus-"+k},a.text))}):t.set.ranks[i].required===k&&t.set.ranks[i].attributes.secondary.forEach(function(a){legs.push(React.DOM.li({key:t.key,className:"set-bonus-"+k+" inactive"},a.text))}),t.set.ranks[i].required===k&&t.set.ranks[i].required<=legsCount?t.set.ranks[i].attributes.passive.forEach(function(a){legs.push(React.DOM.li({key:t.key,className:"set-bonus-"+k},a.text))}):t.set.ranks[i].required===k&&t.set.ranks[i].attributes.passive.forEach(function(a){legs.push(React.DOM.li({key:t.key,className:"set-bonus-"+k+" inactive"},a.text))})}t.attributesRaw&&t.attributesRaw.Sockets&&t.gems[0]?(gemLink=C.concat(t.gems[0].item.icon,".png"),t.gems[0].attributes.primary&&t.gems[0].attributes.primary.forEach(function(a){legs.push(React.DOM.li({key:t.key,className:"socket",style:{backgroundImage:"url("+gemLink+")"}})),legs.push(React.DOM.li({key:t.key,className:"gem-passive"},a.text)),legs.push(React.DOM.li({key:t.key,className:"socket",style:{backgroundImage:"url("+gemLink+")"}})),legs.push(React.DOM.li({key:t.key,className:"gem-passive"},a.text))})):t.attributesRaw&&t.attributesRaw.Sockets&&(legs.push(React.DOM.li({key:t.key,className:"socket"})),legs.push(React.DOM.li({key:t.key,className:"socket"}))),items.push(React.DOM.div({key:A.key,className:"item "+isAncient+" "+itemQuality+" legs",onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({
key:t.key,className:"desc"},React.DOM.ul({key:t.key,className:"stats"},legs))))}else items.push(React.DOM.div({key:A.key,className:"empty item legs"}));if(A&&A.bracers&&s){switch(constructedLink=C.concat(A.bracers.icon,".png"),f.bracers.displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(s.attributesRaw&&(s.attributesRaw.Ancient_Rank&&1===s.attributesRaw.Ancient_Rank.min?(isAncient="ancient",bracers.push(React.DOM.li({key:s.key,className:itemQuality+" name"},isAncient+" "+f.bracers.name))):(isAncient="",bracers.push(React.DOM.li({key:s.key,className:itemQuality+" name"},f.bracers.name)))),s.attributes&&(s.attributes.primary&&s.attributes.primary.forEach(function(a){bracers.push(React.DOM.li({key:s.key,className:"primary"},a.text))}),s.attributes.secondary&&s.attributes.secondary.forEach(function(a){bracers.push(React.DOM.li({key:s.key,className:"secondary"},a.text))}),s.attributes.passive&&s.attributes.passive.forEach(function(a){bracers.push(React.DOM.li({key:s.key,className:"passive"},a.text))})),s.set&&s.set.ranks)for(i=0;i<s.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)s.set.name===setPool[m][0]&&this.state.setRing?bracersCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:s.set.name!==setPool[m][0]||this.state.setRing||(bracersCount=setPool[m][1]);s.set.ranks[i].required===k&&s.set.ranks[i].required<=bracersCount?s.set.ranks[i].attributes.primary.forEach(function(a){bracers.push(React.DOM.li({key:s.key,className:"set-bonus-"+k},a.text))}):s.set.ranks[i].required===k&&s.set.ranks[i].attributes.primary.forEach(function(a){bracers.push(React.DOM.li({key:s.key,className:"set-bonus-"+k+" inactive"},a.text))}),s.set.ranks[i].required===k&&s.set.ranks[i].required<=bracersCount?s.set.ranks[i].attributes.secondary.forEach(function(a){bracers.push(React.DOM.li({key:s.key,className:"set-bonus-"+k},a.text))}):s.set.ranks[i].required===k&&s.set.ranks[i].attributes.secondary.forEach(function(a){bracers.push(React.DOM.li({key:s.key,className:"set-bonus-"+k+" inactive"},a.text))}),s.set.ranks[i].required===k&&s.set.ranks[i].required<=bracersCount?s.set.ranks[i].attributes.passive.forEach(function(a){bracers.push(React.DOM.li({key:s.key,className:"set-bonus-"+k},a.text))}):s.set.ranks[i].required===k&&s.set.ranks[i].attributes.passive.forEach(function(a){bracers.push(React.DOM.li({key:s.key,className:"set-bonus-"+k+" inactive"},a.text))})}items.push(React.DOM.div({key:A.key,className:"item "+isAncient+" "+itemQuality+" bracers",onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({key:s.key,className:"desc"},React.DOM.ul({key:s.key,className:"stats"},bracers))))}else items.push(React.DOM.div({key:A.key,className:"empty item bracers"}));if(A&&A.mainHand&&u){switch(constructedLink=C.concat(A.mainHand.icon,".png"),f.mainHand.displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(u.attributesRaw&&u.type){var da="";da=u.type.twoHanded===!0?"(2h)":"(1h)",u.attributesRaw.Ancient_Rank&&1===u.attributesRaw.Ancient_Rank.min?(isAncient="ancient",mainHand.push(React.DOM.li({key:u.key,className:itemQuality+" name"},isAncient+" "+f.mainHand.name+" "+da))):(isAncient="",mainHand.push(React.DOM.li({key:u.key,className:itemQuality+" name"},f.mainHand.name+" "+da)))}if(u.dps&&mainHand.push(React.DOM.li({key:u.key,className:"dps"},u.dps.max.toString().substring(0,7)+" DPS")),u.minDamage&&u.maxDamage&&u.attributesRaw)for(i=0;i<weaponElementsMin.length;i++)u.attributesRaw[weaponElementsMin[i]]&&(u.attributesRaw[DamagePercentAll]&&!u.attributesRaw[DamageBonusMinPhysical]?(minDmgCalc=u.minDamage.max+u.attributesRaw[weaponElementsMin[i]].max+u.attributesRaw[weaponElementsMin[i]].max*u.attributesRaw[DamagePercentAll].max,maxDmgCalc=u.maxDamage.max+u.attributesRaw[weaponElementsMin[i]].max+u.attributesRaw[weaponElementsDelta[i]].max+(u.attributesRaw[weaponElementsMin[i]].max+u.attributesRaw[weaponElementsDelta[i]].max)*u.attributesRaw[DamagePercentAll].max,mainHand.push(React.DOM.li({key:u.key,className:"raw-damage"},Math.round(minDmgCalc)+" - "+Math.round(maxDmgCalc)+" Damage"))):u.attributesRaw[DamagePercentAll]||u.attributesRaw[DamageBonusMinPhysical]?(minDmgCalc=u.minDamage.max,maxDmgCalc=u.maxDamage.max,mainHand.push(React.DOM.li({key:u.key,className:"raw-damage"},Math.round(minDmgCalc)+" - "+Math.round(maxDmgCalc)+" Damage"))):(minDmgCalc=u.minDamage.max+u.attributesRaw[weaponElementsMin[i]].max,maxDmgCalc=u.maxDamage.max+u.attributesRaw[weaponElementsMin[i]].max+u.attributesRaw[weaponElementsDelta[i]].max,mainHand.push(React.DOM.li({key:u.key,className:"raw-damage"},Math.round(minDmgCalc)+" - "+Math.round(maxDmgCalc)+" Damage"))));if(u.attributes&&(u.attributes.primary&&u.attributes.primary.forEach(function(a){mainHand.push(React.DOM.li({key:u.key,className:"primary"},a.text))}),u.attributes.secondary&&u.attributes.secondary.forEach(function(a){mainHand.push(React.DOM.li({key:u.key,className:"secondary"},a.text))}),u.attributes.passive&&u.attributes.passive.forEach(function(a){mainHand.push(React.DOM.li({key:u.key,className:"passive"},a.text))})),u.set&&u.set.ranks)for(i=0;i<u.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)u.set.name===setPool[m][0]&&this.state.setRing?mainCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:u.set.name!==setPool[m][0]||this.state.setRing||(mainCount=setPool[m][1]);u.set.ranks[i].required===k&&u.set.ranks[i].required<=mainCount?u.set.ranks[i].attributes.primary.forEach(function(a){mainHand.push(React.DOM.li({key:u.key,className:"set-bonus-"+k},a.text))}):u.set.ranks[i].required===k&&u.set.ranks[i].attributes.primary.forEach(function(a){mainHand.push(React.DOM.li({key:u.key,className:"set-bonus-"+k+" inactive"},a.text))}),u.set.ranks[i].required===k&&u.set.ranks[i].required<=mainCount?u.set.ranks[i].attributes.secondary.forEach(function(a){mainHand.push(React.DOM.li({key:u.key,className:"set-bonus-"+k},a.text))}):u.set.ranks[i].required===k&&u.set.ranks[i].attributes.secondary.forEach(function(a){mainHand.push(React.DOM.li({key:u.key,className:"set-bonus-"+k+" inactive"},a.text))}),u.set.ranks[i].required===k&&u.set.ranks[i].required<=mainCount?u.set.ranks[i].attributes.passive.forEach(function(a){mainHand.push(React.DOM.li({key:u.key,className:"set-bonus-"+k},a.text))}):u.set.ranks[i].required===k&&u.set.ranks[i].attributes.passive.forEach(function(a){mainHand.push(React.DOM.li({key:u.key,className:"set-bonus-"+k+" inactive"},a.text))})}u.attributesRaw&&u.attributesRaw.Sockets&&u.gems[0]?(u.gems[0].attributesRaw.Jewel_Rank?u.gems[0].attributesRaw.Jewel_Rank&&(gemLink=C.concat(u.gems[0].item.icon,".png"),mainHand.push(React.DOM.li({key:u.key,className:"socket",style:{backgroundImage:"url("+gemLink+")"}},React.DOM.span({key:u.key,className:"gem-level"},u.gems[0].attributesRaw.Jewel_Rank.min)))):(gemLink=C.concat(u.gems[0].item.icon,".png"),mainHand.push(React.DOM.li({key:u.key,className:"socket",style:{backgroundImage:"url("+gemLink+")"}}))),u.gems[0].attributes.primary&&u.gems[0].attributes.primary.forEach(function(a){mainHand.push(React.DOM.li({key:u.key,className:"gem-passive"},a.text))}),u.gems[0].attributes.passive&&u.gems[0].attributes.passive.forEach(function(a){mainHand.push(React.DOM.li({key:u.key,className:"gem-passive"},a.text))})):u.attributesRaw&&u.attributesRaw.Sockets&&mainHand.push(React.DOM.li({key:u.key,className:"socket"})),items.push(React.DOM.div({key:A.key,className:"item "+isAncient+" "+itemQuality+" mainHand",onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({key:u.key,className:"desc"},React.DOM.ul({key:u.key,className:"stats"},mainHand))))}else items.push(React.DOM.div({key:A.key,className:"empty item mainHand"}));if(A&&A.offHand&&v){switch(constructedLink=C.concat(A.offHand.icon,".png"),f.offHand.displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(v.attributesRaw&&v.type){var ea="";ea=v.type.twoHanded===!0?"(2h)":v.type.twoHanded!==!0&&v.dps?"(1h)":"",v.attributesRaw.Ancient_Rank&&1===v.attributesRaw.Ancient_Rank.min?(isAncient="ancient",offHand.push(React.DOM.li({key:v.key,className:itemQuality+" name"},isAncient+" "+f.offHand.name+" "+ea))):(isAncient="",offHand.push(React.DOM.li({key:v.key,className:itemQuality+" name"},f.offHand.name+" "+ea)))}if(v.dps&&offHand.push(React.DOM.li({key:v.key,className:"dps"},v.dps.max.toString().substring(0,8)+" DPS")),v.minDamage&&v.maxDamage&&v.attributesRaw)for(i=0;i<weaponElementsMin.length;i++)v.attributesRaw[weaponElementsMin[i]]&&(v.attributesRaw[DamagePercentAll]&&!v.attributesRaw[DamageBonusMinPhysical]?offHand.push(React.DOM.li({key:v.key,className:"raw-damage"},Math.round(v.minDamage.max+v.attributesRaw[weaponElementsMin[i]].max+v.attributesRaw[weaponElementsMin[i]].max*v.attributesRaw[DamagePercentAll].max)+" - "+Math.round(v.maxDamage.max+v.attributesRaw[weaponElementsMin[i]].max+v.attributesRaw[weaponElementsDelta[i]].max+(v.attributesRaw[weaponElementsMin[i]].max+v.attributesRaw[weaponElementsDelta[i]].max)*v.attributesRaw[DamagePercentAll].max)+" Damage")):v.attributesRaw[DamagePercentAll]||v.attributesRaw[DamageBonusMinPhysical]?offHand.push(React.DOM.li({key:v.key,className:"raw-damage"},Math.round(v.minDamage.max)+" - "+Math.round(v.maxDamage.max)+" Damage")):offHand.push(React.DOM.li({key:v.key,className:"raw-damage"},Math.round(v.minDamage.max+v.attributesRaw[weaponElementsMin[i]].max)+" - "+Math.round(v.maxDamage.max+v.attributesRaw[weaponElementsMin[i]].max+v.attributesRaw[weaponElementsDelta[i]].max)+" Damage")));if(v.attributes&&(v.attributes.primary&&v.attributes.primary.forEach(function(a){offHand.push(React.DOM.li({key:v.key,className:"primary"},a.text))}),v.attributes.secondary&&v.attributes.secondary.forEach(function(a){offHand.push(React.DOM.li({key:v.key,className:"secondary"},a.text))}),v.attributes.passive&&v.attributes.passive.forEach(function(a){offHand.push(React.DOM.li({key:v.key,className:"passive"},a.text))})),v.set&&v.set.ranks)for(i=0;i<v.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)v.set.name===setPool[m][0]&&this.state.setRing?offCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:v.set.name!==setPool[m][0]||this.state.setRing||(offCount=setPool[m][1]);v.set.ranks[i].required===k&&v.set.ranks[i].required<=offCount?v.set.ranks[i].attributes.primary.forEach(function(a){offHand.push(React.DOM.li({key:v.key,className:"set-bonus-"+k},a.text))}):v.set.ranks[i].required===k&&v.set.ranks[i].attributes.primary.forEach(function(a){offHand.push(React.DOM.li({key:v.key,className:"set-bonus-"+k+" inactive"},a.text))}),v.set.ranks[i].required===k&&v.set.ranks[i].required<=offCount?v.set.ranks[i].attributes.secondary.forEach(function(a){offHand.push(React.DOM.li({key:v.key,className:"set-bonus-"+k},a.text))}):v.set.ranks[i].required===k&&v.set.ranks[i].attributes.secondary.forEach(function(a){offHand.push(React.DOM.li({key:v.key,className:"set-bonus-"+k+" inactive"},a.text))}),v.set.ranks[i].required===k&&v.set.ranks[i].required<=offCount?v.set.ranks[i].attributes.passive.forEach(function(a){offHand.push(React.DOM.li({key:v.key,className:"set-bonus-"+k},a.text))}):v.set.ranks[i].required===k&&v.set.ranks[i].attributes.passive.forEach(function(a){offHand.push(React.DOM.li({key:v.key,className:"set-bonus-"+k+" inactive"},a.text))})}v.attributesRaw&&v.attributesRaw.Sockets&&v.gems[0]?(v.gems[0].attributesRaw.Jewel_Rank?v.gems[0].attributesRaw.Jewel_Rank&&(gemLink=C.concat(v.gems[0].item.icon,".png"),offHand.push(React.DOM.li({key:v.key,className:"socket",style:{backgroundImage:"url("+gemLink+")"}},React.DOM.span({key:v.key,className:"gem-level"},v.gems[0].attributesRaw.Jewel_Rank.min)))):(gemLink=C.concat(v.gems[0].item.icon,".png"),offHand.push(React.DOM.li({key:v.key,className:"socket",style:{backgroundImage:"url("+gemLink+")"}}))),v.gems[0].attributes.primary&&v.gems[0].attributes.primary.forEach(function(a){offHand.push(React.DOM.li({key:v.key,className:"gem-passive"},a.text))}),v.gems[0].attributes.passive&&v.gems[0].attributes.passive.forEach(function(a){offHand.push(React.DOM.li({key:v.key,className:"gem-passive"},a.text))})):v.attributesRaw&&v.attributesRaw.Sockets&&offHand.push(React.DOM.li({key:v.key,className:"socket"})),items.push(React.DOM.div({key:A.key,className:"item "+isAncient+" "+itemQuality+" offHand",onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({key:v.key,className:"desc"},React.DOM.ul({key:v.key,className:"stats"},offHand))))}else items.push(React.DOM.div({key:A.key,className:"empty item offHand"}));if(A&&A.waist&&w){switch(constructedLink=C.concat(A.waist.icon,".png"),f.waist.displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(w.attributesRaw&&(w.attributesRaw.Ancient_Rank&&1===w.attributesRaw.Ancient_Rank.min?(isAncient="ancient",belt.push(React.DOM.li({key:w.key,className:itemQuality+" name"},isAncient+" "+f.waist.name))):(isAncient="",belt.push(React.DOM.li({key:w.key,className:itemQuality+" name"},f.waist.name)))),w.attributes&&(w.attributes.primary&&w.attributes.primary.forEach(function(a){belt.push(React.DOM.li({key:w.key,className:"primary"},a.text))}),w.attributes.secondary&&w.attributes.secondary.forEach(function(a){belt.push(React.DOM.li({key:w.key,className:"secondary"},a.text))}),w.attributes.passive&&w.attributes.passive.forEach(function(a){belt.push(React.DOM.li({key:w.key,className:"passive"},a.text))})),w.set&&w.set.ranks)for(i=0;i<w.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)w.set.name===setPool[m][0]&&this.state.setRing?beltCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:w.set.name!==setPool[m][0]||this.state.setRing||(beltCount=setPool[m][1]);w.set.ranks[i].required===k&&w.set.ranks[i].required<=beltCount?w.set.ranks[i].attributes.primary.forEach(function(a){belt.push(React.DOM.li({key:w.key,className:"set-bonus-"+k},a.text))}):w.set.ranks[i].required===k&&w.set.ranks[i].attributes.primary.forEach(function(a){belt.push(React.DOM.li({key:w.key,className:"set-bonus-"+k+" inactive"},a.text))}),w.set.ranks[i].required===k&&w.set.ranks[i].required<=beltCount?w.set.ranks[i].attributes.secondary.forEach(function(a){belt.push(React.DOM.li({key:w.key,className:"set-bonus-"+k},a.text))}):w.set.ranks[i].required===k&&w.set.ranks[i].attributes.secondary.forEach(function(a){belt.push(React.DOM.li({key:w.key,className:"set-bonus-"+k+" inactive"},a.text))}),w.set.ranks[i].required===k&&w.set.ranks[i].required<=beltCount?w.set.ranks[i].attributes.passive.forEach(function(a){belt.push(React.DOM.li({key:w.key,className:"set-bonus-"+k},a.text))}):w.set.ranks[i].required===k&&w.set.ranks[i].attributes.passive.forEach(function(a){belt.push(React.DOM.li({key:w.key,className:"set-bonus-"+k+" inactive"},a.text))})}items.push(React.DOM.div({key:A.key,className:"item "+isAncient+" "+itemQuality+" waist",onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({key:w.key,className:"desc"},React.DOM.ul({key:w.key,className:"stats"},belt))))}else items.push(React.DOM.div({key:A.key,className:"empty item waist"}));if(A&&A.rightFinger&&z){switch(constructedLink=C.concat(A.rightFinger.icon,".png"),f.rightFinger.displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(z.attributesRaw&&(z.attributesRaw.Ancient_Rank&&1===z.attributesRaw.Ancient_Rank.min?(isAncient="ancient",ringRight.push(React.DOM.li({key:z.key,className:itemQuality+" name"},isAncient+" "+f.rightFinger.name))):(isAncient="",ringRight.push(React.DOM.li({key:z.key,className:itemQuality+" name"},f.rightFinger.name)))),z.attributes&&(z.attributes.primary&&z.attributes.primary.forEach(function(a){ringRight.push(React.DOM.li({key:z.key,className:"primary"},a.text))}),z.attributes.secondary&&z.attributes.secondary.forEach(function(a){"orange"!==a.color?ringRight.push(React.DOM.li({key:z.key,className:"secondary"},a.text)):ringRight.push(React.DOM.li({key:z.key,className:"passive"},a.text))}),z.attributes.passive&&z.attributes.passive.forEach(function(a){ringRight.push(React.DOM.li({key:z.key,className:"passive"},a.text))})),z.set&&z.set.ranks)for(i=0;i<z.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)z.set.name===setPool[m][0]&&this.state.setRing?ringRCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:z.set.name!==setPool[m][0]||this.state.setRing||(ringRCount=setPool[m][1]);z.set.ranks[i].required===k&&z.set.ranks[i].required<=ringRCount?z.set.ranks[i].attributes.primary.forEach(function(a){ringRight.push(React.DOM.li({key:z.key,className:"set-bonus-"+k},a.text))}):z.set.ranks[i].required===k&&z.set.ranks[i].attributes.primary.forEach(function(a){ringRight.push(React.DOM.li({key:z.key,className:"set-bonus-"+k+" inactive"},a.text))}),z.set.ranks[i].required===k&&z.set.ranks[i].required<=ringRCount?z.set.ranks[i].attributes.secondary.forEach(function(a){ringRight.push(React.DOM.li({key:z.key,className:"set-bonus-"+k},a.text))}):z.set.ranks[i].required===k&&z.set.ranks[i].attributes.secondary.forEach(function(a){ringRight.push(React.DOM.li({key:z.key,className:"set-bonus-"+k+" inactive"},a.text))}),z.set.ranks[i].required===k&&z.set.ranks[i].required<=ringRCount?z.set.ranks[i].attributes.passive.forEach(function(a){ringRight.push(React.DOM.li({key:z.key,className:"set-bonus-"+k},a.text))}):z.set.ranks[i].required===k&&z.set.ranks[i].attributes.passive.forEach(function(a){ringRight.push(React.DOM.li({key:z.key,className:"set-bonus-"+k+" inactive"},a.text))})}z.attributesRaw&&z.attributesRaw.Sockets&&z.gems[0]&&z.gems[0].attributesRaw.Jewel_Rank?(gemLink=C.concat(z.gems[0].item.icon,".png"),ringRight.push(React.DOM.li({key:z.key,className:"socket",style:{backgroundImage:"url("+gemLink+")"}},React.DOM.span({key:z.key,className:"gem-level"},z.gems[0].attributesRaw.Jewel_Rank.min))),z.gems[0].attributes.passive.forEach(function(a){ringRight.push(React.DOM.li({key:z.key,className:"gem-passive unique"},a.text))})):z.attributesRaw&&z.attributesRaw.Sockets&&ringRight.push(React.DOM.li({key:z.key,className:"socket"})),items.push(React.DOM.div({key:A.key,className:"item "+isAncient+" "+itemQuality+" rightFinger",onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({key:z.key,className:"desc"},React.DOM.ul({key:z.key,className:"stats"},ringRight))))}else items.push(React.DOM.div({key:A.key,className:"empty item rightFinger"}));if(A&&A.leftFinger&&y){switch(constructedLink=C.concat(A.leftFinger.icon,".png"),f.leftFinger.displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(y.attributesRaw&&(y.attributesRaw.Ancient_Rank&&1===y.attributesRaw.Ancient_Rank.min?(isAncient="ancient",ringLeft.push(React.DOM.li({key:y.key,className:itemQuality+" name"},isAncient+" "+f.leftFinger.name))):(isAncient="",ringLeft.push(React.DOM.li({key:y.key,className:itemQuality+" name"},f.leftFinger.name)))),y.attributes&&(y.attributes.primary&&y.attributes.primary.forEach(function(a){ringLeft.push(React.DOM.li({key:y.key,className:"primary"},a.text))}),y.attributes.secondary&&y.attributes.secondary.forEach(function(a){ringLeft.push(React.DOM.li({key:y.key,className:"secondary"},a.text))}),y.attributes.passive?y.attributes.passive.forEach(function(a){ringLeft.push(React.DOM.li({key:y.key,className:"passive"},a.text))}):isAncient=""),y.set&&y.set.ranks)for(i=0;i<y.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)y.set.name===setPool[m][0]&&this.state.setRing?ringLCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:y.set.name!==setPool[m][0]||this.state.setRing||(ringLCount=setPool[m][1]);y.set.ranks[i].required===k&&y.set.ranks[i].required<=ringLCount?y.set.ranks[i].attributes.primary.forEach(function(a){ringLeft.push(React.DOM.li({key:y.key,className:"set-bonus-"+k},a.text))}):y.set.ranks[i].required===k&&y.set.ranks[i].attributes.primary.forEach(function(a){ringLeft.push(React.DOM.li({key:y.key,className:"set-bonus-"+k+" inactive"},a.text))}),y.set.ranks[i].required===k&&y.set.ranks[i].required<=ringLCount?y.set.ranks[i].attributes.secondary.forEach(function(a){ringLeft.push(React.DOM.li({key:y.key,className:"set-bonus-"+k},a.text))}):y.set.ranks[i].required===k&&y.set.ranks[i].attributes.secondary.forEach(function(a){ringLeft.push(React.DOM.li({key:y.key,className:"set-bonus-"+k+" inactive"},a.text))}),y.set.ranks[i].required===k&&y.set.ranks[i].required<=ringLCount?y.set.ranks[i].attributes.passive.forEach(function(a){ringLeft.push(React.DOM.li({key:y.key,className:"set-bonus-"+k},a.text))}):y.set.ranks[i].required===k&&y.set.ranks[i].attributes.passive.forEach(function(a){ringLeft.push(React.DOM.li({key:y.key,className:"set-bonus-"+k+" inactive"},a.text))})}y.attributesRaw&&y.attributesRaw.Sockets&&y.gems[0]&&y.gems[0].attributesRaw.Jewel_Rank?(gemLink=C.concat(y.gems[0].item.icon,".png"),ringLeft.push(React.DOM.li({key:y.key,className:"socket",style:{backgroundImage:"url("+gemLink+")"}},React.DOM.span({key:y.key,className:"gem-level"},y.gems[0].attributesRaw.Jewel_Rank.min))),y.gems[0].attributes.passive.forEach(function(a){ringLeft.push(React.DOM.li({key:y.key,className:"gem-passive unique"},a.text))})):y.attributesRaw&&y.attributesRaw.Sockets&&ringLeft.push(React.DOM.li({key:y.key,className:"socket"})),items.push(React.DOM.div({key:A.key,className:"item "+isAncient+" "+itemQuality+" leftFinger",onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({key:y.key,className:"desc"},React.DOM.ul({key:y.key,className:"stats"},ringLeft))))}else items.push(React.DOM.div({key:A.key,className:"empty item leftFinger"}));if(A&&A.neck&&x){switch(constructedLink=C.concat(A.neck.icon,".png"),f.neck.displayColor){case"green":itemQuality="set";break;case"orange":itemQuality="unique";break;case"blue":itemQuality="magic";break;case"yellow":itemQuality="rare";break;case"white":itemQuality="white";break;case"gray":itemQuality="common"}if(x.attributesRaw&&(x.attributesRaw.Ancient_Rank&&1===x.attributesRaw.Ancient_Rank.min?(isAncient="ancient",neck.push(React.DOM.li({key:x.key,className:itemQuality+" name"},isAncient+" "+f.neck.name))):(isAncient="",neck.push(React.DOM.li({key:x.key,className:itemQuality+" name"},f.neck.name)))),x.attributes&&(x.attributes.primary&&x.attributes.primary.forEach(function(a){neck.push(React.DOM.li({key:x.key,className:"primary"},a.text))}),x.attributes.secondary&&x.attributes.secondary.forEach(function(a){neck.push(React.DOM.li({key:x.key,className:"secondary"},a.text))}),x.attributes.passive&&x.attributes.passive.forEach(function(a){neck.push(React.DOM.li({key:x.key,className:"passive"},a.text))})),x.set&&x.set.ranks)for(i=0;i<x.set.ranks.length;i++)for(k=1;6>=k;k++){for(m=0;m<setPool.length;m++)x.set.name===setPool[m][0]&&this.state.setRing?neckCount=setPool[m][1]>=2?setPool[m][1]++:setPool[m][1]:x.set.name!==setPool[m][0]||this.state.setRing||(neckCount=setPool[m][1]);x.set.ranks[i].required===k&&x.set.ranks[i].required<=neckCount?x.set.ranks[i].attributes.primary.forEach(function(a){neck.push(React.DOM.li({key:x.key,className:"set-bonus-"+k},a.text))}):x.set.ranks[i].required===k&&x.set.ranks[i].attributes.primary.forEach(function(a){neck.push(React.DOM.li({key:x.key,className:"set-bonus-"+k+" inactive"},a.text))}),x.set.ranks[i].required===k&&x.set.ranks[i].required<=neckCount?x.set.ranks[i].attributes.secondary.forEach(function(a){neck.push(React.DOM.li({key:x.key,className:"set-bonus-"+k},a.text))}):x.set.ranks[i].required===k&&x.set.ranks[i].attributes.secondary.forEach(function(a){neck.push(React.DOM.li({key:x.key,className:"set-bonus-"+k+" inactive"},a.text))}),x.set.ranks[i].required===k&&x.set.ranks[i].required<=neckCount?x.set.ranks[i].attributes.passive.forEach(function(a){neck.push(React.DOM.li({key:x.key,className:"set-bonus-"+k},a.text))}):x.set.ranks[i].required===k&&x.set.ranks[i].attributes.passive.forEach(function(a){neck.push(React.DOM.li({key:x.key,className:"set-bonus-"+k+" inactive"},a.text))})}x.attributesRaw&&x.attributesRaw.Sockets&&x.gems[0]&&x.gems[0].attributesRaw.Jewel_Rank?(gemLink=C.concat(x.gems[0].item.icon,".png"),neck.push(React.DOM.li({key:x.key,className:"socket",style:{backgroundImage:"url("+gemLink+")"}},React.DOM.span({key:x.key,className:"gem-level"},x.gems[0].attributesRaw.Jewel_Rank.min))),x.gems[0].attributes.passive.forEach(function(a){neck.push(React.DOM.li({key:x.key,className:"gem-passive unique"},a.text))})):x.attributesRaw&&x.attributesRaw.Sockets&&neck.push(React.DOM.li({key:x.key,className:"socket"})),items.push(React.DOM.div({key:A.key,className:"item "+isAncient+" "+itemQuality+" neck",onClick:this.handleItemClick,style:{backgroundImage:"url("+constructedLink+")"}},React.DOM.div({key:x.key,className:"desc"},React.DOM.ul({key:x.key,className:"stats"},neck))))}else items.push(React.DOM.div({key:A.key,className:"empty item neck"}));if(l.attributes&&f&&l.attributes.passive[0]&&-1!==l.attributes.passive[0].text.search("passive")&&f.neck&&"Hellfire Amulet"===f.neck.name){switch(hellfirePassiveLink=l.attributes.passive[0].text.substring(9).replace(" passive.","").replace(/ /g,"").toLowerCase(),hellfirePassiveDisplay=l.attributes.passive[0].text.substring(9).replace(" passive.",""),g){case"demon-hunter":constructedLink=B.concat("demonhunter_passive_",hellfirePassiveLink);break;case"witch-doctor":constructedLink=B.concat("witchdoctor_passive_",hellfirePassiveLink);break;case"barbarian":constructedLink=B.concat("barbarian_passive_",hellfirePassiveLink);break;case"crusader":constructedLink=B.concat("crusader_passive_",hellfirePassiveLink);break;case"monk":constructedLink=B.concat("monk_passive_",hellfirePassiveLink);break;case"wizard":constructedLink=B.concat("wizard_passive_",hellfirePassiveLink);break;default:console.log("new class?")}specialPassive.push(React.DOM.div({key:l.key,className:"hasIcon"},hellfirePassiveDisplay," (HA)",React.DOM.div({key:l.key,className:"icon",style:{backgroundImage:"url("+constructedLink+".png)"}})))}if(c&&c.life&&c.damage&&c.toughness&&c.vitality&&(stats.push(React.DOM.div({key:c.key},"Life: ",Math.round(c.life+c.life*$/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))),stats.push(React.DOM.div({key:c.key},"Toughness: ",Math.round(c.toughness).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))),"demon-hunter"===g||"monk"===g?(stats.push(React.DOM.div({key:c.key},"Dexterity: ",c.dexterity.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))),c.strength>1e3&&stats.push(React.DOM.div({key:c.key},"Strength: ",c.strength.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))),c.intelligence>1e3&&stats.push(React.DOM.div({key:c.key},"Intelligence: ",c.intelligence.toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")))):"witch-doctor"===g||"wizard"===g?(stats.push(React.DOM.div({key:c.key},"Intelligence: ",c.intelligence.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))),c.strength>1e3&&stats.push(React.DOM.div({key:c.key},"Strength: ",c.strength.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))),c.dexterity>1e3&&stats.push(React.DOM.div({key:c.key},"Dexterity: ",c.dexterity.toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")))):("barbarian"===g||"crusader"===g)&&(stats.push(React.DOM.div({key:c.key},"Strength: ",c.strength.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))),c.dexterity>1e3&&stats.push(React.DOM.div({key:c.key},"Dexterity: ",c.dexterity.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))),c.intelligence>1e3&&stats.push(React.DOM.div({key:c.key},"Intelligence: ",c.intelligence.toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")))),stats.push(React.DOM.div({key:c.key},"Vitality: ",c.vitality.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))),stats.push(React.DOM.div({key:c.key},"Armor: ",Math.round(c.armor+c.armor*Z/100))),0!==c.damageIncrease&&stats.push(React.DOM.div({key:c.key},"Damage Increase: ",c.damageIncrease)),0!==c.damageReduction&&stats.push(React.DOM.div({key:c.key},"Damage Increase: ",c.damageReduction))),additionalStatsOffensive&&c&&(c.critChance?additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Critical Hit Chance: "+Math.round(1e3*(100*c.critChance+V))/1e3+"%")):c.critChance||0===V||additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Critical Hit Chance: "+Math.round(1e3*V)/1e3+"%")),c.critDamage?additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Critical Damage increase: "+Math.round(1e3*(100*c.critDamage+U-100))/1e3+"%")):c.critDamage||0===U||additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Critical Damage increase: "+Math.round(1e3*(U-100))/1e3+"%")),1!==E?additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Cooldown Reduction: "+Math.round(100*(1-E+R/100)*100)/100+"%")):0!==R&&additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Cooldown Reduction: "+R+"%")),1!==F?additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Resource Cost Reduction: "+Math.round(100*(1-F+T/100)*100)/100+"%")):0!==T&&additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Resource Cost Reduction: "+T+"%")),u.attacksPerSecond&&v.attacksPerSecond?(calculatedAttackSpeed=u.attacksPerSecond.max+u.attacksPerSecond.max*(.15+Q+S/100),additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Attacks per Second: "+Math.round(100*calculatedAttackSpeed)/100))):u.attacksPerSecond?(calculatedAttackSpeed=u.attacksPerSecond.max+u.attacksPerSecond.max*(Q+S/100),additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Attacks per Second: "+Math.round(100*calculatedAttackSpeed)/100))):u.attacksPerSecond||0===S||(calculatedAttackSpeed=S/100,additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Attacks per Second: "+Math.round(100*calculatedAttackSpeed)/100))),0!==G&&additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Bonus Damage to Elites: "+G+"%")),0!==I?additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Area Bonus Damage: "+(I+W)+"%")):0!==W&&additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Area Bonus Damage: "+W+"%")),0!==M&&additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},M)),c.primaryResource?additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Primary Resource: "+(c.primaryResource+X))):0!==X&&additionalStatsOffensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Primary Resource: "+X)),O&&additionalStatsOffensive.push(React.DOM.div({
dangerouslySetInnerHTML:{__html:"Skill Damage: "+O},key:additionalStatsOffensive.key,className:"bonusstat"}))),c&&c.critDamage&&c.critChance&&calculatedAttackSpeed&&0!==minDmgCalc&&0!==maxDmgCalc){var fa,ga,ha,ia,ja,ka=.5*(minDmgCalc+maxDmgCalc),la=c.critChance+V/100,ma=c.critDamage-1+U/100,na=la,oa=ma,pa=0,qa=0,ra=3,sa=1,ta=[];if(ta.length=0,"demon-hunter"===g||"monk"===g?fa=c.dexterity/100:"barbarian"===g||"crusader"===g?fa=c.strength/100:"wizard"===g||"witch-doctor"===g?fa=c.intelligence/100:(fa=1,console.log("new class?")),ga=(1+fa)*ka,this.state.skillDmgRaw)for(i=0;i<this.state.skillDmgRaw.length;i++)a.forEach(function(a){a.skill&&-1!==P[i].search(a.skill.name.toString())&&ta.push([ra,P[i]])});for(i=0;i<passiveBuffPool.length;i++)b.forEach(function(a){a.skill&&a.skill.name===passiveBuffPool[i][0]&&("Damage"===passiveBuffPool[i][1]&&(pa+=passiveBuffPool[i][2]),"Crit Chance"===passiveBuffPool[i][1]&&(na+=passiveBuffPool[i][2]))});for(i=0;i<skillBuffPool.length;i++)a.forEach(function(a){a.skill&&a.rune?(a.skill.name===skillBuffPool[i][0]||a.rune.name===skillBuffPool[i][0])&&"Damage"===skillBuffPool[i][1]&&(pa+=skillBuffPool[i][2]):a.skill&&a.skill.name===skillBuffPool[i][0]&&"Damage"===skillBuffPool[i][1]&&(pa+=skillBuffPool[i][2])});this.state.maxEleDmgValue&&(qa+=this.state.maxEleDmgValue/100),ia=ta.sort(),ja=ia[0]?ia[0][0]*(1+parseFloat(ia[0][1]))*(1+qa):1,ha=ga*calculatedAttackSpeed*(na*oa+1)*ja*(1+pa)*(1+sa),ha?stats.push(React.DOM.div({key:"dps"},"DPS: ",Math.round(ga*calculatedAttackSpeed*(la*ma+1)).toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")," | EDPS: ",Math.round(ha).toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."))):stats.push(React.DOM.div({key:"dps"},"DPS: ",Math.round(ga*calculatedAttackSpeed*(la*ma+1)).toString().replace(/\B(?=(\d{3})+(?!\d))/g,".")," | EDPS: ","Calculating EDPS.."))}return additionalStatsDefensive&&c&&(c.secondaryResource&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsOffensive.key,className:"bonusstat"},"Secondary Resource: "+c.secondaryResource)),c.physicalResist?additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Physical Resist: "+(c.physicalResist+Y))):0!==Y&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Physical Resist: "+Y)),c.fireResist?additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Fire Resist: "+(c.fireResist+Y))):0!==Y&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Fire Resist: "+Y)),c.coldResist?additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Cold Resist: "+(c.coldResist+Y))):0!==Y&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Cold Resist: "+Y)),c.lightningResist?additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Lighting Resist: "+(c.lightningResist+Y))):0!==Y&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Lighting Resist: "+Y)),c.poisonResist?additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Poison Resist: "+(c.poisonResist+Y))):0!==Y&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Poison Resist: "+Y)),0!==J&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Gold Pick-up Radius: "+J+" yards")),1!==K&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Melee Damage Reduction: "+Math.round(100*(1-K)*1e3)/1e3+"%")),1!==L&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Ranged Damage Reduction: "+Math.round(100*(1-L)*1e3)/1e3+"%")),0!==H&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Damage Reduction from Elites: "+H+"%")),N?additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Bonus Max Health: "+(N+$)+"%")):0!==$&&additionalStatsDefensive.push(React.DOM.div({key:additionalStatsDefensive.key,className:"bonusstat"},"Bonus Max Health: "+$+"%"))),paragon.push(React.DOM.div({key:paragon.key,className:"paragon-stat cdr"},"cdr: "+Math.round(10*R)/10+"%",React.DOM.span({key:paragon.key,className:"paragon-stat-increment",onClick:this.handleParagon},"+"),React.DOM.span({key:paragon.key,className:"paragon-stat-decrement",onClick:this.handleParagon},"-"),React.DOM.span({key:paragon.key,ref:"cdr",className:"paragon-stat-max",onClick:this.handleParagon}))),paragon.push(React.DOM.div({key:paragon.key,className:"paragon-stat resred"},"res: "+Math.round(10*T)/10+"%",React.DOM.span({key:paragon.key,className:"paragon-stat-increment",onClick:this.handleParagon},"+"),React.DOM.span({key:paragon.key,className:"paragon-stat-decrement",onClick:this.handleParagon},"-"),React.DOM.span({key:paragon.key,ref:"resred",className:"paragon-stat-max",onClick:this.handleParagon}))),paragon.push(React.DOM.div({key:paragon.key,className:"paragon-stat atkspd"},"atkspd: "+Math.round(10*S)/10+"%",React.DOM.span({key:paragon.key,className:"paragon-stat-increment",onClick:this.handleParagon},"+"),React.DOM.span({key:paragon.key,className:"paragon-stat-decrement",onClick:this.handleParagon},"-"),React.DOM.span({key:paragon.key,ref:"atkspd",className:"paragon-stat-max",onClick:this.handleParagon}))),paragon.push(React.DOM.div({key:paragon.key,className:"paragon-stat critdmg"},"critdmg: "+Math.round(U)+"%",React.DOM.span({key:paragon.key,className:"paragon-stat-increment",onClick:this.handleParagon},"+"),React.DOM.span({key:paragon.key,className:"paragon-stat-decrement",onClick:this.handleParagon},"-"),React.DOM.span({key:paragon.key,ref:"critdmg",className:"paragon-stat-max",onClick:this.handleParagon}))),paragon.push(React.DOM.div({key:paragon.key,className:"paragon-stat critchance"},"critchance: "+Math.round(10*V)/10+"%",React.DOM.span({key:paragon.key,className:"paragon-stat-increment",onClick:this.handleParagon},"+"),React.DOM.span({key:paragon.key,className:"paragon-stat-decrement",onClick:this.handleParagon},"-"),React.DOM.span({key:paragon.key,ref:"critchance",className:"paragon-stat-max",onClick:this.handleParagon}))),paragon.push(React.DOM.div({key:paragon.key,className:"paragon-stat areadmg"},"areadmg: "+Math.round(W)+"%",React.DOM.span({key:paragon.key,className:"paragon-stat-increment",onClick:this.handleParagon},"+"),React.DOM.span({key:paragon.key,className:"paragon-stat-decrement",onClick:this.handleParagon},"-"),React.DOM.span({key:paragon.key,ref:"areadmg",className:"paragon-stat-max",onClick:this.handleParagon}))),paragon.push(React.DOM.div({key:paragon.key,className:"paragon-stat resource"},"resource: "+Math.round(X),React.DOM.span({key:paragon.key,className:"paragon-stat-increment",onClick:this.handleParagon},"+"),React.DOM.span({key:paragon.key,className:"paragon-stat-decrement",onClick:this.handleParagon},"-"),React.DOM.span({key:paragon.key,ref:"resource",className:"paragon-stat-max",onClick:this.handleParagon}))),paragon.push(React.DOM.div({key:paragon.key,className:"paragon-stat resistall"},"allres: "+Math.round(Y),React.DOM.span({key:paragon.key,className:"paragon-stat-increment",onClick:this.handleParagon},"+"),React.DOM.span({key:paragon.key,className:"paragon-stat-decrement",onClick:this.handleParagon},"-"),React.DOM.span({key:paragon.key,ref:"resistall",className:"paragon-stat-max",onClick:this.handleParagon}))),paragon.push(React.DOM.div({key:paragon.key,className:"paragon-stat armor"},"armor: "+Math.round(10*Z)/10+"%",React.DOM.span({key:paragon.key,className:"paragon-stat-increment",onClick:this.handleParagon},"+"),React.DOM.span({key:paragon.key,className:"paragon-stat-decrement",onClick:this.handleParagon},"-"),React.DOM.span({key:paragon.key,ref:"armor",className:"paragon-stat-max",onClick:this.handleParagon}))),paragon.push(React.DOM.div({key:paragon.key,className:"paragon-stat maxlife"},"maxlife: "+Math.round(10*$)/10+"%",React.DOM.span({key:paragon.key,className:"paragon-stat-increment",onClick:this.handleParagon},"+"),React.DOM.span({key:paragon.key,className:"paragon-stat-decrement",onClick:this.handleParagon},"-"),React.DOM.span({key:paragon.key,ref:"maxlife",className:"paragon-stat-max",onClick:this.handleParagon}))),localStorage.setItem("paragonCdr",this.state.paragonCdr),localStorage.setItem("paragonResRed",this.state.paragonResRed),localStorage.setItem("paragonAtkSpd",this.state.paragonAtkSpd),localStorage.setItem("paragonCritDmg",this.state.paragonCritDmg),localStorage.setItem("paragonCritChance",this.state.paragonCritChance),localStorage.setItem("paragonAreaDmg",this.state.paragonAreaDmg),localStorage.setItem("paragonResource",this.state.paragonResource),localStorage.setItem("paragonResistAll",this.state.paragonResistAll),localStorage.setItem("paragonArmor",this.state.paragonArmor),localStorage.setItem("paragonMaxHealth",this.state.paragonMaxHealth),React.DOM.div({className:"d3-container"},React.DOM.div({className:"d3-char-bg",ref:"charbg",style:style}),React.DOM.div({className:"d3-item-wrapper",ref:"items"},items),React.DOM.div({className:"d3-realm-wrapper"},"1 - Realm: ",React.DOM.select({className:"d3-realm",ref:"select",value:this.state.realm,onChange:this.setRealm},realms)),React.DOM.div({className:"d3-api-url"},"2 - Enter your BattleTag: ",React.DOM.input({value:this.state.battleTag,placeholder:"NAME#1234",onChange:this.handleChange})),React.DOM.div({className:"d3-char-wrapper"},"3 - Click below to select your hero: ",React.DOM.select({className:"d3-chars",ref:"select",value:this.state.selected,onChange:this.setSelect},heroes)),React.DOM.div({className:"panel-left "+this.state.paragonToggle,ref:"pl"},"General",base,React.DOM.a({className:"button",onClick:this.handleParagonStatsClick},React.DOM.span({className:"button-text"},"show paragon"))),React.DOM.div({className:"panel-bottom-left "+this.state.skillDescToggle,title:"click to open detailed description",ref:"pbl"},"Skills",skills,React.DOM.a({className:"button",onClick:this.handleSkillDescClick},React.DOM.span({className:"button-text"},"show details"))),React.DOM.div({className:"panel-left-additional ",ref:"pla"},"Paragon Points: ",paragon,React.DOM.a({className:"button",onClick:this.handleParagonStatsClick,title:"click to close"},React.DOM.span({className:"button-text"},"close"))),React.DOM.div({className:"panel-bottom-left-desc "+this.state.skillDescToggle,ref:"pbla"},React.DOM.a({className:"button",onClick:this.handleSkillDescClick,title:"click to close"},React.DOM.span({className:"button-text"},"close")),skillsDesc),React.DOM.div({className:"panel-bottom-right "+this.state.passiveDescToggle,title:"click to open detailed description",ref:"pbr"},"Passives",passives,specialPassive,React.DOM.a({className:"button",onClick:this.handlePassiveDescClick},React.DOM.span({className:"button-text"},"show details"))),React.DOM.div({className:"panel-bottom-right-desc "+this.state.passiveDescToggle,ref:"pbra"},React.DOM.a({className:"button",onClick:this.handlePassiveDescClick,title:"click to close"},React.DOM.span({className:"button-text"},"close")),passivesDesc,"Note: your Hellfire Passive cannot be displayed here, courtesy of blizzard"),React.DOM.div({ref:"pr",className:"panel-right "+this.state.toggle},"Stats",stats,React.DOM.a({className:"button",onClick:this.handleBonusStatsClick,title:"click to show/hide more stats"},React.DOM.span({className:"button-text"},"show more"))),React.DOM.div({className:"panel-right-additional ",ref:"pra"},"Offensive Stats",additionalStatsOffensive,"Defensive Stats",additionalStatsDefensive,React.DOM.a({className:"button",onClick:this.handleBonusStatsClick,title:"click to show/hide more stats"},React.DOM.span({className:"button-text"},"show less"))))}});React.render(React.createElement(DataWrapper,{pollInterval:6e5}),document.querySelector(".d3-profile")),function(){var a=document.querySelector(".d3-bg"),b=function(){TweenLite.fromTo(a,3,{y:-100,z:.01},{y:0,z:.01})};b()}();